<?xml version="1.0" encoding="UTF-8" ?>

<!--********************************************************************
Copyright 2016 Robert A. Beezer

This file is part of MathBook XML.

MathBook XML is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 or version 3 of the
License (at your option).

MathBook XML is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with MathBook XML.  If not, see <http://www.gnu.org/licenses/>.
*********************************************************************-->
<!-- This file was originally part of the book     -->
<!-- (as copied on 2016/03/25)                     -->
<!--                                               -->
<!--   Abstract Algebra: Theory and Applications   -->
<!--                                               -->
<!-- Copyright (C) 1997-2014  Thomas W. Judson     -->

<!-- permid is for testing friendlier HTML ids for instructors to see -->
<chapter xml:id="rune" permid="aBc" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Runestone Testing</title>

    <introduction>
        <p>We collect Runestone interactive items for testing here, in sections of their own.</p>
    </introduction>

    <section>
        <title>ActiveCode</title>

        <p>Python programs are made interactive in HTML, on request.</p>

        <listing xml:id="program-activecode-python">
            <caption>An interactive Python program, using <pubtitle>Runestone</pubtitle></caption>
            <program xml:id="python-hello-world" interactive='activecode' language="python">
                <input>
                print("Hello, World!")
                </input>
            </program>
        </listing>

        <p>A C program will only be interactive if hosted on a Runestone server.</p>

        <listing xml:id="program-activecode-c">
            <caption>An C program, interactive on a <pubtitle>Runestone</pubtitle> server</caption>
            <program xml:id="c-hello-world" interactive='activecode' language="c">
                <input>
                #include &lt;stdio.h&gt;

                int main(void)
                {
                    puts("Hello, world!");
                }
                </input>
            </program>
        </listing>

        <p>A Java program will only be interactive if hosted on a Runestone server.</p>

        <listing xml:id="program-activecode-java">
            <caption>A Java program, interactive on a <pubtitle>Runestone</pubtitle> server</caption>
            <program xml:id="java-hello-world" interactive='activecode' language="java">
                <input>
                import javax.swing.JFrame;  //Importing class JFrame
                import javax.swing.JLabel;  //Importing class JLabel
                public class HelloWorld {
                    public static void main(String[] args) {
                        JFrame frame = new JFrame();           //Creating frame
                        frame.setTitle("Hi!");                 //Setting title frame
                        frame.add(new JLabel("Hello, world!"));//Adding text to frame
                        frame.pack();                          //Setting size to smallest
                        frame.setLocationRelativeTo(null);     //Centering frame
                        frame.setVisible(true);                //Showing frame
                    }
                }
                </input>
            </program>
        </listing>

        <p>Javascript programs are made interactive in HTML, on request.</p>

        <listing xml:id="program-activecode-javascript">
            <caption>An interactive JavaScript program, using <pubtitle>Runestone</pubtitle></caption>
            <program xml:id="javascript-hello-world" interactive='activecode' language="javascript">
                <input>
                document.write('Hello, world!');
                </input>
            </program>
        </listing>

        <p>A <tag>program</tag> is not interactive, by default, no matter where it is hosted.</p>

        <listing xml:id="program-static-java">
            <caption>A static Java program</caption>
            <program xml:id="java-static" interactive='no' language="java">
                <input>
                import javax.swing.JFrame;  //Importing class JFrame
                import javax.swing.JLabel;  //Importing class JLabel
                public class HelloWorld {
                    public static void main(String[] args) {
                        JFrame frame = new JFrame();           //Creating frame
                        frame.setTitle("Hi!");                 //Setting title frame
                        frame.add(new JLabel("Hello, world!"));//Adding text to frame
                        frame.pack();                          //Setting size to smallest
                        frame.setLocationRelativeTo(null);     //Centering frame
                        frame.setVisible(true);                //Showing frame
                    }
                }
                </input>
            </program>
        </listing>

        <p>An Octave program will only be interactive if hosted on a Runestone server.  Octave is meant to be a drop-in replacement for Matlab.</p>

        <listing xml:id="program-activecode-octave">
            <caption>A simple Octave program</caption>
            <program xml:id="octave-simple" interactive='activecode' language="octave">
                <input>
                x = 2 + 2
                printf("%d\n", x)
                </input>
            </program>
        </listing>

        <p>A language not supported by Runestone Services will be rendered static.</p>

        <listing xml:id="program-mistake-pascal">
            <caption>A Pascal program that cannot be interactive on Runestone</caption>
            <program xml:id="pascal-mistake" interactive='activecode' language="pascal">
                <input>
                program HelloWorld;
                begin
                  WriteLn('Hello, world!');
                end.
                </input>
            </program>
        </listing>

        <p>A nonsense paragraph just to check on spacing.  A nonsense paragraph just to check on spacing.  A nonsense paragraph just to check on spacing.  A nonsense paragraph just to check on spacing.</p>
    </section>

    <section xml:id="code-lens">
        <title>Code Lens</title>

        <p>CodeLens is an interactive tool for following program execution, much like a debugger, without the ability to influence flow control or variable values.  For use without a server, traces must be computed beforehand.  First, we have some trivial programs, to provide minimal testing.</p>

        <listing xml:id="program-codelens-python">
            <caption>A Python program, stepable with CodeLens</caption>
            <program xml:id="python-hello-world-code-lens" interactive="codelens" language="python">
                <input>
                print('Hello, World!')
                </input>
            </program>
        </listing>

        <listing xml:id="program-codelens-c">
            <caption>An C program, stepable with CodeLens</caption>
            <program xml:id="c-hello-world-code-lens" interactive="codelens" language="c">
                <input>
                #include &lt;stdio.h&gt;

                int main(void)
                {
                    puts("Hello, World!");
                }
                </input>
            </program>
        </listing>

        <listing xml:id="program-codelens-java">
            <caption>A Java program, stepable with CodeLens</caption>
            <program xml:id="java-hello-world-code-lens" interactive="codelens" language="java">
                <input>
                public class HelloWorld {
                    public static void main(String[] args) {
                        System.out.println("Hello, World!");
                    }
                }
                </input>
            </program>
        </listing>

        <p>Now some moderately more complicated programs to find teh prime numbers less than <m>20</m>.  We do not vouch for the quality of these, or even their correctness!</p>

        <listing xml:id="sieve-python">
            <caption><url href="https://www.tutorialspoint.com/python-program-for-sieve-of-eratosthenes" visual="www.tutorialspoint.com/python-program-for-sieve-of-eratosthenes">Sieve of Eratosthenes</url>, Java</caption>
            <program xml:id="sieve-codelens-python" interactive="codelens" language="python">
                <input><![CDATA[
                def SieveOfEratosthenes(n):
                   # array of type boolean with True values in it
                   prime = [True for i in range(n + 1)]
                   p = 2
                   while (p * p <= n):
                      # If it remain unchanged it is prime
                      if (prime[p] == True):
                         # updating all the multiples
                         for i in range(p * 2, n + 1, p):
                            prime[i] = False
                      p += 1
                   prime[0]= False
                   prime[1]= False
                   # Print
                   for p in range(n + 1):
                      if prime[p]:
                         print (p,end=" ")
                # main
                if __name__=='__main__':
                   n = 20
                   print ("The prime numbers smaller than or equal to", n,"is")
                   SieveOfEratosthenes(n)
                ]]>
                </input>
            </program>
        </listing>

        <listing xml:id="sieve-cpp">
            <caption><url href="https://www.tutorialspoint.com/cplusplus-program-to-implement-sieve-of-eratosthenes-to-generate-prime-numbers-between-given-range" visual="www.tutorialspoint.com/cplusplus-program-to-implement-sieve-of-eratosthenes-to-generate-prime-numbers-between-given-range">Sieve of Eratosthenes</url>, C++</caption>
            <program xml:id="sieve-codelens-cpp" interactive="codelens" language="cpp">
                <input> <![CDATA[
                #include <stdio.h>
                const int len = 20;
                int main() {
                   int arr[20] = {0};
                   for (int i = 2; i < len; i++) {
                      for (int j = i * i; j < len; j+=i) {
                         arr[j - 1] = 1;
                      }
                   }
                   for (int i = 1; i < len; i++) {
                      if (arr[i - 1] == 0)
                        printf(" %d", i);
                   }
                }
                ]]>
                </input>
            </program>
        </listing>

        <listing xml:id="sieve-java">
            <caption><url href="https://www.tutorialspoint.com/Sieve-of-Eratosthenes-in-java" visual="www.tutorialspoint.com/Sieve-of-Eratosthenes-in-java">Sieve of Eratosthenes</url>, Java</caption>
            <program xml:id="sieve-codelens-java" interactive="codelens" language="java">
                <input><![CDATA[
                public class SievePrimeFactors  {
                   public static void main(String args[]) {
                      int num = 20;
                      boolean[] bool = new boolean[num];

                      for (int i = 0; i< bool.length; i++) {
                         bool[i] = true;
                      }
                      for (int i = 2; i < Math.sqrt(num); i++) {
                         if(bool[i] == true) {
                            for(int j = (i*i); j < num; j = j+i) {
                               bool[j] = false;
                            }
                         }
                      }
                      System.out.println("List of prime numbers: ");
                      for (int i = 2; i< bool.length; i++) {
                         if(bool[i]==true) {
                            System.out.println(i);
                         }
                      }
                   }
                }
                ]]>
                </input>
            </program>
        </listing>

    </section>

    <section xml:id="coding-exercises">
        <title>Coding Exercises</title>

        <p>Program listings can be more that just live demonstrations, they can be exercises.  The first two also occur in the sample article where they just get a static rendering, if at all.</p>

        <exercise xml:id="coding-exercise-blank">
            <title>Inline Coding Exercise, No Help</title>

            <statement>
                <p>An exercise might ask a reader to write a computer program, that would go here in the <tag>statement</tag>.  But you can also add a <tag>program</tag> element after a <tag>statement</tag>.  Here we place no code at all, but we do say we want it to be interactive.  The purpose is to make it a live coding environment for a version of your output that allows the reader to perhaps submit a solution.  The <tag>program</tag> element is necessary so you can specify a programming language.</p>

                <p>In interactive formats, try creating and running a Python program below.  Use CodeLens to step through the program.</p>
            </statement>
            <program language="python"/>
            <hint>We didn't really ask you to do anything.</hint>
        </exercise>

        <exercise xml:id="coding-exercise-partial-one">
            <title>Inline Coding Exercise, Partial</title>

            <statement>
                <p>Similar to above, but we provide a starting point for the exercise.</p>
            </statement>
            <program language="c">
                <input>
                #include &lt;stdio.h&gt;

                int main(void)
                </input>
            </program>
            <answer>
                <p>We're not really sure.  But it would begin as follows:</p>
                <program language="c">
                    <input>
                    #include &lt;stdio.h&gt;

                    int main(void)
                    </input>
                </program>
            </answer>
        </exercise>

        <activity xml:id="coding-exercise-partial-two">
            <title>Activity Coding Exercise</title>

            <statement>
                <p>Similar to above, but now as a complete Python program inside an <tag>activity</tag>.  This demonstrates the possibility to use any <q>project-like</q> block (<tag>project</tag>, <tag>activity</tag>, <tag>exploration</tag>, <tag>investigation</tag>), but not in the case when structured with <tag>task</tag>.</p>
            </statement>
            <program language="python">
                <input>
                for i in range(10):
                    print(i)
                </input>
            </program>
            <answer>We're still not really sure.</answer>
        </activity>

        <exercise>
            <title>An Exercise with a Static Program</title>

            <statement>
                <p>Similar to above, again, but we place the <tag>program</tag> element <em>inside</em> the <tag>statement</tag>, not after it as a peer.  This signals that this is not a coding exercise and the program will render static, since it is explicitly labeled as not being interactive.</p>
                <program xml:id="coding-exercise-static" language="c" interactive="no">
                    <input>
                    #include &lt;stdio.h&gt;

                    int main(void)
                    </input>
                </program>
            </statement>
            <solution>We're not really sure. Still.</solution>
        </exercise>

        <exercise xml:id="coding-exercise-python-unit-test">
            <title>Coding Exercise, with Unit Tests</title>

            <statement>
                <p>Fix the following code so that it always correctly adds two numbers. [Ed. Unit test support is experimental.]</p>
            </statement>
            <program language="python">
                <input>
                def add(a,b):
                    return 4
                </input>
                <tests>
                from unittest.gui import TestCaseGui

                class myTests(TestCaseGui):

                   def testOne(self):
                       self.assertEqual(add(2,2), 4, "Adding two identical integers")
                       self.assertEqual(add(7,13), 20, "Adding two different integers")
                       self.assertAlmostEqual(add(2.0,3.0), 5.0, 5, "Adding two decimal numbers")

                myTests().main()
                </tests>
            </program>
            <answer>
                <p>We're not really sure.  But it would begin as follows:</p>
                <program language="c">
                    <input>
                    #include &lt;stdio.h&gt;

                    int main(void)
                    </input>
                </program>
            </answer>
        </exercise>

    </section>

    <section>
        <title>YouTube Videos</title>

        <p>Runestone uses a YouTube API that broadcasts events when a reader interacts with a video.  In this way, Runestone can record video-watching as an activity.  As <pretext/> output we concede better behavior on small screens (<q>responsiveness</q>) to enable this feature in a Runestone version.  Various <pretext/> features, such as playlists, are not yet supported<mdash/>make a request.</p>

        <video xml:id="yt-list-vars" youtube="X1-UNHUajfk" width="60%" margins="5% 35%" preview="yt-list-variables.png"/>

        <p>The margins here are asymmetric just as a test.  And this text is here to see where the video ends.</p>
    </section>

    <section>
        <title>Deeper</title>

        <introduction>
            <p>This is a stub of a <tag>section</tag>, but it contains two <tag>subsection</tag> which each contain a PROJECT-LIKE item that includes a <tag>program</tag> element, and thus is a coding exercise.  This tests migration to the Runestone assignment area, though Runestone only has divisions two-deep (<q>chapter</q> and <q>subchapter</q>, so both will show up associated with the same <tag>section</tag><mdash/>this one.</p>

            <p>The first is a start of a C program, so will only be interactive on a Runestone server.  The second is a Python program, so will be interactive in all HTML outputs.</p>
        </introduction>

        <subsection>
            <title>Subsection One</title>

            <p>An <tag>activity</tag> next.  This one has a <tag>program</tag> so will be made interactive whenever possible.</p>

            <activity>
                <title>Activity in a Subsection</title>

                <statement>
                    <p>We would suggest you do something here.</p>
                </statement>
                <program xml:id="coding-exercise-partial-three" language="c">
                    <input>
                    #include &lt;stdio.h&gt;

                    int main(void)
                    </input>
                </program>
            </activity>

            <p>Nothing suggests this next <tag>project</tag> is interactive.  And we have configured the publication file to make any <q>project-like</q> to never be a <q>short answer</q> interactive question, even when built to host on a capable platform.</p>

            <project>
                <title>Project in a Subsection</title>

                <statement>
                    <p>You would work this project on paper, most likely.</p>
                </statement>
            </project>
        </subsection>

        <subsection>
            <title>Subsection Two</title>

            <p>An <tag>exploration</tag> next.</p>

            <exploration xml:id="exploration-with-always-static-program">
                <title>Exploration in a Subsection</title>

                <statement>
                    <p>We would suggest now that you explore something here.</p>
                </statement>
                <program language="python">
                    <input>
                    for i in range(10):
                        print(i)
                    </input>
                </program>
            </exploration>

            <p>The simple <tag>exercise</tag> could be a <q>short answer</q> question on a capable interactive platform, except that we have used the publication file to configure <q>inline</q> exercises to never be interactive.</p>

            <exercise>
                <title>Inline Exercise in a Subsection</title>

                <statement>
                    <p>I am never ever an interactive short answer question.</p>
                </statement>
            </exercise>
        </subsection>
    </section>

    <exercises>
        <title>Interactive Exercises</title>

        <p>A sample of interactive problem types.</p>

        <exercise>
            <title>True/False</title>
            <idx>vector space</idx>
            <statement correct="no">
                <p>Every vector space has finite dimension.</p>
            </statement>
            <feedback>
                <p>The vector space of all polynomials with finite degree has a basis, <m>B = \{1,x,x^2,x^3,\dots\}</m>, which is infinte.</p>
            </feedback>
            <hint>
                <p><m>P_n</m>, the vector space of polynomials with degree at most <m>n</m>, has dimension <m>n+1</m> by <xref ref="theorem-exponent-laws"/>.  [Cross-reference is just a demo, content is not relevant.]  What happens if we relax the defintion and remove the parameter <m>n</m>?</p>
            </hint>
        </exercise>

        <exercise>
            <title>Multiple-Choice, Not Randomized, One Answer</title>
            <idx>stop signs</idx>
            <statement>
                <p>What color is a stop sign?</p>
            </statement>
            <!-- to appear as problem with potentially multiple correct -->
            <!-- answers (even though there is only one), use           -->
            <!--                                                        -->
            <!--     <choices multiple-correct="yes">                   -->
            <!--                                                        -->
            <choices>
                <choice>
                    <statement>
                        <p>Green</p>
                    </statement>
                    <feedback>
                        <p>Green means <q>go!</q>.</p>
                    </feedback>
                </choice>
                <choice correct="yes">
                    <statement>
                        <p>Red</p>
                    </statement>
                    <feedback>
                        <p>Red is universally used for prohibited activities or serious warnings.</p>
                    </feedback>
                </choice>
                <choice>
                    <statement>
                        <p>White</p>
                    </statement>
                    <feedback>
                        <p>White might be hard to see.</p>
                    </feedback>
                </choice>
            </choices>
            <hint>
                <p>What did you see last time you went driving?</p>
            </hint>
            <hint>
                <p>Maybe go out for a drive?</p>
            </hint>
        </exercise>

        <exercise>
            <title>Multiple-Choice, Not Randomized, Multiple Answers</title>
            <idx>stop signs</idx>
            <statement>
                <p>Which colors might be found in a rainbow?  (Note that the radio buttons now allow multiple buttons to be selected.)</p>
            </statement>
            <choices>
                <choice correct="yes">
                    <statement>
                        <p>Red</p>
                    </statement>
                    <feedback>
                        <p>Red is a definitely one of the colors.</p>
                    </feedback>
                </choice>
                <choice correct="yes">
                    <statement>
                        <p>Yellow</p>
                    </statement>
                    <feedback>
                        <p>Yes, yellow is correct.</p>
                    </feedback>
                </choice>
                <choice>
                    <statement>
                        <p>Black</p>
                    </statement>
                    <feedback>
                        <p>Remember the acronym<ellipsis/><acro>ROY G BIV</acro>.  <q>B</q> stands for blue.</p>
                    </feedback>
                </choice>
                <choice correct="yes">
                    <statement>
                        <p>Green</p>
                    </statement>
                    <feedback>
                        <p>Yes, green is one of the colors.</p>
                    </feedback>
                </choice>
            </choices>
            <hint>
                <p>Do you know the acronym<ellipsis/><acro>ROY G BIV</acro> for the colors of a rainbow, and their order?</p>
            </hint>
        </exercise>

        <exercise>
            <title>Multiple-Choice, Randomized, One Answer</title>
            <idx>stop signs</idx>
            <statement>
                <p>What color is a stop sign? [Static versions retain the order as authored.]</p>
            </statement>
            <choices randomize="yes">
                <choice>
                    <statement>
                        <p>Green</p>
                    </statement>
                    <feedback>
                        <p>Green means <q>go!</q>.</p>
                    </feedback>
                </choice>
                <choice correct="yes">
                    <statement>
                        <p>Red</p>
                    </statement>
                    <feedback>
                        <p>Red is universally used for prohibited activities or serious warnings.</p>
                    </feedback>
                </choice>
                <choice>
                    <statement>
                        <p>White</p>
                    </statement>
                    <feedback>
                        <p>White might be hard to see.</p>
                    </feedback>
                </choice>
            </choices>
            <hint>
                <p>What did you see last time you went driving?</p>
            </hint>
            <hint>
                <p>Maybe go out for a drive?</p>
            </hint>
        </exercise>

        <exercise>
            <title>Multiple-Choice, Randomized, Multiple Answers</title>
            <idx>stop signs</idx>
            <statement>
                <p>Which colors might be found in a rainbow?  (Note that the radio buttons now allow multiple buttons to be selected.) [Static versions retain the order as authored.]</p>
            </statement>
            <choices randomize="yes">
                <choice correct="yes">
                    <statement>
                        <p>Red</p>
                    </statement>
                    <feedback>
                        <p>Red is a definitely one of the colors.</p>
                    </feedback>
                </choice>
                <choice correct="yes">
                    <statement>
                        <p>Yellow</p>
                    </statement>
                    <feedback>
                        <p>Yes, yellow is correct.</p>
                    </feedback>
                </choice>
                <choice>
                    <statement>
                        <p>Black</p>
                    </statement>
                    <feedback>
                        <p>Remember the acronym<ellipsis/><acro>ROY G BIV</acro>.  <q>B</q> stands for blue.</p>
                    </feedback>
                </choice>
                <choice correct="yes">
                    <statement>
                        <p>Green</p>
                    </statement>
                    <feedback>
                        <p>Yes, green is one of the colors.</p>
                    </feedback>
                </choice>
            </choices>
            <hint>
                <p>Do you know the acronym<ellipsis/><acro>ROY G BIV</acro> for the colors of a rainbow, and their order?</p>
            </hint>
        </exercise>

        <exercise>
            <title>Mathematical Multiple-Choice, Not Randomized, Multiple Answers</title>
            <idx>stop signs</idx>
            <statement>
                <p>Which of the following is an antiderivative of <m>2\sin(x)\cos(x)</m>?</p>
            </statement>
            <choices>
                <choice correct="yes">
                    <statement>
                        <p><m>\sin^2(x)+832</m></p>
                    </statement>
                    <feedback>
                        <p>Remember that when we write <m>+C</m> on an antiderivative that this is the way we communicate that there are <em>many</em> possible derivatives, but they all <q>differ by a constant</q>.</p>
                    </feedback>
                </choice>
                <choice correct="yes">
                    <statement>
                        <p><m>\sin^2(x)</m></p>
                    </statement>
                    <feedback>
                        <p>The derivative given in the statement of the problem looks exactly like an application of the chain rule to <m>\sin^2(x)</m>.</p>
                    </feedback>
                </choice>
                <choice correct="yes">
                    <statement>
                        <p><m>-\cos^2(x)</m></p>
                    </statement>
                    <feedback>
                        <p>Take a derivative on <m>-\cos^2(x)</m> to see that this answer is correct.  Extra credit: does this answer <q>differ by a constant</q> when subtracted from either of the other two correct answers?</p>
                    </feedback>
                </choice>
                <choice>
                    <statement>
                        <p><m>-2\cos(x)\sin(x)</m></p>
                    </statement>
                    <feedback>
                        <p>The antiderivative of a product is not the product of the antiderivatives.  Use the product rule to take a derivative and see that this answer is not correct.</p>
                    </feedback>
                </choice>
            </choices>
            <hint>
                <p>You can take a derivative on any one of the choices to see if it is correct or not, rather than using techniques of integration to find <em>a single</em> correct answer.</p>
            </hint>
        </exercise>

        <exercise xml:id="number-theory-proof" adaptive="yes">
            <title>Parsons Problem, Mathematical Proof</title>
            <idx>even numbers</idx>
            <statement>
                <p>Create a proof of the theorem: If <m>n</m> is an even number, then <m>n\equiv 0\mod 2</m>.</p>
            </statement>
            <blocks>
                <block order="2">
                    <p>Suppose <m>n</m> is even.</p>
                </block>
                <block order="3">
                    <choice correct="yes"><p>Then there exists an <m>m</m> so that <m>n = 2m</m>.</p></choice>
                    <choice><p>Then there exists an <m>m</m> so that <m>n = 2m + 1</m>.</p></choice>
                </block>
                <block order="1" correct="no">
                    <p>Click the heels of your ruby slippers together three times.</p>
                </block>
                <block order="5">
                    <p>So <m>n = 2m + 0</m>.</p>
                    <p>This is a superfluous second paragraph in this block.</p>
                </block>
                <block order="4">
                    <p>Thus <m>n\equiv 0\mod 2</m>.</p>
                </block>
            </blocks>
            <hint>Dorothy will not be much help with this proof.</hint>
        </exercise>

        <exercise xml:id="prime-number-program-indent-yes" language="python" adaptive="yes" indentation="hide">
            <title>Parsons Problem, Programming</title>
            <idx>prime numbers</idx>
            <idx>Sieve of Eratosthenes</idx>
            <statement>
                <p>The Sieve of Eratosthenes computes prime numbers by starting with a finite list of the integers bigger than 1.  The first member of the list is a prime and is saved/recorded.  Then all multiples of that prime (which not a prime, excepting the prime itself!) are removed from the list.  Now the first number remaining in the list is the next prime number.  And the process repeats.</p>
                <p>The code blocks below can be rearranged to form one of the many possible programs to implement this algorithm to compute a list of all the primes less than <m>250</m>. [Ed. this version of this problem requires the reader to provide the necessary indentation.]</p>
                <p>This reprises <xref ref="sieve-primes"/>.</p>
            </statement>
            <blocks>
                <block order="6">
                    <cline>n = 250</cline>
                </block>
                <block order="2">
                    <choice correct="yes">
                        <cline>primes = []</cline>
                        <cline>candidates = list(range(2,n))</cline>
                    </choice>
                    <choice>
                        <cline>candidates = []</cline>
                        <cline>primes = list(range(2,n))</cline>
                    </choice>
                </block>
                <block order="7" correct="no">
                    <cline>primes = candidates + [p]</cline>
                </block>
                <block order="8">
                    <cline>while candidates:</cline>
                </block>
                <block order="3">
                    <cline>    p = candidates[0]</cline>
                    <cline>    primes.append(p)</cline>
                </block>
                <block order="1">
                    <cline>    for nonprime in range(p, n, p):</cline>
                </block>
                <block order="5">
                    <cline>        if nonprime in candidates:</cline>
                    <cline>            candidates.remove(nonprime)</cline>
                </block>
                <block order="4">
                    <cline>print(primes)</cline>
                </block>
            </blocks>
        </exercise>

        <exercise xml:id="prime-number-program-indent-no" language="python" adaptive="yes" indentation="show">
            <title>Parsons Problem, Programming</title>
            <idx>prime numbers</idx>
            <idx>Sieve of Eratosthenes</idx>
            <statement>
                <p>The Sieve of Eratosthenes computes prime numbers by starting with a finite list of the integers bigger than 1.  The first member of the list is a prime and is saved/recorded.  Then all multiples of that prime (which not a prime, excepting the prime itself!) are removed from the list.  Now the first number remaining in the list is the next prime number.  And the process repeats.</p>
                <p>The code blocks below can be rearranged to form one of the many possible programs to implement this algorithm to compute a list of all the primes less than <m>250</m>. [Ed. this version of this problem does not require the reader to provide the necessary indentation, which is the default.]</p>
                <p>This reprises <xref ref="sieve-primes"/>.</p>
            </statement>
            <blocks>
                <block order="6">
                    <cline>n = 250</cline>
                </block>
                <block order="2">
                    <choice correct="yes">
                        <cline>primes = []</cline>
                        <cline>candidates = list(range(2,n))</cline>
                    </choice>
                    <choice>
                        <cline>candidates = []</cline>
                        <cline>primes = list(range(2,n))</cline>
                    </choice>
                </block>
                <block order="7" correct="no">
                    <cline>primes = candidates + [p]</cline>
                </block>
                <block order="8">
                    <cline>while candidates:</cline>
                </block>
                <block order="3">
                    <cline>    p = candidates[0]</cline>
                    <cline>    primes.append(p)</cline>
                </block>
                <block order="1">
                    <cline>    for nonprime in range(p, n, p):</cline>
                </block>
                <block order="5">
                    <cline>        if nonprime in candidates:</cline>
                    <cline>            candidates.remove(nonprime)</cline>
                </block>
                <block order="4">
                    <cline>print(primes)</cline>
                </block>
            </blocks>
        </exercise>

        <exercise xml:id="number-theory-proof-numbered-left" adaptive="yes">
            <title>Parsons Problem, Mathematical Proof, Numbered Blocks</title>
            <idx>even numbers</idx>
            <statement>
                <p>Create a proof of the theorem: If <m>n</m> is an even number, then <m>n\equiv 0\mod 2</m>. [Ed.  This version has numbered blocks, online they are on the right end of the block.]</p>
            </statement>
            <blocks numbered="right">
                <block order="2">
                    <p>Suppose <m>n</m> is even.</p>
                </block>
                <block order="3">
                    <choice correct="yes"><p>Then there exists an <m>m</m> so that <m>n = 2m</m>.</p></choice>
                    <choice><p>Then there exists an <m>m</m> so that <m>n = 2m + 1</m>.</p></choice>
                </block>
                <block order="1" correct="no">
                    <p>Click the heels of your ruby slippers together three times.</p>
                </block>
                <block order="5">
                    <p>So <m>n = 2m + 0</m>.</p>
                    <p>This is a superfluous second paragraph in this block.</p>
                </block>
                <block order="4">
                    <p>Thus <m>n\equiv 0\mod 2</m>.</p>
                </block>
            </blocks>
            <hint>Dorothy will not be much help with this proof.</hint>
        </exercise>

        <exercise xml:id="prime-number-program-numbered-right" language="python" adaptive="yes" indentation="hide">
            <title>Parsons Problem, Programming</title>
            <idx>prime numbers</idx>
            <idx>Sieve of Eratosthenes</idx>
            <statement>
                <p>The Sieve of Eratosthenes computes prime numbers by starting with a finite list of the integers bigger than 1.  The first member of the list is a prime and is saved/recorded.  Then all multiples of that prime (which not a prime, excepting the prime itself!) are removed from the list.  Now the first number remaining in the list is the next prime number.  And the process repeats.</p>
                <p>The code blocks below can be rearranged to form one of the many possible programs to implement this algorithm to compute a list of all the primes less than <m>250</m>. [Ed.  This version has numbered blocks, online they are on the left end of the block.]</p>
                <p>This reprises <xref ref="sieve-primes"/>.</p>
            </statement>
            <blocks numbered="left">
                <block order="6">
                    <cline>n = 250</cline>
                </block>
                <block order="2">
                    <choice correct="yes">
                        <cline>primes = []</cline>
                        <cline>candidates = list(range(2,n))</cline>
                    </choice>
                    <choice>
                        <cline>candidates = []</cline>
                        <cline>primes = list(range(2,n))</cline>
                    </choice>
                </block>
                <block order="7" correct="no">
                    <cline>primes = candidates + [p]</cline>
                </block>
                <block order="8">
                    <cline>while candidates:</cline>
                </block>
                <block order="3">
                    <cline>    p = candidates[0]</cline>
                    <cline>    primes.append(p)</cline>
                </block>
                <block order="1">
                    <cline>    for nonprime in range(p, n, p):</cline>
                </block>
                <block order="5">
                    <cline>        if nonprime in candidates:</cline>
                    <cline>            candidates.remove(nonprime)</cline>
                </block>
                <block order="4">
                    <cline>print(primes)</cline>
                </block>
            </blocks>
        </exercise>

        <!-- https://www.britannica.com/list/25-decade-defining-events-in-us-history -->
        <exercise xml:id="matching-dates">
            <title>Matching Problem, Dates</title>
            <idx>matching US dates</idx>
            <statement>
                <p>Match each event in United States history with the year it happened.</p>
            </statement>
            <feedback>
                <p>Review <url href="https://www.britannica.com/list/25-decade-defining-events-in-us-history" visual="www.britannica.com/list/25-decade-defining-events-in-us-history">Encyclopedia Brittania, 25 Decade-Defining Events in U.S. History</url>url.</p>
            </feedback>
            <matches>
                <match order="4">
                    <premise>Monroe Doctrine</premise>
                    <response>1823</response>
                </match>
                <match order="3">
                    <premise>Haymarket Riot</premise>
                    <response>1886</response>
                </match>
                <match order="1">
                    <premise>Louisiana Purchase</premise>
                    <response>1803</response>
                </match>
                <match order="2">
                    <premise>Battle of Gettysburg</premise>
                    <response>1863</response>
                </match>
            </matches>
        </exercise>

        <exercise xml:id="matching-derivatives">
            <title>Matching Problem, Derivatives</title>
            <idx>matching derivatives</idx>
            <statement>
                <p>Match each function with its derivative.</p>
            </statement>
            <feedback>
                <p>Did you compute the derivative of each function in the premises (left column)?</p>
            </feedback>
            <matches>
                <match order="1">
                    <premise><m>x^3-6x^2+5</m></premise>
                    <response><m>3x^2-12x</m></response>
                </match>
                <match order="3">
                    <premise><m>x^{-3}</m></premise>
                    <response><m>-3x^{-4}</m></response>
                </match>
                <match order="2">
                    <premise><m>(x+1)^2</m></premise>
                    <response><m>2x+2</m></response>
                </match>
            </matches>
        </exercise>

        <exercise xml:id="clickable-text">
            <title>Clickable Areas, <q>Regular</q> Text</title>

            <statement>
                <p>Identify (by clicking, or by circling) all of the nouns in this quotation by Eleanor Roosevelt.</p>
            </statement>

            <areas>
                <p><q>The <area>future</area> belongs to <area correct="no">those</area> who believe in the <area correct="yes">beauty</area> of <area correct="no">their</area> <area>dreams</area>.</q></p>
            </areas>

            <feedback>
                <p>The incorrect words are pronouns.</p>
            </feedback>
        </exercise>

        <exercise xml:id="clickable-code">
            <title>Clickable Areas, Code</title>

            <statement>
                <p>Identify (by clicking, or by circling) all of the assignment statements in this Python function.</p>
            </statement>

            <areas language="python">
                <cline><area correct="no">def main():</area></cline>
                <cline>    <area correct="yes">x = 4</area></cline>
                <cline>    for i in range(5):</cline>
                <cline>        <area>y = i</area></cline>
                <cline>        <area correct="no">if y > 2:</area></cline>
                <cline>            print(y)</cline>
            </areas>

            <feedback>
                <p>Remember, the operator <c>=</c> is used for assignment.</p>
            </feedback>
        </exercise>

        <exercise xml:id="clickable-table">
            <title>Clickable Areas, Text in a Table</title>

            <statement>
                <p>A two-dimensional array was created in Python with the list comprehension:<cd>
                        <cline>[[0 for x in range(3)] for y in range(2)]</cline>
                </cd>Then the values were (mostly) changed from zeros and the final array is shown below.</p>
                <p>Identify (by clicking, or by circling) all of the boolean values in the array.</p>
            </statement>

            <areas>
                <tabular top="minor" bottom="minor" left="minor" right="minor">
                    <row>
                        <cell><c>42</c></cell>
                        <cell><area><c>True</c></area></cell>
                        <cell><area correct="no"><c>'towel'</c></area></cell>
                    </row>
                    <row>
                        <cell><area correct="no">'true'</area></cell>
                        <cell>0</cell>
                        <cell><area>False</area></cell>
                    </row>
                </tabular>

                <p>This second table has no <tag>area</tag>, in order to test CSS for tables.</p>

                <tabular top="minor" bottom="minor" left="minor" right="minor">
                    <row>
                        <cell><c>42</c></cell>
                        <cell><c>True</c></cell>
                        <cell><c>'towel'</c></cell>
                    </row>
                    <row>
                        <cell>'true'</cell>
                        <cell>0</cell>
                        <cell>False</cell>
                    </row>
                </tabular>
            </areas>
            <hint>
                <p>Python boolean variables begin with capital latters.</p>
            </hint>
            <feedback>
                <p>Python boolean variables are <c>True</c> and <c>False</c>.  A value in quotation marks is a string, not a boolean.</p>
            </feedback>
        </exercise>

        <exercise>
            <title>Short Answer</title>

            <statement>
                <p>This sample book is configured to make some simple questions interactive on a capable platform, and to make others never interactive, even if it is possible.  In this case a <q>divisional</q> exercise will be made interactive whenever possible (which is the default, even though we have set this option explicitly).</p>
            </statement>
        </exercise>

        <exercise>
            <title>Fill-In, Integer Answer</title>

            <statement>
                <p>The game of bowling uses <var/> pins that you try to knock down.</p>
            </statement>
            <setup>
                <var>
                    <condition number="10">
                        <feedback>
                            <p>Arranged in a triangle, there are <m>1+2+3+4 = 10</m> pins, a so-called <term>triangular</term> number.</p>
                        </feedback>
                    </condition>
                    <condition number="16">
                        <feedback>
                            <p><em>Close</em>! You may have used hexadecimal notation, when you did not really mean to.</p>
                        </feedback>
                    </condition>
                    <condition string=".*">
                        <feedback>
                            <p>Incorrect.</p>
                        </feedback>
                    </condition>
                </var>
            </setup>
        </exercise>

        <exercise>
            <title>Fill-In, String and Number Answers</title>

            <statement>
                <p>Complete the following line of a Python program so that it will declare an integer variable <c>age</c> with an initial value of <c>5</c>.</p>
                <p><var/> <c>age = </c> <var/><c>;</c></p>
            </statement>
            <setup>
                <var>
                    <condition string="int">
                        <feedback>
                            <p>A variable of type <c>int</c> is appropriate for whole number ages.</p>
                        </feedback>
                    </condition>
                    <condition string=".*">
                        <feedback>
                            <p>Remember that Java uses just the first three letters of the word <q>integer</q> to define an integral type.</p>
                        </feedback>
                    </condition>
                </var>
                <var>
                    <condition number="5">
                        <feedback>
                            <p>An integer variable may be initialized to a value.</p>
                        </feedback>
                    </condition>
                    <condition string=".*">
                        <feedback>
                            <p>Use <c>5</c> as the initial value of the variable.</p>
                        </feedback>
                    </condition>
                </var>
            </setup>
        </exercise>

        <exercise>
            <title>Fill-In, Case-Insensitive Answer</title>

            <statement>
                <p>The word <var/> is the opposite of <q>yes</q>.  (Try a mixture of upper and lower-case letters.)</p>
            </statement>
            <setup>
                <var case="insensitive">
                    <!-- Note, no "p" in "feedback" -->
                    <condition string="no">
                        <feedback>The correct answers are  no, No, nO, and NO.</feedback>
                    </condition>
                    <condition string=".*">
                        <feedback>Incorrect.</feedback>
                    </condition>
                </var>
            </setup>
        </exercise>

        <exercise>
            <title>Fill-In, Decimal Answer</title>

            <statement>
                <p>The decimal number <var/> is an approximation of <m>\sfrac{1}{3}</m> to within three significant figures.  (<url href="https://en.wikipedia.org/wiki/Significant_figures" visual="en.wikipedia.org/wiki/Significant_figures">Wikipedia</url>).</p>
            </statement>
            <setup>
                <var>
                    <!-- Note, no "p" in "feedback" -->
                    <condition number="0.333" tolerance="0.0005">
                        <feedback>
                            <p>Any value in the interval <m>0.333\pm 0.0005</m> is correct.</p>
                        </feedback>
                    </condition>
                    <condition string=".*">
                        <feedback>
                            <p>Incorrect. Did you provide three <em>significant figures</em>?</p>
                        </feedback>
                    </condition>
                </var>
            </setup>
        </exercise>

    </exercises>

    <section>
        <title>Expedited Samples</title>

        <p>We hack in various interactive Runestone exercise types while <pretext/> markup evolves to cover more of Runestone's repertoire.  In static output these will just produce a message.  In <init>HTML</init> they may be interactive simply in a browser, or they may require being hosted on a Runestone server in order to perform.</p>

        <p>CodeLens for a Python program:</p>

        <exercise runestone='over_codelens1' />

        <p>CodeLens for a Java program.  Supplied in source with trace data built beforehand on a Runestone server:</p>

        <exercise runestone='asgn_viz1' />

    </section>

    <reading-questions>

        <exercise>
            <statement>
                <p>This is a simple question.  Does this look like a short answer question?</p>
                <p>Both questions in this <q>reading-questions</q> division should render in an interactive <q>short answer</q> form on a capable platform.  This is the default, and we have also explicitly set this behavior in the publication file.</p>
            </statement>
            <hint>
                <p>Shouldn't be hard!</p>
            </hint>
        </exercise>

        <exercise>
            <statement>
                <p>And a second reading question, so we can test having more than one.  Specifically to be certain each goes into the manifest properly.  How about some math now, <m>a^2+b^2=c^2</m>.  Is that all right?</p>
            </statement>
        </exercise>
    </reading-questions>

</chapter>

