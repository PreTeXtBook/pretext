<?xml version="1.0" encoding="UTF-8" ?>

<!--********************************************************************
Copyright 2016 Robert A. Beezer

This file is part of MathBook XML.

MathBook XML is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 or version 3 of the
License (at your option).

MathBook XML is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with MathBook XML.  If not, see <http://www.gnu.org/licenses/>.
*********************************************************************-->
<!-- This file was originally part of the book     -->
<!-- (as copied on 2016/03/25)                     -->
<!--                                               -->
<!--   Abstract Algebra: Theory and Applications   -->
<!--                                               -->
<!-- Copyright (C) 1997-2014  Thomas W. Judson     -->

<!-- permid is for testing friendlier HTML ids for instructors to see -->
<chapter xml:id="rune" permid="aBc" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Runestone Testing</title>

    <introduction>
        <p>We collect Runestone interactive items for testing here, in sections of their own.</p>
    </introduction>

    <section>
        <title>ActiveCode</title>

        <p>Python program listings are automatically made interactive when HTML is produced for Runestone.</p>

        <listing xml:id="program-activecode-python">
            <caption>An interactive Python program, using <pubtitle>Runestone</pubtitle></caption>
            <program xml:id="python-hello-world" interactive='yes' language="python">
                <input>
                print("Hello, World!")
                </input>
            </program>
        </listing>

        <listing xml:id="program-activecode-c">
            <caption>An interactive C program, using <pubtitle>Runestone</pubtitle></caption>
            <program xml:id="c-hello-world" interactive='yes' language="c">
                <input>
                #include

                int main(void)
                {
                    puts("Hello, world!");
                }
                </input>
            </program>
        </listing>

        <listing xml:id="program-activecode-java">
            <caption>An interactive Java program, using <pubtitle>Runestone</pubtitle></caption>
            <program xml:id="java-hello-world" interactive='yes' language="java">
                <input>
                import javax.swing.JFrame;  //Importing class JFrame
                import javax.swing.JLabel;  //Importing class JLabel
                public class HelloWorld {
                    public static void main(String[] args) {
                        JFrame frame = new JFrame();           //Creating frame
                        frame.setTitle("Hi!");                 //Setting title frame
                        frame.add(new JLabel("Hello, world!"));//Adding text to frame
                        frame.pack();                          //Setting size to smallest
                        frame.setLocationRelativeTo(null);     //Centering frame
                        frame.setVisible(true);                //Showing frame
                    }
                }
                </input>
            </program>
        </listing>

        <listing xml:id="program-activecode-javascript">
            <caption>An interactive JavaScript program, using <pubtitle>Runestone</pubtitle></caption>
            <program xml:id="javascript-hello-world" interactive='yes' language="javascript">
                <input>
                document.write('Hello, world!');
                </input>
            </program>
        </listing>

        <p>You do not need to make a <tag>program</tag> interactive, even on Runestone.</p>

        <listing xml:id="program-static-java">
            <caption>A static Java program</caption>
            <program xml:id="java-static" interactive='no' language="java">
                <input>
                import javax.swing.JFrame;  //Importing class JFrame
                import javax.swing.JLabel;  //Importing class JLabel
                public class HelloWorld {
                    public static void main(String[] args) {
                        JFrame frame = new JFrame();           //Creating frame
                        frame.setTitle("Hi!");                 //Setting title frame
                        frame.add(new JLabel("Hello, world!"));//Adding text to frame
                        frame.pack();                          //Setting size to smallest
                        frame.setLocationRelativeTo(null);     //Centering frame
                        frame.setVisible(true);                //Showing frame
                    }
                }
                </input>
            </program>
        </listing>

        <p>Octave is supported on Runestone.  Octave is meant to be a drop-in replacement for Matlab.  So in some places we use the language codes <c>matlab</c> and <c>octave</c> as synonyms, in particular for Runestone ActiveCode windows.</p>

        <listing xml:id="program-activecode-octave">
            <caption>A simple Octave program</caption>
            <program xml:id="octave-simple" interactive='yes' language="octave">
                <input>
                x = 2 + 2
                printf("%d\n", x)
                </input>
            </program>
        </listing>

        <p>An unsupported language might give a warning, but will be rendered static.</p>


        <listing xml:id="program-mistake-pascal">
            <caption>A Pascal program that cannot be interactive on Runestone</caption>
            <program xml:id="pascal-mistake" interactive='yes' language="pascal">
                <input>
                program HelloWorld;
                begin
                  WriteLn('Hello, world!');
                end.
                </input>
            </program>
        </listing>

        <p>A nonsense paragraph just to check on spacing.  A nonsense paragraph just to check on spacing.  A nonsense paragraph just to check on spacing.  A nonsense paragraph just to check on spacing.</p>
    </section>

    <section xml:id="coding-exercises">
        <title>Coding Exercises</title>

        <p>Program listings can be more that just live demonstrations, they can be exercises.  The first two also occur in the sample article where they just get a static rendering, if at all.</p>

        <exercise>
            <title>Inline Coding Exercise, No Help</title>

            <statement>
                <p>An exercise might ask a reader to write a computer program, that would go here in the <tag>statement</tag>.  But you can also add a <tag>program</tag> element after a <tag>statement</tag>.  Here we place no code at all, but we do say we want it to be interactive.  The purpose is to make it a live coding environment for a version of your output that allows the reader to perhaps submit a solution.  The <tag>program</tag> element is necessary so you can specify a programming language.</p>
            </statement>
            <program xml:id="coding-exercise-blank" language="python"/>
            <hint>We didn't really ask you to do anything.</hint>
        </exercise>

        <exercise>
            <title>Inline Coding Exercise, Partial</title>

            <statement>
                <p>Similar to above, but we provide a starting point for the exercise.</p>
            </statement>
            <program xml:id="coding-exercise-partial" language="c">
                <input>
                #include

                int main(void)
                </input>
            </program>
            <answer>We're not really sure.</answer>
        </exercise>

        <activity>
            <title>Activity Coding Exercise</title>

            <statement>
                <p>Similar to above, but now as an <tag>activity</tag>.  This demonstrates the possibility to use any <q>project-like</q> block (<tag>project</tag>, <tag>activity</tag>, <tag>exploration</tag>, <tag>investigation</tag>), but not in the case when structured with <tag>task</tag>.</p>
            </statement>
            <program xml:id="coding-exercise-partial" language="c">
                <input>
                #include

                int main(void)
                </input>
            </program>
            <answer>We're still not really sure.</answer>
        </activity>

        <exercise>
            <title>An Exercise with a Static Program</title>

            <statement>
                <p>Similar to above, again, but we place the <tag>program</tag> element <em>inside</em> the <tag>statement</tag>, not after it as a peer.  This signals that this is not a coding exercise and the program will render static, since it is explicitly labeled as not being interactive.</p>
                <program xml:id="coding-exercise-static" language="c" interactive="no">
                    <input>
                    #include

                    int main(void)
                    </input>
                </program>
            </statement>
            <answer>We're not really sure.</answer>
        </exercise>
    </section>

    <section>
        <title>YouTube Videos</title>

        <p>Runestone uses a YouTube API that broadcasts events when a reader interacts with a video.  In this way, Runestone can record video-watching as an activity.  As <pretext/> output we concede better behavior on small screens (<q>responsiveness</q>) to enable this feature in a Runestone version.  Various <pretext/> features, such as playlists, are not yet supported<mdash/>make a request.</p>

        <video youtube="X1-UNHUajfk" width="60%" margins="5% 35%"/>

        <p>The margins here are asymmetric just as a test.  And this text is here to see where the video ends.</p>
    </section>

    <reading-questions>

        <exercise>
            <p>This is a simple question.  Does this look like a short answer question?</p>
        </exercise>

        <exercise>
            <p>And a second reading question, so we can test having more than one.  Specifically to be certain each goes into the manifest properly.  How about some math now, <m>a^2+b^2=c^2</m>.  Is that all right?</p>
        </exercise>
    </reading-questions>

</chapter>

