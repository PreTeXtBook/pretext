<?xml version="1.0" encoding="UTF-8" ?>

<!--********************************************************************
Copyright 2015 Robert A. Beezer

This file is part of MathBook XML.

MathBook XML is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 or version 3 of the
License (at your option).

MathBook XML is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with MathBook XML.  If not, see <http://www.gnu.org/licenses/>.
*********************************************************************-->
<!-- This file was originally part of the book     -->
<!-- (as copied on 2015/07/12)                     -->
<!--                                               -->
<!--   Abstract Algebra: Theory and Applications   -->
<!--                                               -->
<!-- Copyright (C) 2010-2014  Robert A. Beezer     -->

<section xml:id="integers-sage">
    <title>Sage</title>

    <introduction>
        <p>Many properties of the algebraic objects we will study can be determined from properties of associated integers.  And Sage has many powerful functions for analyzing integers.</p>
    </introduction>

    <subsection>
        <title>Division Algorithm</title>

        <p>The code <c>a % b</c> will return the remainder upon division of <m>a</m> by <m>b</m>.  In other words, the result is the unique integer <m>r</m> such that (1) <m>0\leq r\lt b</m>, and (2) <m>a=bq+r</m> for some integer <m>q</m> (the quotient), as guaranteed by the Division Algorithm (<xref ref="theorem-integers-division_algorithm" />).  Then <m>(a-r)/b</m> will equal <m>q</m>.  For example,</p>

        <sage>
            <input>
            r = 14 % 3
            r
            </input>
            <output>2</output>
        </sage>

        <sage>
            <input>
            q = (14 - r)/3
            q
            </input>
            <output>4</output>
        </sage>

        <p>It is also possible to get both the quotient and remainder at the same time with the <c>.quo_rem()</c> method (quotient and remainder).</p>

        <sage>
            <input>
            a = 14
            b = 3
            a.quo_rem(b)
            </input>
            <output>(4, 2)</output>
        </sage>

        <p>A remainder of zero indicates divisibility.  So <c>(a % b) == 0</c> will return <c>True</c> if <m>b</m> divides <m>a</m>, and will otherwise return <c>False</c>.</p>

        <sage>
            <input>(20 % 5) == 0</input>
            <output>True</output>
        </sage>

        <sage>
            <input>(17 % 4) == 0</input>
            <output>False</output>
        </sage>

        <p>The <c>.divides()</c> method is another option.</p>

        <sage>
            <input>
            c = 5
            c.divides(20)
            </input>
            <output>True</output>
        </sage>

        <sage>
            <input>
            d = 4
            d.divides(17)
            </input>
            <output>False</output>
        </sage>
    </subsection>

    <subsection>
        <title>Greatest Common Divisor</title>

        <p>The greatest common divisor of <m>a</m> and <m>b</m> is obtained with the command <c>gcd(a, b)</c>, where in our first uses, <m>a</m> and <m>b</m> are integers.  Later, <m>a</m> and <m>b</m> can be other objects with a notion of divisibility and <q>greatness,</q> such as polynomials.  For example,</p>

        <sage>
            <input>gcd(2776, 2452)</input>
            <output>4</output>
        </sage>

        <p>We can use the <c>gcd</c> command to determine if a pair of integers are relatively prime.</p>

        <sage>
            <input>
            a = 31049
            b = 2105
            gcd(a, b) == 1
            </input>
            <output>True</output>
        </sage>

        <sage>
            <input>
            a = 3563
            b = 2947
            gcd(a, b) == 1
            </input>
            <output>False</output>
        </sage>

        <p>The command <c>xgcd(a,b)</c> (<q>eXtended GCD</q>) returns a triple where the first element is the greatest common divisor of <m>a</m> and <m>b</m> (as with the <c>gcd(a,b)</c> command above), but the next two elements are values of <m>r</m> and <m>s</m> such that <m>ra+sb=\gcd(a,b)</m>.</p>

        <sage>
            <input>xgcd(633,331)</input>
            <output>(1, -137, 262)</output>
        </sage>

        <p>Portions of the triple can be extracted using <c>[ ]</c> (<q>indexing</q>) to access the entries of the triple, starting with the first as number <c>0</c>.  For example, the following should always return the result <c>True</c>, even if you change the values of <c>a</c> and <c>b</c>.  Try changing the values of <c>a</c> and <c>b</c> below, to see that the result is always <c>True</c>.</p>

        <sage>
            <input>
            a = 633
            b = 331
            extended = xgcd(a, b)
            g = extended[0]
            r = extended[1]
            s = extended[2]
            g == r*a + s*b
            </input>
            <output>True</output>
        </sage>

        <p>Studying this block of code will go a long way towards helping you get the most out of Sage's output.  Note that <c>=</c> is how a value is <em>assigned</em> to a variable, while as in the last line, <c>==</c> is how we compare two items for <em>equality</em>.</p>

        </subsection>
        <subsection>
        <title>Primes and Factoring</title>

        <p>The method <c>.is_prime()</c> will determine if an integer is prime or not.</p>

        <sage>
            <input>
            a = 117371
            a.is_prime()
            </input>
            <output>True</output>
        </sage>

        <sage>
            <input>
            b = 14547073
            b.is_prime()
            </input>
            <output>False</output>
        </sage>

        <sage>
            <input>b == 1597 * 9109</input>
            <output>True</output>
        </sage>

        <p>The command <c>random_prime(a, proof=True)</c> will generate a random prime number between <m>2</m> and <m>a</m>. Experiment by executing the following two compute cells several times.  (Replacing <c>proof=True</c> by <c>proof=False</c> will speed up the search, but there will be a very, very, very small probability the result will not be prime.)</p>

        <sage doctest="random">
            <input>
            a = random_prime(10^21, proof=True)
            a
            </input>
            <output>424729101793542195193</output>
        </sage>

        <sage>
            <input>a.is_prime()</input>
            <output>True</output>
        </sage>

        <p>The command <c>prime_range(a, b)</c> returns an ordered list of all the primes from <m>a</m> to <m>b-1</m>, inclusive.  For example,</p>

        <sage>
            <input>prime_range(500, 550)</input>
            <output>[503, 509, 521, 523, 541, 547]</output>
        </sage>

        <p>The commands <c>next_prime(a)</c> and <c>previous_prime(a)</c> are other ways to get a single prime number of a desired size.  Give them a try below if you have an empty compute cell there (as you will if you are reading in the Sage Notebook, or are reading the online version).  (The hash symbol, <c>#</c>, is used to indicate a <q>comment</q> line, which will not be evaluated by Sage.  So erase this line, or start on the one below it.)</p>

        <sage type="practice"/>

        <p>In addition to checking if integers are prime or not, or generating prime numbers, Sage can also decompose any integer into its prime factors, as described by the Fundamental Theorem of Arithmetic (<xref ref="theorem-fund-theorem-arithmetic" />).</p>

        <sage>
            <input>
            a = 2600
            a.factor()
            </input>
            <output>2^3 * 5^2 * 13</output>
        </sage>

        <p>So <m>2600 = 2^3\times 5^2\times 13</m> and this is the unique way to write <m>2600</m> as a product of prime numbers (other than rearranging the order of the primes themselves in the product).</p>

        <p>While Sage will print a factorization nicely, it is carried internally as a list of pairs of integers, with each pair being a base (a prime number) and an exponent (a positive integer).  Study the following carefully, as it is another good exercise in working with Sage output in the form of lists.</p>

        <sage>
            <input>
            a = 2600
            factored = a.factor()
            first_term = factored[0]
            first_term
            </input>
            <output>(2, 3)</output>
        </sage>

        <sage>
            <input>
            second_term = factored[1]
            second_term
            </input>
            <output>(5, 2)</output>
        </sage>

        <sage>
            <input>
            third_term = factored[2]
            third_term
            </input>
            <output>(13, 1)</output>
        </sage>

        <sage>
            <input>
            first_prime = first_term[0]
            first_prime
            </input>
            <output>2</output>
        </sage>

        <sage>
            <input>
            first_exponent = first_term[1]
            first_exponent
            </input>
            <output>3</output>
        </sage>

        <p>The next compute cell reveals the internal version of the factorization by asking for the actual list.  And we show how you could determine exactly how many terms the factorization has by using the length command, <c>len()</c>.</p>

        <sage>
            <input>list(factored)</input>
            <output>[(2, 3), (5, 2), (13, 1)]</output>
        </sage>

        <sage>
            <input>len(factored)</input>
            <output>3</output>
        </sage>

        <p>Can you extract the next two primes, and their exponents, from <c>a</c>?</p>

        <sage type="practice"/>
    </subsection>

</section>
