<?xml version="1.0" encoding="UTF-8" ?>

<!--********************************************************************
Copyright 2016 Robert A. Beezer

This file is part of MathBook XML.

MathBook XML is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 or version 3 of the
License (at your option).

MathBook XML is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with MathBook XML.  If not, see <http://www.gnu.org/licenses/>.
*********************************************************************-->
<!-- This file was originally part of the book     -->
<!-- (as copied on 2016/03/25)                     -->
<!--                                               -->
<!--   Abstract Algebra: Theory and Applications   -->
<!--                                               -->
<!-- Copyright (C) 1997-2014  Thomas W. Judson     -->

<!-- permid is for testing friendlier HTML ids for instructors to see -->
<chapter xml:id="rune" permid="aBc" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Runestone Testing</title>

    <introduction>
        <p>We collect Runestone interactive items for testing here, in sections of their own.</p>
    </introduction>

    <section xml:id="activecode">
        <title>ActiveCode</title>

        <p>Python programs are made interactive in HTML, on request.</p>

        <listing xml:id="program-activecode-python">
            <caption>An interactive Python program, using <pubtitle>Runestone</pubtitle></caption>
            <program xml:id="python-hello-world" interactive='activecode' language="python" label="hello-world">
                <input>
                print("Hello, World!")
                </input>
            </program>
        </listing>

        <p>A C program will only be interactive if hosted on a Runestone server.</p>

        <listing xml:id="program-activecode-c">
            <caption>An C program, interactive on a <pubtitle>Runestone</pubtitle> server</caption>
            <program xml:id="c-hello-world" interactive='activecode' language="c">
                <input>
                #include &lt;stdio.h&gt;

                int main(void)
                {
                    puts("Hello, world!");
                }
                </input>
            </program>
        </listing>

        <p>A Java program will only be interactive if hosted on a Runestone server.</p>

        <listing xml:id="program-activecode-java">
            <title>Informal Java <q>Hello, World</q></title>
            <caption>A Java program, interactive on a <pubtitle>Runestone</pubtitle> server</caption>
            <program xml:id="java-hello-world" interactive='activecode' language="java">
                <title>"hi" in Java</title>
                <input>
                import javax.swing.JFrame;  //Importing class JFrame
                import javax.swing.JLabel;  //Importing class JLabel
                public class HelloWorld {
                    public static void main(String[] args) {
                        JFrame frame = new JFrame();           //Creating frame
                        frame.setTitle("Hi!");                 //Setting title frame
                        frame.add(new JLabel("Hello, world!"));//Adding text to frame
                        frame.pack();                          //Setting size to smallest
                        frame.setLocationRelativeTo(null);     //Centering frame
                        frame.setVisible(true);                //Showing frame
                    }
                }
                </input>
            </program>
        </listing>

        <p>Javascript programs are made interactive in HTML, on request.</p>

        <listing xml:id="program-activecode-javascript">
            <caption>An interactive JavaScript program, using <pubtitle>Runestone</pubtitle></caption>
            <program xml:id="javascript-hello-world" interactive='activecode' language="javascript">
                <input>
                document.write('Hello, world!');
                </input>
            </program>
        </listing>

        <p>A <tag>program</tag> is not interactive, by default, no matter where it is hosted.</p>

        <listing xml:id="program-static-java">
            <caption>A static Java program</caption>
            <program xml:id="java-static" interactive='no' language="java">
                <input>
                import javax.swing.JFrame;  //Importing class JFrame
                import javax.swing.JLabel;  //Importing class JLabel
                public class HelloWorld {
                    public static void main(String[] args) {
                        JFrame frame = new JFrame();           //Creating frame
                        frame.setTitle("Hi!");                 //Setting title frame
                        frame.add(new JLabel("Hello, world!"));//Adding text to frame
                        frame.pack();                          //Setting size to smallest
                        frame.setLocationRelativeTo(null);     //Centering frame
                        frame.setVisible(true);                //Showing frame
                    }
                }
                </input>
            </program>
        </listing>

        <p>An Octave program will only be interactive if hosted on a Runestone server.  Octave is meant to be a drop-in replacement for Matlab.</p>

        <listing xml:id="program-activecode-octave">
            <caption>A simple Octave program</caption>
            <program xml:id="octave-simple" interactive='activecode' language="octave">
                <input>
                x = 2 + 2
                printf("%d\n", x)
                </input>
            </program>
        </listing>

        <p>A language not supported by Runestone Services will be rendered static.</p>

        <listing xml:id="program-mistake-pascal">
            <caption>A Pascal program that cannot be interactive on Runestone</caption>
            <program xml:id="pascal-mistake" interactive='activecode' language="pascal">
                <input>
                program HelloWorld;
                begin
                  WriteLn('Hello, world!');
                end.
                </input>
            </program>
        </listing>

        <p>The following Python program is in a <tag>listing</tag> since we will want to reference it shortly.  The program does not do very much, it just defines four variables whose values are lists of statistics.  It should run, and there will be no syntax errors, but it is a bit boring since there is no output.</p>

        <listing xml:id="listing-python-included">
            <caption>A Python program that defines some statistics</caption>
            <program xml:id="python-statistics" interactive='activecode' language="python" label="statistics">
                <input>
                loan_amount = [1250.0, 500.0, 1450.0, 200.0, 700.0, 100.0, 250.0, 225.0, 1200.0, 150.0, 600.0, 300.0, 700.0, 125.0, 650.0, 175.0, 1800.0, 1525.0, 575.0, 700.0, 1450.0, 400.0, 200.0, 1000.0, 350.0]

                country_name = ['Azerbaijan', 'El Salvador', 'Bolivia', 'Paraguay', 'El Salvador', 'Philippines', 'Philippines', 'Nicaragua', 'Guatemala', 'Philippines', 'Paraguay', 'Philippines', 'Bolivia', 'Philippines', 'Philippines', 'Madagascar', 'Georgia', 'Uganda', 'Kenya', 'Tajikistan', 'Jordan', 'Kenya', 'Philippines', 'Ecuador', 'Kenya']

                time_to_raise = [193075.0, 1157108.0, 1552939.0, 244945.0, 238797.0, 1248909.0, 773599.0, 116181.0, 2288095.0, 51668.0, 26717.0, 48030.0, 1839190.0, 71117.0, 580401.0, 800427.0, 1156218.0, 1166045.0, 2924705.0, 470622.0, 24078.0, 260044.0, 445938.0, 201408.0, 2370450.0]

                num_lenders_total = [38, 18, 51, 3, 21, 1, 10, 8, 42, 1, 18, 6, 28, 5, 16, 7, 54, 1, 18, 22, 36, 12, 8, 24, 8]
                </input>
            </program>
        </listing>

        <p>Now a programming exercise.  The program upcoming is going to <term>include</term> all the code of the program preceding.  This is accomplished with an <attr>include</attr> attribute on the <em>including</em> program whose value is the <attr>xml:id</attr> of the <em>included</em> program.  So by running the next program, it should pass all of its three tests (for example another example using unit tests, see <xref ref="unit-test-example"/>).  Now reload the page, do not run the program in the listing, and then see that the program in the exercise still runs correctly.</p>

        <p>You'll see nothing that tells the reader that the one chunk of code is prefacing the other.  And in static formats it might be even less obvious.  So you will want to say <em>something</em> to alert the reader.  Here it is easy: <xref ref="exercise-python-including"/> includes all the code from <xref ref="listing-python-included"/>.</p>

        <exercise xml:id="exercise-python-including">
            <title>A Python program, including another</title>
            <statement>
                <p>Compute the total amount of money loaned and store it in the variable <c>loan_total</c>.</p>
            </statement>
            <program xml:id="python-summation" interactive='activecode' language="python" label="pyton-sum-total" include="python-statistics">
                <input>
                loan_total = 0
                for loan in loan_amount:
                    loan_total += loan
                print(loan_total)
                </input>
                <tests>
                from unittest.gui import TestCaseGui

                class MyTests(TestCaseGui):

                    def testOne(self):
                        self.assertTrue('loan_total' in self.getEditorText(), "you need a loan_total variable")
                        self.assertEqual(loan_total, sum(loan_amount), "Use the accumulator pattern to add up all the loans")
                        self.assertFalse('sum(' in self.getEditorText(), "you may not use sum()")

                MyTests().main()
                </tests>
            </program>
        </exercise>

        <p>Exact same exercise again, but now we include <em>two</em> programs.  We first get the simple <q>Hello, world!</q> program at <xref ref="program-activecode-python"/> and then the same program defining the variables with lists of statistics at <xref ref="listing-python-included"/>.  So the output just includes the extra result from the <c>print()</c> statement.</p>

        <exercise xml:id="exercise-python-including-two">
            <title>A Python program, including two others</title>
            <statement>
                <p>Compute the total amount of money loaned and store it in the variable <c>loan_total</c>.</p>
            </statement>
            <program xml:id="python-summation-two" interactive='activecode' language="python" label="pyton-sum-total-two" include=" python-hello-world python-statistics ">
                <input>
                loan_total = 0
                for loan in loan_amount:
                    loan_total += loan
                print(loan_total)
                </input>
                <tests>
                from unittest.gui import TestCaseGui

                class MyTests(TestCaseGui):

                    def testOne(self):
                        self.assertTrue('loan_total' in self.getEditorText(), "you need a loan_total variable")
                        self.assertEqual(loan_total, sum(loan_amount), "Use the accumulator pattern to add up all the loans")
                        self.assertFalse('sum(' in self.getEditorText(), "you may not use sum")

                MyTests().main()
                </tests>
            </program>
        </exercise>
        
        <p>Here is an activecode with <attr>language</attr> set to <c>sql</c> uses the <attr>database</attr> to load a SQLite database file.</p>

        <exercise xml:id="exercise-sql-using-db">
            <title>An SQL program that uses an SQLite database file</title>
            <statement>
                <p>Select all the columns of all the rows in the <c>test</c> database table.</p>
            </statement>
            <program xml:id="sql-using-db" interactive='activecode' language="sql" label="sql-using-db" database="sql/test.db">
                <input>
                    SELECT * FROM test
                </input>
                <tests>
                    assert 1,1 == world
                    assert 0,1 == hello
                    assert 2,1 == 35
                </tests>
            </program>
        </exercise>

        <p>A nonsense paragraph just to check on spacing.  A nonsense paragraph just to check on spacing.  A nonsense paragraph just to check on spacing.  A nonsense paragraph just to check on spacing.</p>
    </section>

    <section xml:id="code-lens">
        <title>Code Lens</title>

        <p>CodeLens is an interactive tool for following program execution, much like a debugger, without the ability to influence flow control or variable values.  For use without a server, traces must be computed beforehand.  First, we have some trivial programs, to provide minimal testing.</p>

        <listing xml:id="program-codelens-python">
            <caption>A Python program, stepable with CodeLens</caption>
            <program xml:id="python-hello-world-code-lens" interactive="codelens" language="python">
                <input>
                print('Hello, World!')
                </input>
            </program>
        </listing>

        <listing xml:id="program-codelens-c">
            <caption>An C program, stepable with CodeLens</caption>
            <program xml:id="c-hello-world-code-lens" interactive="codelens" language="c">
                <input>
                #include &lt;stdio.h&gt;

                int main(void)
                {
                    puts("Hello, World!");
                }
                </input>
            </program>
        </listing>

        <listing xml:id="program-codelens-java">
            <caption>A Java program, stepable with CodeLens</caption>
            <program xml:id="java-hello-world-code-lens" interactive="codelens" language="java">
                <input>
                public class HelloWorld {
                    public static void main(String[] args) {
                        System.out.println("Hello, World!");
                    }
                }
                </input>
            </program>
        </listing>

        <p>Now some moderately more complicated programs to find teh prime numbers less than <m>20</m>.  We do not vouch for the quality of these, or even their correctness!</p>

        <listing xml:id="sieve-python">
            <caption><url href="https://www.tutorialspoint.com/python-program-for-sieve-of-eratosthenes" visual="www.tutorialspoint.com/python-program-for-sieve-of-eratosthenes">Sieve of Eratosthenes</url>, Java</caption>
            <program xml:id="sieve-codelens-python" interactive="codelens" language="python">
                <input><![CDATA[
                def SieveOfEratosthenes(n):
                   # array of type boolean with True values in it
                   prime = [True for i in range(n + 1)]
                   p = 2
                   while (p * p <= n):
                      # If it remain unchanged it is prime
                      if (prime[p] == True):
                         # updating all the multiples
                         for i in range(p * 2, n + 1, p):
                            prime[i] = False
                      p += 1
                   prime[0]= False
                   prime[1]= False
                   # Print
                   for p in range(n + 1):
                      if prime[p]:
                         print (p,end=" ")
                # main
                if __name__=='__main__':
                   n = 20
                   print ("The prime numbers smaller than or equal to", n,"is")
                   SieveOfEratosthenes(n)
                ]]>
                </input>
            </program>
        </listing>

        <listing xml:id="sieve-cpp">
            <caption><url href="https://www.tutorialspoint.com/cplusplus-program-to-implement-sieve-of-eratosthenes-to-generate-prime-numbers-between-given-range" visual="www.tutorialspoint.com/cplusplus-program-to-implement-sieve-of-eratosthenes-to-generate-prime-numbers-between-given-range">Sieve of Eratosthenes</url>, C++</caption>
            <program xml:id="sieve-codelens-cpp" interactive="codelens" language="cpp">
                <input> <![CDATA[
                #include <stdio.h>
                const int len = 20;
                int main() {
                   int arr[20] = {0};
                   for (int i = 2; i < len; i++) {
                      for (int j = i * i; j < len; j+=i) {
                         arr[j - 1] = 1;
                      }
                   }
                   for (int i = 1; i < len; i++) {
                      if (arr[i - 1] == 0)
                        printf(" %d", i);
                   }
                }
                ]]>
                </input>
            </program>
        </listing>

        <listing xml:id="sieve-java">
            <caption><url href="https://www.tutorialspoint.com/Sieve-of-Eratosthenes-in-java" visual="www.tutorialspoint.com/Sieve-of-Eratosthenes-in-java">Sieve of Eratosthenes</url>, Java</caption>
            <program xml:id="sieve-codelens-java" interactive="codelens" language="java">
                <input><![CDATA[
                public class SievePrimeFactors  {
                   public static void main(String args[]) {
                      int num = 20;
                      boolean[] bool = new boolean[num];

                      for (int i = 0; i< bool.length; i++) {
                         bool[i] = true;
                      }
                      for (int i = 2; i < Math.sqrt(num); i++) {
                         if(bool[i] == true) {
                            for(int j = (i*i); j < num; j = j+i) {
                               bool[j] = false;
                            }
                         }
                      }
                      System.out.println("List of prime numbers: ");
                      for (int i = 2; i< bool.length; i++) {
                         if(bool[i]==true) {
                            System.out.println(i);
                         }
                      }
                   }
                }
                ]]>
                </input>
            </program>
        </listing>
    </section>

    <section xml:id="coding-exercises">
        <title>Coding Exercises</title>

        <p>Program listings can be more that just live demonstrations, they can be exercises.  The first two also occur in the sample article where they just get a static rendering, if at all.</p>

        <exercise label="coding-exercise-blank">
            <title>Inline Coding Exercise, No Help</title>

            <statement>
                <p>An exercise might ask a reader to write a computer program, that would go here in the <tag>statement</tag>.  But you can also add a <tag>program</tag> element after a <tag>statement</tag>.  Here we place no code at all, but we do say we want it to be interactive.  The purpose is to make it a live coding environment for a version of your output that allows the reader to perhaps submit a solution.  The <tag>program</tag> element is necessary so you can specify a programming language.</p>

                <p>In interactive formats, try creating and running a Python program below.  Use CodeLens to step through the program.</p>
            </statement>
            <program interactive="activecode" language="python"/>
            <hint>We didn't really ask you to do anything.</hint>
        </exercise>

        <exercise label="coding-exercise-partial-one">
            <title>Inline Coding Exercise, Partial</title>

            <statement>
                <p>Similar to above, but we provide a starting point for the exercise.</p>
            </statement>
            <program interactive="activecode" language="c">
                <input>
                #include &lt;stdio.h&gt;

                int main(void)
                </input>
            </program>
            <answer>
                <p>We're not really sure.  But it would begin as follows:</p>
                <program language="c">
                    <input>
                    #include &lt;stdio.h&gt;

                    int main(void)
                    </input>
                </program>
            </answer>
        </exercise>

        <activity xml:id="coding-exercise-partial-two">
            <title>Activity Coding Exercise</title>

            <statement>
                <p>Similar to above, but now as a complete Python program inside an <tag>activity</tag>.  This demonstrates the possibility to use any <q>project-like</q> block (<tag>project</tag>, <tag>activity</tag>, <tag>exploration</tag>, <tag>investigation</tag>), but not in the case when structured with <tag>task</tag>.</p>
            </statement>
            <program interactive="activecode" language="python">
                <input>
                for i in range(10):
                    print(i)
                </input>
            </program>
            <answer>We're still not really sure.</answer>
        </activity>

        <exercise>
            <title>An Exercise with a Static Program</title>

            <statement>
                <p>Similar to above, again, but we place the <tag>program</tag> element <em>inside</em> the <tag>statement</tag>, not after it as a peer.  This signals that this is not a coding exercise and the program will render static, since it is explicitly labeled as not being interactive.</p>
                <program xml:id="coding-exercise-static" language="c" interactive="no">
                    <input>
                    #include &lt;stdio.h&gt;

                    int main(void)
                    </input>
                </program>
            </statement>
            <solution>We're not really sure. Still.</solution>
        </exercise>

        <exercise xml:id="unit-test-example" label="coding-exercise-python-unit-test">
            <title>Coding Exercise, with Unit Tests</title>

            <statement>
                <p>Fix the following code so that it always correctly adds two numbers. [Ed. Unit test support is experimental.]</p>
            </statement>
            <program interactive="activecode" language="python">
                <input>
                def add(a,b):
                    return 4
                </input>
                <tests>
                from unittest.gui import TestCaseGui

                class myTests(TestCaseGui):

                   def testOne(self):
                       self.assertEqual(add(2,2), 4, "Adding two identical integers")
                       self.assertEqual(add(7,13), 20, "Adding two different integers")
                       self.assertAlmostEqual(add(2.0,3.0), 5.0, 5, "Adding two decimal numbers")

                myTests().main()
                </tests>
            </program>
            <answer>
                <p>We're not really sure.  But it would begin as follows:</p>
                <program language="c">
                    <input>
                    #include &lt;stdio.h&gt;

                    int main(void)
                    </input>
                </program>
            </answer>
        </exercise>
    </section>

    <section xml:id="data-files">
        <title>Data Files</title>

        <p>In the following file of climate data, the first column is Year, second column is Global Average Temperature (Celcius), and the third column is Global Emmisions C02 (Giga-tons).  [Normally you might place this inside a block with the <tag>datafile</tag>.]</p>

        <!-- # Section 11.4 Think Like a Computer Scientist, Runestone 2023-01-23 -->
        <datafile label="file-global-climate-one" filename="ccdata1.txt" rows="18" cols="40" editable="yes">

            <pre>
            1850    -0.37     2.24E-7
            1860    -0.34     3.94E-7
            1870    -0.28     6.6E-7
            1880    -0.24     1.1
            1890    -0.42     1.72
            1900    -0.2      2.38
            1910    -0.49     3.34
            1920    -0.25     4.01
            1930    -0.14     4.53
            1940     0.01     5.5
            1950    -0.17     6.63
            1960    -0.05     10.5
            1970    -0.03     16
            1980     0.09     20.3
            1990     0.3      22.6
            2000     0.29     24.9
            2010     0.56     32.7
            2019     0.74     33.3
            </pre>
        </datafile>

        <program label="python-average-climate" interactive='activecode' language="python">
            <input>
            ccfile = open("ccdata1.txt", "r")

            for aline in ccfile:
                values = aline.split()
                print('In', values[0], 'the average temp. was', values[1], '°C and CO2 emmisions were', values[2], 'gigatons.')

            ccfile.close()
            </input>
        </program>

        <!-- # Fundamentals of Python Programming, Stack Overflow Developer Survey, Runestone 2023-02-01 -->
        <data>
            <title>Stack Overflow Developer Survey</title>

            <p>[A data file can go lots of places.  But to make it more prominent, and easy to cross-reference, it would be natural to put it into a <tag>data</tag> block.]</p>

            <p>Now that you are experienced with working with files lets look at a bit of the data set. The survey had 98,855 respondents. We will work with a sample of 2000 of those responses for this lab. In addition we have narrowed down the questions from 129 to just 13.  The columns we have included in this data set are:<ol>
                <li>Respondent</li>
                <li>Country</li>
                <li>JobSatisfaction</li>
                <li>UndergradMajor</li>
                <li>ConvertedSalary</li>
                <li>Exercise</li>
                <li>Gender</li>
                <li>RaceEthnicity</li>
                <li>EducationParents</li>
                <li>HoursOutside</li>
                <li>Age</li>
                <li>LastNewJob</li>
                <li>LanguageWorkedWith</li>
            </ol></p>

            <datafile label="stack-overflow-survey" filename="so_survey.csv" rows="10" cols="65" editable="no">
                <pre source="datafiles/stackoverflow.csv"/>
            </datafile>
        </data>

        <!-- 400px wide, so 400/600 = 66% -->
        <datafile label="luther-bell" filename="luther-bell.jpg">
            <image source="datafiles/LutherBellPic.jpg" width="66%"/>
        </datafile>

        <program label="python-one-pixel" interactive='activecode' language="python">
            <input>
            import image
            img = image.Image("luther-bell.jpg")

            print(img.getWidth())
            print(img.getHeight())

            p = img.getPixel(45, 55)
            print(p.getRed(), p.getGreen(), p.getBlue())
            </input>
        </program>

        <computation>
            <title>Golden Gate Bridge Image processing</title>

            <p>This image has a Creative Commons license, but we've lost track of the exact terms.</p>

            <p>[Now a data file and a program to process it, all bundled up inside a <tag>computation</tag>, since an <tag>example</tag> gets knowled and the ActiveCode does not fill.]</p>

            <!-- 300px wide so 300/600 = 50% -->
            <datafile label="golden-gate" filename="golden_gate.png">
                <image source="datafiles/golden-gate-bridge.png" width="50%"/>
            </datafile>

            <p>This program changes every pixel of the image.</p>

            <program label="python-change-pixels" interactive='activecode' language="python">
                <input>
                import image

                img = image.Image("golden_gate.png")
                win = image.ImageWin(img.getWidth(), img.getHeight())
                img.draw(win)

                # img.setDelay(delay, number of pixels between delay)
                # setDelay(1, 400) will speed up a lot
                img.setDelay(1,15)

                for row in range(img.getHeight()):
                    for col in range(img.getWidth()):
                        p = img.getPixel(col, row)

                        newred = p.red * 1.4
                        newgreen =  p.green * .75
                        newblue =  p.blue * 1.1

                        newpixel = image.Pixel(newred, newgreen, newblue)

                        img.setPixel(col, row, newpixel)

                img.draw(win)
                win.exitonclick()
                </input>
            </program>
        </computation>

        <p>The examples above all use Python, which will run in your browser.   Other languages will only run when a project is hosted on Runestone Academy servers.  And in this case there is a small twist.  You need to indicate which existing <tag>datafile</tag> your program needs, even if that seems obvious by reading the code.  Use a <attr>datafile</attr> attribute on <tag>program</tag> that has a list of filenames.  These are the filenames you set via the <attr>filename</attr> attribute of the <tag>datafile</tag> element, and are the names you use in your program's code.  As before, no path information is neede, nor allowed.</p>

        <p>[2023-02-21: testing for single files first, list of several not yet implemented.]</p>

        <p>When the <attr>language</attr> attribute of a <tag>program</tag> is set to <c>python3</c> that means in-browser Python is not good enough, and you want the greater power and flexibility of having your code run on a Runestone Academy server.  So this is our first example of using the <attr>datafile</attr> attribute.</p>

        <p>The data file is an abbreviated version of the example above, just to be different.  And is not editable.</p>

        <datafile label="file-global-climate-two" filename="ccdata2.txt" rows="4" cols="40" editable="no">
            <pre>
            1900    -0.2      2.38
            1910    -0.49     3.34
            1920    -0.25     4.01
            1930    -0.14     4.53
            1940     0.01     5.5
            1950    -0.17     6.63
            1960    -0.05     10.5
            1970    -0.03     16
            1980     0.09     20.3
            1990     0.3      22.6
            2000     0.29     24.9
            2010     0.56     32.7
            2019     0.74     33.3
            </pre>
        </datafile>

        <p>The program is identical to the above, but we specify <c>python3</c> as the language, and use the smaller file.  So this example is only active when this content is hosted on a Runestone Academy server.</p>

        <program label="python-average-climate-two" interactive='activecode' language="python3" datafile="ccdata2.txt">
            <input>
            ccfile = open("ccdata2.txt", "r")

            for aline in ccfile:
                values = aline.split()
                print('In', values[0], 'the average temp. was', values[1], '°C and CO2 emmisions were', values[2], 'gigatons.')

            ccfile.close()
            </input>
        </program>

        <p>[2023-02-24 Testing Java with multiple data files]</p>

        <data>
            <title>Flowers</title>

            <p>Two flower images as <tag>datafile</tag> for use in upcoming Java program.</p>

            <!-- Images are 100 x 100.  So width are 100/600 = 17% -->

            <datafile label="flower1-datafile" filename="flower1.jpg">
                <image source="datafiles/flower-one.jpeg" width="17%"/>
            </datafile>

            <datafile label="flower2-datafile" filename="flower2.jpg">
                <image source="datafiles/flower-two.jpeg" width="17%"/>
            </datafile>
        </data>

        <program label="java-flower-collage" interactive='activecode' language="java" datafile="flower1.jpg, flower2.jpg">
            <!-- About 10 XML characters, hence CDATA -->
            <input><![CDATA[
            import java.awt.*;
            import java.awt.font.*;
            import java.awt.geom.*;
            import java.awt.image.BufferedImage;
            import java.text.*;
            import java.util.*;
            import java.util.List;

            /**
             * A class that represents a picture.  This class inherits from
             * SimplePicture and allows the student to add functionality to
             * the Picture class.
             *
             * @author Barbara Ericson ericson@cc.gatech.edu
             */
            public class Picture extends SimplePicture
            {
              ///////////////////// constructors //////////////////////////////////

              /**
               * Constructor that takes no arguments
               */
              public Picture ()
              {
                /* not needed but use it to show students the implicit call to super()
                 * child constructors always call a parent constructor
                 */
                super();
              }

              /**
               * Constructor that takes a file name and creates the picture
               * @param fileName the name of the file to create the picture from
               */
              public Picture(String fileName)
              {
                // let the parent class handle this fileName
                super(fileName);
              }

              /**
               * Constructor that takes the height and width
               * @param height the height of the desired picture
               * @param width the width of the desired picture
               */
              public Picture(int width, int height)
              {
                // let the parent class handle this width and height
                super(width,height);
              }

              /**
               * Constructor that takes a picture and creates a
               * copy of that picture
               * @param copyPicture the picture to copy
               */
              public Picture(Picture copyPicture)
              {
                // let the parent class do the copy
                super(copyPicture);
              }

              /**
               * Constructor that takes a buffered image
               * @param image the buffered image to use
               */
              public Picture(BufferedImage image)
              {
                super(image);
              }
              ////////////////////// methods ///////////////////////////////////////

              /**
               * Method to return a string with information about this picture.
               * @return a string with information about the picture such as fileName,
               * height and width.
               */
              public String toString()
              {
                String output = "Picture, filename " + getFileName() +
                  " height " + getHeight()
                  + " width " + getWidth();
                return output;
              }

              /**
                zeroBlue() method sets the blue values at all pixels to zero
             */
              public void zeroBlue()
              {
                Pixel[][] pixels = this.getPixels2D();

                for (Pixel[] rowArray : pixels)
                 {
                   for (Pixel p: rowArray)
                   {
                          p.setBlue(0);
                   }
                }
              }

              /* mirrorVertical() */
              public void mirrorVertical()
              {
                   Pixel[][] pixels = this.getPixels2D();
                   Pixel leftPixel = null;
                   Pixel rightPixel = null;
                   int width = pixels[0].length;
                   for (int row = 0; row < pixels.length; row++)
                   {
                        for (int col = 0; col < width / 2; col++)
                        {
                             leftPixel = pixels[row][col];
                             rightPixel = pixels[row][width - 1 - col];
                             rightPixel.setColor(leftPixel.getColor());
                        }
                   }
              }

               /** copy from the passed fromPic to the
                 * specified startRow and startCol in the
                 * current picture
                 * @param fromPic the picture to copy from
                 * @param startRow the start row to copy to
                 * @param startCol the start col to copy to
                 */
               public void copy(Picture fromPic,
                              int startRow, int startCol)
               {
                 Pixel fromPixel = null;
                 Pixel toPixel = null;
                 Pixel[][] toPixels = this.getPixels2D();
                 Pixel[][] fromPixels = fromPic.getPixels2D();
                 for (int fromRow = 0, toRow = startRow;
                      fromRow < fromPixels.length &&
                      toRow < toPixels.length;
                      fromRow++, toRow++)
                 {
                   for (int fromCol = 0, toCol = startCol;
                        fromCol < fromPixels[0].length &&
                        toCol < toPixels[0].length;
                        fromCol++, toCol++)
                   {
                     fromPixel = fromPixels[fromRow][fromCol];
                     toPixel = toPixels[toRow][toCol];
                     toPixel.setColor(fromPixel.getColor());
                   }
                 }
               }

              public void createCollage()
              {
                   // You can also try butterfly.jpg and snowflake.jpg
                   Picture flower1 = new Picture("flower1.jpg");
                   Picture flower2 = new Picture("flower2.jpg");
                   this.copy(flower1,0,0);
                   this.copy(flower2,100,0);
                   this.copy(flower1,200,0);
                   Picture flowerNoBlue = new Picture(flower2);
                   flowerNoBlue.zeroBlue();
                   this.copy(flowerNoBlue,300,0);
                   this.copy(flower1,400,0);
                   this.copy(flower2,500,0);
                   this.mirrorVertical();
                   this.show();
              }

              /* Main method for testing
               */
              public static void main(String[] args)
              {
                 Picture p = new Picture(500,500);
                 p.createCollage();
              }
            }
            ]]>
            </input>
        </program>

        <!-- Multi-file, Java -->
        <!-- https://runestone.academy/ns/books/published/csawesome/Unit8-2DArray/pictureLabA8.html -->

        <p>The following is experimental, as of 2023-07-05, and needs some organization, plus some credit to CSAwesome and Barb Ericson.</p>

        <!-- https://runestone.academy/ns/books/published/csawesome/Unit8-2DArray/pictureLabA5.html -->
        <!-- https://github.com/bhoffman0/CSAwesome/blob/master/_sources/Unit8-2DArray/pictureLabA5.rst -->

        <datafile label="beach-datafile" filename="beach.jpg">
            <image source="datafiles/beach.jpg" width="17%"/>
        </datafile>

        <datafile label="file-picture-classes-jar" filename="pictureClasses1.jar" editable="no" hide="yes">
            <pre>
            <![CDATA[
            import java.awt.Image;
            import java.awt.image.BufferedImage;

            /**
             * Interface to describe a digital picture.  A digital picture can have an
             * associated file name.  It can have a title.  It has pixels
             * associated with it and you can get and set the pixels.  You
             * can get an Image from a picture or a BufferedImage.  You can load
             * it from a file name or image.  You can show a picture.  You can
             * explore a picture.  You can create a new image for it.
             *
             * @author Barb Ericson ericson@cc.gatech.edu
             */
            public interface DigitalPicture
            {
              public String getFileName(); // get the file name that the picture came from
              public String getTitle(); // get the title of the picture
              public void setTitle(String title); // set the title of the picture
              public int getWidth(); // get the width of the picture in pixels
              public int getHeight(); // get the height of the picture in pixels
              public Image getImage(); // get the image from the picture
              public BufferedImage getBufferedImage(); // get the buffered image
              public int getBasicPixel(int x, int y); // get the pixel information as an int
              public void setBasicPixel(int x, int y, int rgb); // set the pixel information
              public Pixel getPixel(int x, int y); // get the pixel information as an object
              public Pixel[] getPixels(); // get all pixels in row-major order
              public Pixel[][] getPixels2D(); // get 2-D array of pixels in row-major order
              public void load(Image image); // load the image into the picture
              public boolean load(String fileName); // load the picture from a file
              public void show(); // show the picture
              public boolean write(String fileName); // write out a file
            }

            import java.awt.Color;

            /**
             * Class that references a pixel in a picture. Pixel
             * stands for picture element where picture is
             * abbreviated pix.  A pixel has a column (x) and
             * row (y) location in a picture.  A pixel knows how
             * to get and set the red, green, blue, and alpha
             * values in the picture.  A pixel also knows how to get
             * and set the color using a Color object.
             *
             * @author Barb Ericson ericson@cc.gatech.edu
             */
            public class Pixel
            {

              ////////////////////////// fields ///////////////////////////////////

              /** the digital picture this pixel belongs to */
              private DigitalPicture picture;

              /** the x (column) location of this pixel in the picture; (0,0) is top left */
              private int x;

              /** the y (row) location of this pixel in the picture; (0,0) is top left */
              private int y;

              ////////////////////// constructors /////////////////////////////////

              /**
               * A constructor that takes the x and y location for the pixel and
               * the picture the pixel is coming from
               * @param picture the picture that the pixel is in
               * @param x the x location of the pixel in the picture
               * @param y the y location of the pixel in the picture
               */
              public Pixel(DigitalPicture picture, int x, int y)
              {
                // set the picture
                this.picture = picture;

                // set the x location
                this.x = x;

                // set the y location
                this.y = y;

              }

              ///////////////////////// methods //////////////////////////////

              /**
               * Method to get the x location of this pixel.
               * @return the x location of the pixel in the picture
               */
              public int getX() { return x; }

              /**
               * Method to get the y location of this pixel.
               * @return the y location of the pixel in the picture
               */
              public int getY() { return y; }

              /**
               * Method to get the row (y value)
               * @return the row (y value) of the pixel in the picture
               */
              public int getRow() { return y; }

              /**
               * Method to get the column (x value)
               * @return the column (x value) of the pixel
               */
              public int getCol() { return x; }

              /**
               * Method to get the amount of alpha (transparency) at this pixel.
               * It will be from 0-255.
               * @return the amount of alpha (transparency)
               */
              public int getAlpha() {

                /* get the value at the location from the picture as a 32 bit int
                 * with alpha, red, green, blue each taking 8 bits from left to right
                 */
                int value = picture.getBasicPixel(x,y);

                // get the alpha value (starts at 25 so shift right 24)
                // then and it with all 1's for the first 8 bits to keep
                // end up with from 0 to 255
                int alpha = (value >> 24) & 0xff;

                return alpha;
              }

              /**
               * Method to get the amount of red at this pixel.  It will be
               * from 0-255 with 0 being no red and 255 being as much red as
               * you can have.
               * @return the amount of red from 0 for none to 255 for max
               */
              public int getRed() {

                /* get the value at the location from the picture as a 32 bit int
                 * with alpha, red, green, blue each taking 8 bits from left to right
                 */
                int value = picture.getBasicPixel(x,y);

                // get the red value (starts at 17 so shift right 16)
                // then AND it with all 1's for the first 8 bits to
                // end up with a resulting value from 0 to 255
                int red = (value >> 16) & 0xff;

                return red;
              }

              /**
               * Method to get the red value from a pixel represented as an int
               * @param value the color value as an int
               * @return the amount of red
               */
              public static int getRed(int value)
              {
                int red = (value >> 16) & 0xff;
                return red;
              }

              /**
               * Method to get the amount of green at this pixel.  It will be
               * from 0-255 with 0 being no green and 255 being as much green as
               * you can have.
               * @return the amount of green from 0 for none to 255 for max
               */
              public int getGreen() {

                /* get the value at the location from the picture as a 32 bit int
                 * with alpha, red, green, blue each taking 8 bits from left to right
                 */
                int value = picture.getBasicPixel(x,y);

                // get the green value (starts at 9 so shift right 8)
                int green = (value >>  8) & 0xff;

                return green;
              }

              /**
               * Method to get the green value from a pixel represented as an int
               * @param value the color value as an int
               * @return the amount of green
               */
              public static int getGreen(int value)
              {
                int green = (value >> 8) & 0xff;
                return green;
              }

              /**
               * Method to get the amount of blue at this pixel.  It will be
               * from 0-255 with 0 being no blue and 255 being as much blue as
               * you can have.
               * @return the amount of blue from 0 for none to 255 for max
               */
              public int getBlue() {

                /* get the value at the location from the picture as a 32 bit int
                 * with alpha, red, green, blue each taking 8 bits from left to right
                 */
                int value = picture.getBasicPixel(x,y);

                // get the blue value (starts at 0 so no shift required)
                int blue = value & 0xff;

                return blue;
              }

              /**
               * Method to get the blue value from a pixel represented as an int
               * @param value the color value as an int
               * @return the amount of blue
               */
              public static int getBlue(int value)
              {
                int blue = value & 0xff;
                return blue;
              }

              /**
               * Method to get a color object that represents the color at this pixel.
               * @return a color object that represents the pixel color
               */
              public Color getColor()
              {
                 /* get the value at the location from the picture as a 32 bit int
                 * with alpha, red, green, blue each taking 8 bits from left to right
                 */
                int value = picture.getBasicPixel(x,y);

                // get the red value (starts at 17 so shift right 16)
                // then AND it with all 1's for the first 8 bits to
                // end up with a resulting value from 0 to 255
                int red = (value >> 16) & 0xff;

                // get the green value (starts at 9 so shift right 8)
                int green = (value >>  8) & 0xff;

                // get the blue value (starts at 0 so no shift required)
                int blue = value & 0xff;

                return new Color(red,green,blue);
              }

              /**
               * Method to set the pixel color to the passed in color object.
               * @param newColor the new color to use
               */
              public void setColor(Color newColor)
              {
                // set the red, green, and blue values
                int red = newColor.getRed();
                int green = newColor.getGreen();
                int blue = newColor.getBlue();

                // update the associated picture
                updatePicture(this.getAlpha(),red,green,blue);
              }

              /**
               * Method to update the picture based on the passed color
               * values for this pixel
               * @param alpha the alpha (transparency) at this pixel
               * @param red the red value for the color at this pixel
               * @param green the green value for the color at this pixel
               * @param blue the blue value for the color at this pixel
               */
              public void updatePicture(int alpha, int red, int green, int blue)
              {
                // create a 32 bit int with alpha, red, green blue from left to right
                int value = (alpha << 24) + (red << 16) + (green << 8) + blue;

                // update the picture with the int value
                picture.setBasicPixel(x,y,value);
              }

              /**
               * Method to correct a color value to be within 0 to 255
               * @param the value to use
               * @return a value within 0 to 255
               */
              private static int correctValue(int value)
              {
                if (value < 0)
                  value = 0;
                if (value > 255)
                  value = 255;
                return value;
              }

              /**
               * Method to set the red to a new red value
               * @param value the new value to use
               */
              public void setRed(int value)
              {
                // set the red value to the corrected value
                int red = correctValue(value);

                // update the pixel value in the picture
                updatePicture(getAlpha(), red, getGreen(), getBlue());
              }

              /**
               * Method to set the green to a new green value
               * @param value the value to use
               */
              public void setGreen(int value)
              {
                // set the green value to the corrected value
                int green = correctValue(value);

                // update the pixel value in the picture
                updatePicture(getAlpha(), getRed(), green, getBlue());
              }

              /**
               * Method to set the blue to a new blue value
               * @param value the new value to use
               */
              public void setBlue(int value)
              {
                // set the blue value to the corrected value
                int blue = correctValue(value);

                // update the pixel value in the picture
                updatePicture(getAlpha(), getRed(), getGreen(), blue);
              }

               /**
               * Method to set the alpha (transparency) to a new alpha value
               * @param value the new value to use
               */
              public void setAlpha(int value)
              {
                // make sure that the alpha is from 0 to 255
                int alpha = correctValue(value);

                // update the associated picture
                updatePicture(alpha, getRed(), getGreen(), getBlue());
              }

              /**
              * Method to get the distance between this pixel's color and the passed color
              * @param testColor the color to compare to
              * @return the distance between this pixel's color and the passed color
              */
             public double colorDistance(Color testColor)
             {
               double redDistance = this.getRed() - testColor.getRed();
               double greenDistance = this.getGreen() - testColor.getGreen();
               double blueDistance = this.getBlue() - testColor.getBlue();
               double distance = Math.sqrt(redDistance * redDistance +
                                           greenDistance * greenDistance +
                                           blueDistance * blueDistance);
               return distance;
             }

             /**
              * Method to compute the color distances between two color objects
              * @param color1 a color object
              * @param color2 a color object
              * @return the distance between the two colors
              */
             public static double colorDistance(Color color1,Color color2)
             {
               double redDistance = color1.getRed() - color2.getRed();
               double greenDistance = color1.getGreen() - color2.getGreen();
               double blueDistance = color1.getBlue() - color2.getBlue();
               double distance = Math.sqrt(redDistance * redDistance +
                                           greenDistance * greenDistance +
                                           blueDistance * blueDistance);
               return distance;
             }

             /**
              * Method to get the average of the colors of this pixel
              * @return the average of the red, green, and blue values
              */
             public double getAverage()
             {
               double average = (getRed() + getGreen() + getBlue()) / 3.0;
               return average;
             }

              /**
               * Method to return a string with information about this pixel
               * @return a string with information about this pixel
               */
              public String toString()
              {
                return "Pixel row=" + getRow() +
                  " col=" + getCol() +
                  " red=" + getRed() +
                  " green=" + getGreen() +
                  " blue=" + getBlue();
              }

            }

            import javax.imageio.ImageIO;
            import java.awt.image.BufferedImage;
            import javax.swing.ImageIcon;
            import java.awt.*;
            import java.io.*;
            import java.awt.geom.*;

            import java.io.ByteArrayOutputStream;
            //import javax.xml.bind.DatatypeConverter;
            import java.util.Base64;

            import java.util.Scanner;

            /**
             * A class that represents a simple picture.  A simple picture may have
             * an associated file name and a title.  A simple picture has pixels,
             * width, and height.  A simple picture uses a BufferedImage to
             * hold the pixels. You can also explore a simple picture.
             *
             * @author Barb Ericson ericson@cc.gatech.edu
             */
            public class SimplePicture implements DigitalPicture
            {

              /////////////////////// Fields /////////////////////////

              /**
               * the file name associated with the simple picture
               */
              private String fileName;

              /**
               * the path name for the file
               */
              private String pathName;

              /**
               * the title of the simple picture
               */
              private String title;

              /**
               * buffered image to hold pixels for the simple picture
               */
              private BufferedImage bufferedImage;

              /**
               * extension for this file (jpg or bmp)
               */
              private String extension;


             /////////////////////// Constructors /////////////////////////

             /**
              * A Constructor that takes no arguments.  It creates a picture with
              * a width of 200 and a height of 100 that is all white.
              * A no-argument constructor must be given in order for a class to
              * be able to be subclassed.  By default all subclasses will implicitly
              * call this in their parent's no-argument constructor unless a
              * different call to super() is explicitly made as the first line
              * of code in a constructor.
              */
             public SimplePicture()
             {this(200,100);}

             /**
              * A Constructor that takes a file name and uses the file to create
              * a picture
              * @param fileName the file name to use in creating the picture
              */
             public SimplePicture(String fileName)
             {

               // load the picture into the buffered image
               load(fileName);

             }

             /**
              * A constructor that takes the width and height desired for a picture and
              * creates a buffered image of that size.  This constructor doesn't
              * show the picture.  The pixels will all be white.
              * @param width the desired width
              * @param height the desired height
              */
             public  SimplePicture(int width, int height)
             {
               bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
               title = "None";
               fileName = "None";
               extension = "jpg";
               setAllPixelsToAColor(Color.white);
             }

             /**
              * A constructor that takes the width and height desired for a picture and
              * creates a buffered image of that size.  It also takes the
              * color to use for the background of the picture.
              * @param width the desired width
              * @param height the desired height
              * @param theColor the background color for the picture
              */
             public  SimplePicture(int width, int height, Color theColor)
             {
               this(width,height);
               setAllPixelsToAColor(theColor);
             }

             /**
              * A Constructor that takes a picture to copy information from
              * @param copyPicture the picture to copy from
              */
             public SimplePicture(SimplePicture copyPicture)
             {
               if (copyPicture.fileName != null)
               {
                  this.fileName = new String(copyPicture.fileName);
                  this.extension = copyPicture.extension;
               }
               if (copyPicture.title != null)
                  this.title = new String(copyPicture.title);
               if (copyPicture.bufferedImage != null)
               {
                 this.bufferedImage = new BufferedImage(copyPicture.getWidth(),  copyPicture.getHeight(), BufferedImage.TYPE_INT_RGB);
                 this.copyPicture(copyPicture);
               }
             }

             /**
              * A constructor that takes a buffered image
              * @param image the buffered image
              */
             public SimplePicture(BufferedImage image)
             {
               this.bufferedImage = image;
               title = "None";
               fileName = "None";
               extension = "jpg";
             }

             ////////////////////////// Methods //////////////////////////////////

             /**
              * Method to get the extension for this picture
              * @return the extension (jpg, bmp, giff, etc)
              */
             public String getExtension() { return extension; }

             /**
              * Method that will copy all of the passed source picture into
              * the current picture object
              * @param sourcePicture  the picture object to copy
              */
             public void copyPicture(SimplePicture sourcePicture)
             {
               Pixel sourcePixel = null;
               Pixel targetPixel = null;

               // loop through the columns
               for (int sourceX = 0, targetX = 0;
                    sourceX < sourcePicture.getWidth() &&
                    targetX < this.getWidth();
                    sourceX++, targetX++)
               {
                 // loop through the rows
                 for (int sourceY = 0, targetY = 0;
                      sourceY < sourcePicture.getHeight() &&
                      targetY < this.getHeight();
                      sourceY++, targetY++)
                 {
                   sourcePixel = sourcePicture.getPixel(sourceX,sourceY);
                   targetPixel = this.getPixel(targetX,targetY);
                   targetPixel.setColor(sourcePixel.getColor());
                 }
               }

             }

             /**
              * Method to set the color in the picture to the passed color
              * @param color the color to set to
              */
             public void setAllPixelsToAColor(Color color)
             {
               // loop through all x
               for (int x = 0; x < this.getWidth(); x++)
               {
                 // loop through all y
                 for (int y = 0; y < this.getHeight(); y++)
                 {
                   getPixel(x,y).setColor(color);
                 }
               }
             }

             /**
              * Method to get the buffered image
              * @return the buffered image
              */
             public BufferedImage getBufferedImage()
             {
                return bufferedImage;
             }

             /**
              * Method to get a graphics object for this picture to use to draw on
              * @return a graphics object to use for drawing
              */
             public Graphics getGraphics()
             {
               return bufferedImage.getGraphics();
             }

             /**
              * Method to get a Graphics2D object for this picture which can
              * be used to do 2D drawing on the picture
              */
             public Graphics2D createGraphics()
             {
               return bufferedImage.createGraphics();
             }

             /**
              * Method to get the file name associated with the picture
              * @return  the file name associated with the picture
              */
             public String getFileName() { return fileName; }

             /**
              * Method to set the file name
              * @param name the full pathname of the file
              */
             public void setFileName(String name)
             {
               fileName = name;
             }

             /**
              * Method to get the title of the picture
              * @return the title of the picture
              */
             public String getTitle()
             { return title; }

             /**
              * Method to set the title for the picture
              * @param title the title to use for the picture
              */
             public void setTitle(String title)
             {
               this.title = title;
             }

             /**
              * Method to get the width of the picture in pixels
              * @return the width of the picture in pixels
              */
             public int getWidth() { return bufferedImage.getWidth(); }

             /**
              * Method to get the height of the picture in pixels
              * @return  the height of the picture in pixels
              */
             public int getHeight() { return bufferedImage.getHeight(); }

             /**
              * Method to get an image from the picture
              * @return  the buffered image since it is an image
              */
             public Image getImage()
             {
               return bufferedImage;
             }

             /**
              * Method to return the pixel value as an int for the given x and y location
              * @param x the x coordinate of the pixel
              * @param y the y coordinate of the pixel
              * @return the pixel value as an integer (alpha, red, green, blue)
              */
             public int getBasicPixel(int x, int y)
             {
                return bufferedImage.getRGB(x,y);
             }

             /**
              * Method to set the value of a pixel in the picture from an int
              * @param x the x coordinate of the pixel
              * @param y the y coordinate of the pixel
              * @param rgb the new rgb value of the pixel (alpha, red, green, blue)
              */
             public void setBasicPixel(int x, int y, int rgb)
             {
               bufferedImage.setRGB(x,y,rgb);
             }

             /**
              * Method to get a pixel object for the given x and y location
              * @param x  the x location of the pixel in the picture
              * @param y  the y location of the pixel in the picture
              * @return a Pixel object for this location
              */
             public Pixel getPixel(int x, int y)
             {
               // create the pixel object for this picture and the given x and y location
               Pixel pixel = new Pixel(this,x,y);
               return pixel;
             }

             /**
              * Method to get a one-dimensional array of Pixels for this simple picture
              * @return a one-dimensional array of Pixel objects starting with y=0
              * to y=height-1 and x=0 to x=width-1.
              */
             public Pixel[] getPixels()
             {
               int width = getWidth();
               int height = getHeight();
               Pixel[] pixelArray = new Pixel[width * height];

               // loop through height rows from top to bottom
               for (int row = 0; row < height; row++)
                 for (int col = 0; col < width; col++)
                   pixelArray[row * width + col] = new Pixel(this,col,row);

               return pixelArray;
             }

             /**
              * Method to get a two-dimensional array of Pixels for this simple picture
              * @return a two-dimensional array of Pixel objects in row-major order.
              */
             public Pixel[][] getPixels2D()
             {
               int width = getWidth();
               int height = getHeight();
               Pixel[][] pixelArray = new Pixel[height][width];

               // loop through height rows from top to bottom
               for (int row = 0; row < height; row++)
                 for (int col = 0; col < width; col++)
                   pixelArray[row][col] = new Pixel(this,col,row);

               return pixelArray;
             }

             /**
              * Method to load the buffered image with the passed image
              * @param image  the image to use
              */
             public void load(Image image)
             {
               // get a graphics context to use to draw on the buffered image
               Graphics2D graphics2d = bufferedImage.createGraphics();

               // draw the image on the buffered image starting at 0,0
               graphics2d.drawImage(image,0,0,null);

               // show the new image
               show();
             }

             /**
              * Method to show the picture in a picture frame
              */
             public void show()
             {
                 try {
                     ByteArrayOutputStream output = new ByteArrayOutputStream();
                     ImageIO.write(this.bufferedImage, "png", output);
                     String result = Base64.getEncoder().encodeToString(output.toByteArray());
                     //BH: using Base64 instead of DatatypeConverter.printBase64Binary(output.toByteArray());
                     System.out.println("&lt;img src=\'data:image/" + this.extension + ";base64," + result + "\'/>");
                 } catch (IOException e) {
                     System.out.println("Errors occured in image conversion");
                 }
             }

             /**
              * Method to open a picture explorer on a copy (in memory) of this
              * simple picture
              */
             /*
             public void explore()
             {
               // create a copy of the current picture and explore it
               new PictureExplorer(new SimplePicture(this));
             }
             */

             /**
              * Method to load the picture from the passed file name
              * @param fileName the file name to use to load the picture from
              * @throws IOException if the picture isn't found
              */
             public void loadOrFail(String fileName) throws IOException
             {
                // set the current picture's file name
               this.fileName = fileName;

               // set the extension
               int posDot = fileName.lastIndexOf('.');
               if (posDot >= 0)
                 this.extension = fileName.substring(posDot + 1);

                // get file location
                String[] paths = fileName.split("/");
                this.pathName = "";
                if(paths.length != 1) {
                    for(int i = 0; i < paths.length - 1; i++) {
                        this.pathName = this.pathName + paths[i] + "/";
                    }
                }
               // if the current title is null use the file name
               if (title == null)
                 title = fileName;

               File file = new File(this.fileName);


               if (!file.canRead())
               {
                 throw new IOException(this.fileName +
                                     " could not be opened. Check that you specified the path");
               }
               this.bufferedImage = ImageIO.read(file);


             }

             /**
              * Method to read the contents of the picture from a filename
              * without throwing errors
              * @param fileName the name of the file to write the picture to
              * @return true if success else false
              */
             public boolean load(String fileName)
             {
                 try {
                     this.loadOrFail(fileName);
                     return true;

                 } catch (Exception ex) {
                     System.out.println("There was an error trying to open " + fileName);
                     bufferedImage = new BufferedImage(600,200,
                                                       BufferedImage.TYPE_INT_RGB);
                     addMessage("Couldn't load " + fileName,5,100);
                     return false;
                 }

             }

             /**
              * Method to load the picture from the passed file name
              * this just calls load(fileName) and is for name compatibility
              * @param fileName the file name to use to load the picture from
              * @return true if success else false
              */
             public boolean loadImage(String fileName)
             {
                 return load(fileName);
             }

             /**
              * Method to draw a message as a string on the buffered image
              * @param message the message to draw on the buffered image
              * @param xPos  the x coordinate of the leftmost point of the string
              * @param yPos  the y coordinate of the bottom of the string
              */
             public void addMessage(String message, int xPos, int yPos)
             {
               // get a graphics context to use to draw on the buffered image
               Graphics2D graphics2d = bufferedImage.createGraphics();

               // set the color to white
               graphics2d.setPaint(Color.white);

               // set the font to Helvetica bold style and size 16
               graphics2d.setFont(new Font("Helvetica",Font.BOLD,16));

               // draw the message
               graphics2d.drawString(message,xPos,yPos);

             }

             /**
              * Method to draw a string at the given location on the picture
              * @param text the text to draw
              * @param xPos the left x for the text
              * @param yPos the top y for the text
              */
             public void drawString(String text, int xPos, int yPos)
             {
               addMessage(text,xPos,yPos);
             }

             /**
               * Method to create a new picture by scaling the current
               * picture by the given x and y factors
               * @param xFactor the amount to scale in x
               * @param yFactor the amount to scale in y
               * @return the resulting picture
               */
              public Picture scale(double xFactor, double yFactor)
              {
                // set up the scale transform
                AffineTransform scaleTransform = new AffineTransform();
                scaleTransform.scale(xFactor,yFactor);

                // create a new picture object that is the right size
                Picture result = new Picture((int) (getHeight() * yFactor),
                                             (int) (getWidth() * xFactor));

                // get the graphics 2d object to draw on the result
                Graphics graphics = result.getGraphics();
                Graphics2D g2 = (Graphics2D) graphics;

                // draw the current image onto the result image scaled
                g2.drawImage(this.getImage(),scaleTransform,null);

                return result;
              }

              /**
               * Method to create a new picture of the passed width.
               * The aspect ratio of the width and height will stay
               * the same.
               * @param width the desired width
               * @return the resulting picture
               */
              public Picture getPictureWithWidth(int width)
              {
                // set up the scale transform
                double xFactor = (double) width / this.getWidth();
                Picture result = scale(xFactor,xFactor);
                return result;
              }

              /**
               * Method to create a new picture of the passed height.
               * The aspect ratio of the width and height will stay
               * the same.
               * @param height the desired height
               * @return the resulting picture
               */
              public Picture getPictureWithHeight(int height)
              {
                // set up the scale transform
                double yFactor = (double) height / this.getHeight();
                Picture result = scale(yFactor,yFactor);
                return result;
              }

             /**
              * Method to load a picture from a file name and show it in a picture frame
              * @param fileName the file name to load the picture from
              * @return true if success else false
              */
             public boolean loadPictureAndShowIt(String fileName)
             {
               boolean result = true;  // the default is that it worked

               // try to load the picture into the buffered image from the file name
               result = load(fileName);

               // show the picture in a picture frame
               show();

               return result;
             }

             /**
              * Method to write the contents of the picture to a file with
              * the passed name
              * @param fileName the name of the file to write the picture to
              */
             public void writeOrFail(String fileName) throws IOException
             {
               String extension = this.extension; // the default is current

               // create the file object
               File file = new File(this.pathName + fileName);
               //File fileLoc = file.getParentFile(); // directory name

               // if there is no parent directory use the current media dir
               //if (fileLoc == null)
               //{
                 //fileName = FileChooser.getMediaPath(fileName);
                 //file = new File(fileName);
                 //fileLoc = file.getParentFile();
               //}

               // check that you can write to the directory
               //if (!fileLoc.canWrite()) {
                //    throw new IOException(fileName +
                //    " could not be opened. Check to see if you can write to the directory.");
               //}

               // get the extension
               int posDot = fileName.indexOf('.');
               if (posDot >= 0)
                   extension = fileName.substring(posDot + 1);

               // write the contents of the buffered image to the file
               ImageIO.write(bufferedImage, extension, file);

             }

             /**
              * Method to write the contents of the picture to a file with
              * the passed name without throwing errors
              * @param fileName the name of the file to write the picture to
              * @return true if success else false
              */
             public boolean write(String fileName)
             {
                 try {
                     this.writeOrFail(fileName);
                     return true;
                 } catch (Exception ex) {
                     System.out.println("There was an error trying to write " + fileName);
                     ex.printStackTrace();
                     return false;
                 }

             }

              /**
               * Method to get the coordinates of the enclosing rectangle after this
               * transformation is applied to the current picture
               * @return the enclosing rectangle
               */
              public Rectangle2D getTransformEnclosingRect(AffineTransform trans)
              {
                int width = getWidth();
                int height = getHeight();
                double maxX = width - 1;
                double maxY = height - 1;
                double minX, minY;
                Point2D.Double p1 = new Point2D.Double(0,0);
                Point2D.Double p2 = new Point2D.Double(maxX,0);
                Point2D.Double p3 = new Point2D.Double(maxX,maxY);
                Point2D.Double p4 = new Point2D.Double(0,maxY);
                Point2D.Double result = new Point2D.Double(0,0);
                Rectangle2D.Double rect = null;

                // get the new points and min x and y and max x and y
                trans.deltaTransform(p1,result);
                minX = result.getX();
                maxX = result.getX();
                minY = result.getY();
                maxY = result.getY();
                trans.deltaTransform(p2,result);
                minX = Math.min(minX,result.getX());
                maxX = Math.max(maxX,result.getX());
                minY = Math.min(minY,result.getY());
                maxY = Math.max(maxY,result.getY());
                trans.deltaTransform(p3,result);
                minX = Math.min(minX,result.getX());
                maxX = Math.max(maxX,result.getX());
                minY = Math.min(minY,result.getY());
                maxY = Math.max(maxY,result.getY());
                trans.deltaTransform(p4,result);
                minX = Math.min(minX,result.getX());
                maxX = Math.max(maxX,result.getX());
                minY = Math.min(minY,result.getY());
                maxY = Math.max(maxY,result.getY());

                // create the bounding rectangle to return
                rect = new Rectangle2D.Double(minX,minY,maxX - minX + 1, maxY - minY + 1);
                return rect;
              }

              /**
               * Method to get the coordinates of the enclosing rectangle after this
               * transformation is applied to the current picture
               * @return the enclosing rectangle
               */
              public Rectangle2D getTranslationEnclosingRect(AffineTransform trans)
              {
                return getTransformEnclosingRect(trans);
              }

             /**
              * Method to return a string with information about this picture
              * @return a string with information about the picture
              */
             public String toString()
             {
               String output = "Simple Picture, filename " + fileName +
                 " height " + getHeight() + " width " + getWidth();
               return output;
             }

            } // end of SimplePicture class
            ]]>
            </pre>
            <!-- <pre source="datafiles/picture-classes-library.jar"/> -->
        </datafile>

        <program label="java-only-blue" interactive='activecode' language="java" datafile="pictureClasses1.jar, beach.jpg">
            <input>
                <![CDATA[
                import java.awt.*;
                import java.awt.font.*;
                import java.awt.geom.*;
                import java.awt.image.BufferedImage;
                import java.text.*;
                import java.util.*;
                import java.util.List;

                /**
                 * A class that represents a picture.  This class inherits from
                 * SimplePicture and allows the student to add functionality to
                 * the Picture class.
                 *
                 * @author Barbara Ericson ericson@cc.gatech.edu
                 */
                public class Picture extends SimplePicture
                {
                  ///////////////////// constructors //////////////////////////////////

                  /**
                   * Constructor that takes no arguments
                   */
                  public Picture ()
                  {
                    /* not needed but use it to show students the implicit call to super()
                     * child constructors always call a parent constructor
                     */
                    super();
                  }

                  /**
                   * Constructor that takes a file name and creates the picture
                   * @param fileName the name of the file to create the picture from
                   */
                  public Picture(String fileName)
                  {
                    // let the parent class handle this fileName
                    super(fileName);
                  }

                  /**
                   * Constructor that takes the height and width
                   * @param height the height of the desired picture
                   * @param width the width of the desired picture
                   */
                  public Picture(int height, int width)
                  {
                    // let the parent class handle this width and height
                    super(width,height);
                  }

                  /**
                   * Constructor that takes a picture and creates a
                   * copy of that picture
                   * @param copyPicture the picture to copy
                   */
                  public Picture(Picture copyPicture)
                  {
                    // let the parent class do the copy
                    super(copyPicture);
                  }

                  /**
                   * Constructor that takes a buffered image
                   * @param image the buffered image to use
                   */
                  public Picture(BufferedImage image)
                  {
                    super(image);
                  }
                  ////////////////////// methods ///////////////////////////////////////

                  /**
                   * Method to return a string with information about this picture.
                   * @return a string with information about the picture such as fileName,
                   * height and width.
                   */
                  public String toString()
                  {
                    String output = "Picture, filename " + getFileName() +
                      " height " + getHeight()
                      + " width " + getWidth();
                    return output;

                  }

                  /**
                    zeroBlue() method sets the blue values at all pixels to zero
                 */
                  public void zeroBlue()
                  {
                    Pixel[][] pixels = this.getPixels2D();

                    for (Pixel[] rowArray : pixels)
                     {
                       for (Pixel p: rowArray)
                       {
                              p.setBlue(0);
                       }
                    }
                  }


                 /*
                    keepOnlyBlue() method sets the blue values at all pixels to zero.

                    Add new method here and call it from main.
                 */

                  /* Main method for testing
                   */
                  public static void main(String[] args)
                  {
                    Picture pict = new Picture("beach.jpg");
                    pict.show();
                    pict.zeroBlue(); // Change this to call keepOnlyBlue()
                    pict.show();
                  }
                }
                ]]>
            </input>
            <tests>
                <![CDATA[
                import static org.junit.Assert.*;
                import org.junit.*;
                import java.io.*;
                import java.util.List;
                import java.util.ArrayList;
                import java.util.Arrays;

                public class RunestoneTests extends CodeTestHelper
                {
                  @Test
                  public void test1()
                  {
                    String target = "public void keepOnlyBlue()";
                    boolean passed = checkCodeContains("keepOnlyBlue() method",target);
                    assertTrue(passed);
                  }
                  @Test
                  public void test1b()
                  {
                    String target = ".keepOnlyBlue()";
                    boolean passed = checkCodeContains("Call to keepOnlyBlue() in main",target);
                    assertTrue(passed);
                  }

                  @Test
                  public void test2()
                  {
                    String target = ".setGreen(0);";
                    boolean passed = checkCodeContains("keepOnlyBlue() setting green pixels to the number 0",target);
                    assertTrue(passed);
                  }
                   @Test
                  public void test2b()
                  {
                    String target = ".setRed(0);";
                    boolean passed = checkCodeContains("keepOnlyBlue() setting red pixels to the number 0",target);
                    assertTrue(passed);
                  }


                  @Test
                    public void test3()
                    {
                       String target = "for";
                       String code = getCode();
                       int index = code.indexOf("public void keepOnlyBlue()");
                       boolean passed = false;
                       if (index > 0) {
                        code = code.substring(index);
                        int num = countOccurences(code, target);
                        passed = num >= 2;
                       }
                       getResults("true", ""+passed, "Checking that keepOnlyBlue() contains 2 for loops", passed);
                       assertTrue(passed);
                    }
                }
                ]]>
            </tests>
        </program>
    </section>

    <section xml:id="videos-in-runestone">
        <title>YouTube Videos</title>

        <p>Runestone uses a YouTube API that broadcasts events when a reader interacts with a video.  In this way, Runestone can record video-watching as an activity.  As <pretext/> output we concede better behavior on small screens (<q>responsiveness</q>) to enable this feature in a Runestone version.  A <attr>label</attr> attribute is necessary for persistence in the Runestone database.  Various <pretext/> features, such as playlists, are not yet supported<mdash/>make a request.</p>

        <video xml:id="yt-list-vars" label="youtube-list-vars" youtube="X1-UNHUajfk" width="60%" margins="5% 35%" preview="yt-list-variables.png">
            <title>A List Variable Video</title>
        </video>

        <p>The margins here are asymmetric just as a test.  And this text is here to see where the video ends.</p>
    </section>

    <section xml:id="rune-nested-divisions">
        <title>Deeper</title>

        <introduction>
            <p>This is a stub of a <tag>section</tag>, but it contains two <tag>subsection</tag> which each contain a PROJECT-LIKE item that includes a <tag>program</tag> element, and thus is a coding exercise.  This tests migration to the Runestone assignment area, though Runestone only has divisions two-deep (<q>chapter</q> and <q>subchapter</q>, so both will show up associated with the same <tag>section</tag><mdash/>this one.</p>

            <p>The first is a start of a C program, so will only be interactive on a Runestone server.  The second is a Python program, so will be interactive in all HTML outputs.</p>
        </introduction>

        <subsection>
            <title>Subsection One</title>

            <p>An <tag>activity</tag> next.  This one has a <tag>program</tag> so will be made interactive whenever possible.</p>

            <activity label="activity-in-subsection">
                <title>Activity in a Subsection</title>

                <statement>
                    <p>We would suggest you do something here.</p>
                </statement>
                <program xml:id="coding-exercise-partial-three" interactive="activecode" language="c">
                    <input>
                    #include &lt;stdio.h&gt;

                    int main(void)
                    </input>
                </program>
            </activity>

            <p>Nothing suggests this next <tag>project</tag> is interactive.</p>

            <project>
                <title>Project in a Subsection</title>

                <statement>
                    <p>You would work this project on paper, most likely.  It is <em>never</em> interactive since there is no indication of a desire for that, even if hosted on a capable platform.</p>

                    <p>A little bit of markup, to test a bug: <m>x^2</m>.  (The bug was only apparent under a deprecated method for specify a question to be an interactive short-answer question on Runestone Academy.)</p>
                </statement>
            </project>
        </subsection>

        <subsection>
            <title>Subsection Two</title>

            <p>An <tag>exploration</tag> next.</p>

            <exploration xml:id="exploration-with-always-static-program">
                <title>Exploration in a Subsection</title>

                <statement>
                    <p>We would suggest now that you explore something here.  In this case we simply provide a CodeLens, which would be graded as an <q>interaction</q>.</p>
                </statement>
                <program xml:id="python-count-10" interactive="codelens" language="python">
                    <input>
                    for i in range(10):
                        print(i)
                    </input>
                </program>
            </exploration>

            <p>The next simple <tag>exercise</tag> will be a <q>short answer</q> question on a capable interactive platform since we have included a <tag>response</tag> element.</p>

            <exercise>
                <title>Inline Exercise in a Subsection</title>

                <statement>
                    <p>I am an interactive short answer question, but only on a capable platform.</p>
                </statement>
                <response/>
            </exercise>
        </subsection>
    </section>

    <exercises xml:id="true-false-exercises">
        <title>True/False Exercises</title>

        <exercise xml:id="true-false-one" label="vector-space-dimension">
            <title>True/False</title>
            <idx>vector space</idx>
            <statement correct="no">
                <p>Every vector space has finite dimension.</p>
            </statement>
            <feedback>
                <p>The vector space of all polynomials with finite degree has a basis, <m>B = \{1,x,x^2,x^3,\dots\}</m>, which is infinte.</p>
            </feedback>
            <hint>
                <p><m>P_n</m>, the vector space of polynomials with degree at most <m>n</m>, has dimension <m>n+1</m> by <xref ref="theorem-exponent-laws"/>.  [Cross-reference is just a demo, content is not relevant.]  What happens if we relax the defintion and remove the parameter <m>n</m>?</p>
            </hint>
        </exercise>
    </exercises>

    <exercises xml:id="multiple-choice-exercises" group-work="yes" group-size="5">
        <title>Multiple Choice Exercises</title>

        <introduction>
            <p>When this <tag>exercises</tag> division is hosted on Runestone Academy, it will be enabled for group work.  See group selection and submission features at the end of the division. (2023-07-03: experimental.)</p>
        </introduction>

        <exercise xml:id="multiple-choice-one" label="multiple-choice-not-randomized">
            <title>Multiple-Choice, Not Randomized, One Answer</title>
            <idx>stop signs</idx>
            <statement>
                <p>What color is a stop sign?</p>
            </statement>
            <!-- to appear as problem with potentially multiple correct -->
            <!-- answers (even though there is only one), use           -->
            <!--                                                        -->
            <!--     <choices multiple-correct="yes">                   -->
            <!--                                                        -->
            <choices>
                <choice>
                    <statement>
                        <p>Green</p>
                    </statement>
                    <feedback>
                        <p>Green means <q>go!</q>.</p>
                    </feedback>
                </choice>
                <choice correct="yes">
                    <statement>
                        <p>Red</p>
                    </statement>
                    <feedback>
                        <p>Red is universally used for prohibited activities or serious warnings.</p>
                    </feedback>
                </choice>
                <choice>
                    <statement>
                        <p>White</p>
                    </statement>
                    <feedback>
                        <p>White might be hard to see.</p>
                    </feedback>
                </choice>
            </choices>
            <hint>
                <p>What did you see last time you went driving?</p>
            </hint>
            <hint>
                <p>Maybe go out for a drive?</p>
            </hint>
        </exercise>

        <exercise label="multiple-choice-multiple-answers">
            <title>Multiple-Choice, Not Randomized, Multiple Answers</title>
            <idx>stop signs</idx>
            <statement>
                <p>Which colors might be found in a rainbow?  (Note that the radio buttons now allow multiple buttons to be selected.)</p>
            </statement>
            <choices>
                <choice correct="yes">
                    <statement>
                        <p>Red</p>
                    </statement>
                    <feedback>
                        <p>Red is a definitely one of the colors.</p>
                    </feedback>
                </choice>
                <choice correct="yes">
                    <statement>
                        <p>Yellow</p>
                    </statement>
                    <feedback>
                        <p>Yes, yellow is correct.</p>
                    </feedback>
                </choice>
                <choice>
                    <statement>
                        <p>Black</p>
                    </statement>
                    <feedback>
                        <p>Remember the acronym<ellipsis/><acro>ROY G BIV</acro>.  <q>B</q> stands for blue.</p>
                    </feedback>
                </choice>
                <choice correct="yes">
                    <statement>
                        <p>Green</p>
                    </statement>
                    <feedback>
                        <p>Yes, green is one of the colors.</p>
                    </feedback>
                </choice>
            </choices>
            <hint>
                <p>Do you know the acronym<ellipsis/><acro>ROY G BIV</acro> for the colors of a rainbow, and their order?</p>
            </hint>
        </exercise>

        <exercise label="multiple-choice-randomized">
            <title>Multiple-Choice, Randomized, One Answer</title>
            <idx>stop signs</idx>
            <statement>
                <p>What color is a stop sign? [Static versions retain the order as authored.]</p>
            </statement>
            <choices randomize="yes">
                <choice>
                    <statement>
                        <p>Green</p>
                    </statement>
                    <feedback>
                        <p>Green means <q>go!</q>.</p>
                    </feedback>
                </choice>
                <choice correct="yes">
                    <statement>
                        <p>Red</p>
                    </statement>
                    <feedback>
                        <p>Red is universally used for prohibited activities or serious warnings.</p>
                    </feedback>
                </choice>
                <choice>
                    <statement>
                        <p>White</p>
                    </statement>
                    <feedback>
                        <p>White might be hard to see.</p>
                    </feedback>
                </choice>
            </choices>
            <hint>
                <p>What did you see last time you went driving?</p>
            </hint>
            <hint>
                <p>Maybe go out for a drive?</p>
            </hint>
        </exercise>

        <exercise label="multiple-choice-randomized-multiple-answers">
            <title>Multiple-Choice, Randomized, Multiple Answers</title>
            <idx>stop signs</idx>
            <statement>
                <p>Which colors might be found in a rainbow?  (Note that the radio buttons now allow multiple buttons to be selected.) [Static versions retain the order as authored.]</p>
            </statement>
            <choices randomize="yes">
                <choice correct="yes">
                    <statement>
                        <p>Red</p>
                    </statement>
                    <feedback>
                        <p>Red is a definitely one of the colors.</p>
                    </feedback>
                </choice>
                <choice correct="yes">
                    <statement>
                        <p>Yellow</p>
                    </statement>
                    <feedback>
                        <p>Yes, yellow is correct.</p>
                    </feedback>
                </choice>
                <choice>
                    <statement>
                        <p>Black</p>
                    </statement>
                    <feedback>
                        <p>Remember the acronym<ellipsis/><acro>ROY G BIV</acro>.  <q>B</q> stands for blue.</p>
                    </feedback>
                </choice>
                <choice correct="yes">
                    <statement>
                        <p>Green</p>
                    </statement>
                    <feedback>
                        <p>Yes, green is one of the colors.</p>
                    </feedback>
                </choice>
            </choices>
            <hint>
                <p>Do you know the acronym<ellipsis/><acro>ROY G BIV</acro> for the colors of a rainbow, and their order?</p>
            </hint>
        </exercise>

        <exercise label="mathematical-multiple-choice-multiple-answers">
            <title>Mathematical Multiple-Choice, Not Randomized, Multiple Answers</title>
            <idx>stop signs</idx>
            <statement>
                <p>Which of the following is an antiderivative of <m>2\sin(x)\cos(x)</m>?</p>
            </statement>
            <choices>
                <choice correct="yes">
                    <statement>
                        <p><m>\sin^2(x)+832</m></p>
                    </statement>
                    <feedback>
                        <p>Remember that when we write <m>+C</m> on an antiderivative that this is the way we communicate that there are <em>many</em> possible derivatives, but they all <q>differ by a constant</q>.</p>
                    </feedback>
                </choice>
                <choice correct="yes">
                    <statement>
                        <p><m>\sin^2(x)</m></p>
                    </statement>
                    <feedback>
                        <p>The derivative given in the statement of the problem looks exactly like an application of the chain rule to <m>\sin^2(x)</m>.</p>
                    </feedback>
                </choice>
                <choice correct="yes">
                    <statement>
                        <p><m>-\cos^2(x)</m></p>
                    </statement>
                    <feedback>
                        <p>Take a derivative on <m>-\cos^2(x)</m> to see that this answer is correct.  Extra credit: does this answer <q>differ by a constant</q> when subtracted from either of the other two correct answers?</p>
                    </feedback>
                </choice>
                <choice>
                    <statement>
                        <p><m>-2\cos(x)\sin(x)</m></p>
                    </statement>
                    <feedback>
                        <p>The antiderivative of a product is not the product of the antiderivatives.  Use the product rule to take a derivative and see that this answer is not correct.</p>
                    </feedback>
                </choice>
            </choices>
            <hint>
                <p>You can take a derivative on any one of the choices to see if it is correct or not, rather than using techniques of integration to find <em>a single</em> correct answer.</p>
            </hint>
        </exercise>
    </exercises>

    <exercises xml:id="parsons-exercises">
        <title>Parsons Exercises</title>

        <exercise label="number-theory-proof" adaptive="yes">
            <title>Parsons Problem, Mathematical Proof</title>
            <idx>even numbers</idx>
            <statement>
                <p>Create a proof of the theorem: If <m>n</m> is an even number, then <m>n\equiv 0\mod 2</m>.</p>
            </statement>
            <blocks>
                <block order="2">
                    <p>Suppose <m>n</m> is even.</p>
                </block>
                <block order="3">
                    <choice><p>Then <m>n</m> is a prime number.</p></choice>
                    <choice correct="yes"><p>Then there exists an <m>m</m> so that <m>n = 2m</m>.</p></choice>
                    <choice><p>Then there exists an <m>m</m> so that <m>n = 2m + 1</m>.</p></choice>
                </block>
                <block order="1" correct="no">
                    <p>Click the heels of your ruby slippers together three times.</p>
                </block>
                <block order="5">
                    <p>So <m>n = 2m + 0</m>.</p>
                    <p>This is a superfluous second paragraph in this block.</p>
                </block>
                <block order="4">
                    <p>Thus <m>n\equiv 0\mod 2</m>.</p>
                </block>
                <block order="6" correct="no">
                    <p>And a little bit of irrelevant multi-line math
                        <md>
                            <mrow>c^2&amp;a^2+b^2</mrow>
                            <mrow>&amp;x^2+y^2</mrow>
                        </md>.
                    </p>
                </block>
            </blocks>
            <hint>Dorothy will not be much help with this proof.</hint>
        </exercise>

        <exercise label="prime-number-program-indent-yes" language="python" adaptive="yes" indentation="hide">
            <title>Parsons Problem, Programming</title>
            <idx>prime numbers</idx>
            <idx>Sieve of Eratosthenes</idx>
            <statement>
                <p>The Sieve of Eratosthenes computes prime numbers by starting with a finite list of the integers bigger than 1.  The first member of the list is a prime and is saved/recorded.  Then all multiples of that prime (which not a prime, excepting the prime itself!) are removed from the list.  Now the first number remaining in the list is the next prime number.  And the process repeats.</p>
                <p>The code blocks below can be rearranged to form one of the many possible programs to implement this algorithm to compute a list of all the primes less than <m>250</m>. [Ed. this version of this problem requires the reader to provide the necessary indentation.]</p>
                <p>This reprises <xref ref="sieve-primes"/>.</p>
            </statement>
            <blocks>
                <block order="6">
                    <cline>n = 250</cline>
                </block>
                <block order="2">
                    <choice correct="yes">
                        <cline>primes = []</cline>
                        <cline>candidates = list(range(2,n))</cline>
                    </choice>
                    <choice>
                        <cline>candidates = []</cline>
                        <cline>primes = list(range(2,n))</cline>
                    </choice>
                </block>
                <block order="7" correct="no">
                    <cline>primes = candidates + [p]</cline>
                </block>
                <block order="8">
                    <cline>while candidates:</cline>
                </block>
                <block order="3">
                    <cline>    p = candidates[0]</cline>
                    <cline>    primes.append(p)</cline>
                </block>
                <block order="1">
                    <cline>    for nonprime in range(p, n, p):</cline>
                </block>
                <block order="5">
                    <cline>        if nonprime in candidates:</cline>
                    <cline>            candidates.remove(nonprime)</cline>
                </block>
                <block order="4">
                    <cline>print(primes)</cline>
                </block>
            </blocks>
        </exercise>

        <exercise label="prime-number-program-indent-no" language="python" adaptive="yes" indentation="show">
            <title>Parsons Problem, Programming</title>
            <idx>prime numbers</idx>
            <idx>Sieve of Eratosthenes</idx>
            <statement>
                <p>The Sieve of Eratosthenes computes prime numbers by starting with a finite list of the integers bigger than 1.  The first member of the list is a prime and is saved/recorded.  Then all multiples of that prime (which not a prime, excepting the prime itself!) are removed from the list.  Now the first number remaining in the list is the next prime number.  And the process repeats.</p>
                <p>The code blocks below can be rearranged to form one of the many possible programs to implement this algorithm to compute a list of all the primes less than <m>250</m>. [Ed. this version of this problem does not require the reader to provide the necessary indentation, which is the default.]</p>
                <p>This reprises <xref ref="sieve-primes"/>.</p>
            </statement>
            <blocks>
                <block order="6">
                    <cline>n = 250</cline>
                </block>
                <block order="2">
                    <choice correct="yes">
                        <cline>primes = []</cline>
                        <cline>candidates = list(range(2,n))</cline>
                    </choice>
                    <choice>
                        <cline>candidates = []</cline>
                        <cline>primes = list(range(2,n))</cline>
                    </choice>
                </block>
                <block order="7" correct="no">
                    <cline>primes = candidates + [p]</cline>
                </block>
                <block order="8">
                    <cline>while candidates:</cline>
                </block>
                <block order="3">
                    <cline>    p = candidates[0]</cline>
                    <cline>    primes.append(p)</cline>
                </block>
                <block order="1">
                    <cline>    for nonprime in range(p, n, p):</cline>
                </block>
                <block order="5">
                    <cline>        if nonprime in candidates:</cline>
                    <cline>            candidates.remove(nonprime)</cline>
                </block>
                <block order="4">
                    <cline>print(primes)</cline>
                </block>
            </blocks>
        </exercise>

        <exercise label="number-theory-proof-numbered-left" adaptive="yes">
            <title>Parsons Problem, Mathematical Proof, Numbered Blocks</title>
            <idx>even numbers</idx>
            <statement>
                <p>Create a proof of the theorem: If <m>n</m> is an even number, then <m>n\equiv 0\mod 2</m>. [Ed.  This version has numbered blocks, online they are on the right end of the block.]</p>
            </statement>
            <blocks numbered="right">
                <block order="2">
                    <p>Suppose <m>n</m> is even.</p>
                </block>
                <block order="3">
                    <choice><p>Then <m>n</m> is a prime number.</p></choice>
                    <choice correct="yes"><p>Then there exists an <m>m</m> so that <m>n = 2m</m>.</p></choice>
                    <choice><p>Then there exists an <m>m</m> so that <m>n = 2m + 1</m>.</p></choice>
                </block>
                <block order="1" correct="no">
                    <p>Click the heels of your ruby slippers together three times.</p>
                </block>
                <block order="5">
                    <p>So <m>n = 2m + 0</m>.</p>
                    <p>This is a superfluous second paragraph in this block.</p>
                </block>
                <block order="4">
                    <p>Thus <m>n\equiv 0\mod 2</m>.</p>
                </block>
            </blocks>
            <hint>Dorothy will not be much help with this proof.</hint>
        </exercise>

        <exercise label="prime-number-program-numbered-right" language="python" adaptive="yes" indentation="hide">
            <title>Parsons Problem, Programming</title>
            <idx>prime numbers</idx>
            <idx>Sieve of Eratosthenes</idx>
            <statement>
                <p>The Sieve of Eratosthenes computes prime numbers by starting with a finite list of the integers bigger than 1.  The first member of the list is a prime and is saved/recorded.  Then all multiples of that prime (which not a prime, excepting the prime itself!) are removed from the list.  Now the first number remaining in the list is the next prime number.  And the process repeats.</p>
                <p>The code blocks below can be rearranged to form one of the many possible programs to implement this algorithm to compute a list of all the primes less than <m>250</m>. [Ed.  This version has numbered blocks, online they are on the left end of the block.]</p>
                <p>This reprises <xref ref="sieve-primes"/>.</p>
            </statement>
            <blocks numbered="left">
                <block order="6">
                    <cline>n = 250</cline>
                </block>
                <block order="2">
                    <choice correct="yes">
                        <cline>primes = []</cline>
                        <cline>candidates = list(range(2,n))</cline>
                    </choice>
                    <choice>
                        <cline>candidates = []</cline>
                        <cline>primes = list(range(2,n))</cline>
                    </choice>
                </block>
                <block order="7" correct="no">
                    <cline>primes = candidates + [p]</cline>
                </block>
                <block order="8">
                    <cline>while candidates:</cline>
                </block>
                <block order="3">
                    <cline>    p = candidates[0]</cline>
                    <cline>    primes.append(p)</cline>
                </block>
                <block order="1">
                    <cline>    for nonprime in range(p, n, p):</cline>
                </block>
                <block order="5">
                    <cline>        if nonprime in candidates:</cline>
                    <cline>            candidates.remove(nonprime)</cline>
                </block>
                <block order="4">
                    <cline>print(primes)</cline>
                </block>
            </blocks>
        </exercise>
    </exercises>

    <exercises xml:id="horizontal-parsons-exercises">
        <title>Horizontal Parsons Exercises</title>

        <exercise label="horizontal-parson-sql-statement-simple" language="sql">
            <title>Parsons Problem, SQL statement</title>
            <statement>
                <p>Form the SQL statement by rearranging the four blocks.</p>
                <!-- <p>Note: for this SQL exercise, and the others following, blocks are authored as code via a <tag>c</tag> element, in order that the text pass through to the compiler with no changes.</p> -->
            </statement>
            <blocks layout="horizontal" randomize="yes">
                <block order="2"><c>SELECT</c></block>
                <block order="1"><c>*</c></block>
                <block order="4"><c>FROM</c></block>
                <block order="3"><c>test</c></block>
            </blocks>
        </exercise>

        <exercise label="horizontal-parson-sql-statement-no-randomize" language="sql">
            <title>Parsons Problem, SQL statement, no randomization</title>
            <statement>
                <p>Form the SQL statement by rearranging the four blocks.  This version of this problem will <em>always</em> present the blocks in the same fixed order (but incorrect, hopefully!), as prescribed by the author in the source.</p>
            </statement>
            <blocks layout="horizontal" randomize="no">
                <block order="2"><c>SELECT</c></block>
                <block order="1"><c>*</c></block>
                <block order="4"><c>FROM</c></block>
                <block order="3"><c>test</c></block>
            </blocks>
        </exercise>

        <exercise label="horizontal-parson-sql-statement-with-db" language="sql" database="sql/test.db">
            <title>Parsons Problem, SQL statement, automatic feedback</title>
            <statement>
                <p>Form the SQL statement by rearranging the four blocks.</p>
            </statement>
            <blocks layout="horizontal" randomize="yes">
                <block order="2"><c>SELECT</c></block>
                <block order="1"><c>*</c></block>
                <block order="4"><c>FROM</c></block>
                <block order="3"><c>test</c></block>
            </blocks>
            <tests>
            assert 1,1 == world
            assert 0,1 == hello
            assert 2,1 == 42
            </tests>
        </exercise>

        <exercise label="horizontal-parson-natural" language="natural">
            <title>Parsons Problem, Natural Language</title>
            <statement>
                <p>Form the sentence often used to show font samples.  You can reuse blocks as needed.</p>
            </statement>
            <blocks layout="horizontal" reuse="yes" randomize="yes">
                <block ref="font-the" order="6"/>
                <block order="8">quick</block>
                <block order="2">brown</block>
                <block order="3">fox</block>
                <block order="1">jumped</block>
                <block order="5">over</block>
                <block xml:id="font-the">the</block>
                <block order="7">lazy</block>
                <block order="4">dog</block>
            </blocks>
        </exercise>

        <exercise label="horizontal-parson-natural-distractor" language="natural">
            <title>Parsons Problem, Natural Language, with Distractors</title>
            <statement>
                <p>Form the sentence often used to show font samples.  Again, but now with distractors.</p>
            </statement>
            <blocks layout="horizontal">
                <block ref="font-the-two" order="7"/>
                <block order="10" correct="yes">quick</block>
                <block order="2">brown</block>
                <block order="3">fox</block>
                <block order="1">jumped</block>
                <block order="8" correct="no">foo</block>
                <block order="6">over</block>
                <block xml:id="font-the-two">the</block>
                <block order="9">lazy</block>
                <block order="5" correct="no">bar</block>
                <block order="4">dog</block>
            </blocks>
        </exercise>

        <exercise label="horizontal-parson-sql-statement-reusable" language="sql">
            <title>Parsons Problem, SQL statement, reusable</title>
            <statement>
                <p>Form the SQL statement by rearranging the four blocks.  Same problem as above, but we allow blocks to be reused (even though the solution does not require that).</p>
            </statement>
            <blocks layout="horizontal" reuse="yes" randomize="yes">
                <block order="2"><c>SELECT</c></block>
                <block order="1"><c>*</c></block>
                <block order="4"><c>FROM</c></block>
                <block order="3"><c>test</c></block>
            </blocks>
        </exercise>
    </exercises>

    <exercises xml:id="matching-exercises">
        <title>Matching Exercises</title>

        <!-- https://www.britannica.com/list/25-decade-defining-events-in-us-history -->
        <exercise xml:id="matching-one" label="matching-dates">
            <title>Matching Problem, Dates</title>
            <idx>matching US dates</idx>
            <statement>
                <p>Match each event in United States history with the year it happened.</p>
            </statement>
            <feedback>
                <p>Review <url href="https://www.britannica.com/list/25-decade-defining-events-in-us-history" visual="www.britannica.com/list/25-decade-defining-events-in-us-history">Encyclopedia Brittania, 25 Decade-Defining Events in U.S. History</url>url.</p>
            </feedback>
            <matches>
                <match order="4">
                    <premise>Monroe Doctrine</premise>
                    <response>1823</response>
                </match>
                <match order="3">
                    <premise>Haymarket Riot</premise>
                    <response>1886</response>
                </match>
                <match order="1">
                    <premise>Louisiana Purchase</premise>
                    <response>1803</response>
                </match>
                <match order="2">
                    <premise>Battle of Gettysburg</premise>
                    <response>1863</response>
                </match>
            </matches>
        </exercise>

        <exercise label="matching-derivatives">
            <title>Matching Problem, Derivatives</title>
            <idx>matching derivatives</idx>
            <statement>
                <p>Match each function with its derivative.</p>
            </statement>
            <feedback>
                <p>Did you compute the derivative of each function in the premises (left column)?</p>
            </feedback>
            <matches>
                <match order="1">
                    <premise><m>x^3-6x^2+5</m></premise>
                    <response><m>3x^2-12x</m></response>
                </match>
                <match order="3">
                    <premise><m>x^{-3}</m></premise>
                    <response><m>-3x^{-4}</m></response>
                </match>
                <match order="2">
                    <premise><m>(x+1)^2</m></premise>
                    <response><m>2x+2</m></response>
                </match>
            </matches>
        </exercise>

        <exercise label="matching-bases">
            <title>Matching Problem, Linear Algebra</title>
            <idx>matching bases and subspaces</idx>
            <statement>
                <p>Match each subspace with a basis for that subspace. (You may assume that each set is really a basis for at least one of the subspaces.)</p>
            </statement>
            <feedback>
                <p>Each putative basis is a subset of exactly one of the three subspaces.  So for each subspace, two of the three sets can be ruled out by simply testing that the vectors of the basis are members of the subspace, via the membership criteria.</p>
            </feedback>
            <matches>
                <match order="2">
                    <premise><m>\left\{\langle x,y,z\rangle\mid - y + z = 0\right\}</m></premise>
                    <response><m>\left\{\langle -4, 3, 3\rangle, \langle 3, -2, -2 \rangle\right\}</m></response>
                </match>
                <match order="2">
                    <premise><m>\left\{\langle x,y,z\rangle\mid -3x - 5y + z = 0\right\}</m></premise>
                    <response><m>\left\{\langle -4, 3, 3\rangle, \langle 5, -4, -5 \rangle\right\}</m></response>
                </match>
                <match order="2">
                    <premise><m>\left\{\langle x,y,z\rangle\mid -2x - 5y + 2z = 0\right\}</m></premise>
                    <response><m>\left\{\langle 3, -2, -2 \rangle, \langle 5, -4, -5 \rangle\right\}</m></response>
                </match>
            </matches>
            <hint>
                <p>For openers, a basis for a subspace must be a <em>subset</em> of the subspace.</p>
            </hint>
        </exercise>
    </exercises>

    <exercises xml:id="clickable-area-exercises">
        <title>Clickable Area Exercises</title>

        <exercise label="clickable-text">
            <title>Clickable Areas, <q>Regular</q> Text</title>

            <statement>
                <p>Identify (by clicking, or by circling) all of the nouns in this quotation by Eleanor Roosevelt.</p>
            </statement>

            <areas>
                <p><q>The <area>future</area> belongs to <area correct="no">those</area> who believe in the <area correct="yes">beauty</area> of <area correct="no">their</area> <area>dreams</area>.</q></p>
            </areas>

            <feedback>
                <p>The incorrect words are pronouns.</p>
            </feedback>
        </exercise>

        <exercise label="clickable-code">
            <title>Clickable Areas, Code</title>

            <statement>
                <p>Identify (by clicking, or by circling) all of the assignment statements in this Python function.</p>
            </statement>

            <areas language="python">
                <cline><area correct="no">def main():</area></cline>
                <cline>    <area correct="yes">x = 4</area></cline>
                <cline>    for i in range(5):</cline>
                <cline>        <area>y = i</area></cline>
                <cline>        <area correct="no">if y > 2:</area></cline>
                <cline>            print(y)</cline>
            </areas>

            <feedback>
                <p>Remember, the operator <c>=</c> is used for assignment.</p>
            </feedback>
        </exercise>

        <exercise label="clickable-table">
            <title>Clickable Areas, Text in a Table</title>

            <statement>
                <p>A two-dimensional array was created in Python with the list comprehension:<cd>
                        <cline>[[0 for x in range(3)] for y in range(2)]</cline>
                </cd>Then the values were (mostly) changed from zeros and the final array is shown below.</p>
                <p>Identify (by clicking, or by circling) all of the boolean values in the array.</p>
                <!-- <p>Note that every entry is inline code, authored with a <tag>c</tag>.</p> -->
            </statement>

            <areas>
                <tabular top="minor" bottom="minor" left="minor" right="minor">
                    <row>
                        <cell><c>42</c></cell>
                        <cell><area><c>True</c></area></cell>
                        <cell><area correct="no"><c>'towel'</c></area></cell>
                    </row>
                    <row>
                        <cell><area correct="no"><c>'true'</c></area></cell>
                        <cell><c>0</c></cell>
                        <cell><area><c>False</c></area></cell>
                    </row>
                </tabular>

                <p>This second table has no <tag>area</tag>, in order to test CSS for tables.</p>

                <tabular top="minor" bottom="minor" left="minor" right="minor">
                    <row>
                        <cell><c>42</c></cell>
                        <cell><c>True</c></cell>
                        <cell><c>'towel'</c></cell>
                    </row>
                    <row>
                        <cell><c>'true'</c></cell>
                        <cell><c>0</c></cell>
                        <cell><c>False</c></cell>
                    </row>
                </tabular>
            </areas>
            <hint>
                <p>Python boolean variables begin with capital latters.</p>
            </hint>
            <feedback>
                <p>Python boolean variables are <c>True</c> and <c>False</c>.  A value in quotation marks is a string, not a boolean.</p>
            </feedback>
        </exercise>
    </exercises>

    <exercises xml:id="select-exercises">
        <title>Select Exercises</title>

        <exercise>
            <statement>
                <p>Mock exercise, just to say this is all testing, 2023-05-19.</p>
            </statement>
        </exercise>

        <!-- Select one at random -->
        <exercise label="question-select">
            <select questions="true-false-one multiple-choice-one matching-one"/>
        </exercise>

        <!-- Select according to a student's group (A or B) -->
        <exercise label="ab-experiment">
            <select ab-experiment="true-false-one multiple-choice-one" experiment-name="sample-book"/>
        </exercise>

    </exercises>

    <exercises xml:id="short-answer-exercises">
        <title>Short Answer Exercises</title>

        <exercise label="short-answer-question">
            <title>Short Answer</title>

            <statement>
                <p>This sample book is configured to make some simple questions interactive on a capable platform, by adding a <tag>response</tag> element as a signal.</p>
            </statement>
            <response/>
        </exercise>
    </exercises>

    <exercises xml:id="fill-in--exercises">
        <title>Fill-In Exercises</title>

        <exercise label="fillin-integer">
            <title>Fill-In, Integer Answer</title>

            <statement>
                <p>The game of bowling uses <var width="28"/> pins that you try to knock down. (This answer blank has been set to be very wide.)</p>
            </statement>
            <setup>
                <var>
                    <condition number="10">
                        <feedback>
                            <p>Arranged in a triangle, there are <m>1+2+3+4 = 10</m> pins, a so-called <term>triangular</term> number.</p>
                        </feedback>
                    </condition>
                    <condition number="16">
                        <feedback>
                            <p><em>Close</em>! You may have used hexadecimal notation, when you did not really mean to.</p>
                        </feedback>
                    </condition>
                    <condition string=".*">
                        <feedback>
                            <p>Incorrect.</p>
                        </feedback>
                    </condition>
                </var>
            </setup>
        </exercise>

        <exercise label="fillin-string-integer">
            <title>Fill-In, String and Number Answers</title>

            <statement>
                <p>Complete the following line of a Python program so that it will declare an integer variable <c>age</c> with an initial value of <c>5</c>. (These two answer blanks have been set to be very short.)</p>
                <p><var width="2"/> <c>age = </c> <var width="3"/><c>;</c></p>
            </statement>
            <setup>
                <var>
                    <condition string="int">
                        <feedback>
                            <p>A variable of type <c>int</c> is appropriate for whole number ages.</p>
                        </feedback>
                    </condition>
                    <condition string=".*">
                        <feedback>
                            <p>Remember that Java uses just the first three letters of the word <q>integer</q> to define an integral type.</p>
                        </feedback>
                    </condition>
                </var>
                <var>
                    <condition number="5">
                        <feedback>
                            <p>An integer variable may be initialized to a value.</p>
                        </feedback>
                    </condition>
                    <condition string=".*">
                        <feedback>
                            <p>Use <c>5</c> as the initial value of the variable.</p>
                        </feedback>
                    </condition>
                </var>
            </setup>
        </exercise>

        <exercise label="fillin-case-insensitive">
            <title>Fill-In, Case-Insensitive Answer</title>

            <statement>
                <p>The word <var/> is the opposite of <q>yes</q>.  (Try a mixture of upper and lower-case letters.)</p>
            </statement>
            <setup>
                <var case="insensitive">
                    <!-- Note, no "p" in "feedback" -->
                    <condition string="no">
                        <feedback>The correct answers are  no, No, nO, and NO.</feedback>
                    </condition>
                    <condition string=".*">
                        <feedback>Incorrect.</feedback>
                    </condition>
                </var>
            </setup>
        </exercise>

        <exercise label="fillin-decimal">
            <title>Fill-In, Decimal Answer</title>

            <statement>
                <p>The decimal number <var/> is an approximation of <m>\sfrac{1}{3}</m> to within three significant figures.  (<url href="https://en.wikipedia.org/wiki/Significant_figures" visual="en.wikipedia.org/wiki/Significant_figures">Wikipedia</url>).</p>
            </statement>
            <setup>
                <var>
                    <!-- Note, no "p" in "feedback" -->
                    <condition number="0.333" tolerance="0.0005">
                        <feedback>
                            <p>Any value in the interval <m>0.333\pm 0.0005</m> is correct.</p>
                        </feedback>
                    </condition>
                    <condition string=".*">
                        <feedback>
                            <p>Incorrect. Did you provide three <em>significant figures</em>?</p>
                        </feedback>
                    </condition>
                </var>
            </setup>
        </exercise>
    </exercises>

    <exercises>
        <title>Hodgepodge></title>

        <exercise label="true-false-exercise-with-tasks-in-exercises">
            <title>With Tasks in an Exercises Division</title>
            <introduction>
                <p>Structured with task, recycled earlier from earlier, to make sure that the tasks do not get counted as Runestone reading activities (since they are inside an <tag>exercise</tag> inside of an <tag>exercises</tag> division.</p>
            </introduction>

            <task label="true-false-task-in-exercises">
                <title>True/False</title>
                <idx>vector space</idx>
                <statement correct="no">
                    <p>Every vector space has finite dimension.</p>
                </statement>
                <feedback>
                    <p>The vector space of all polynomials with finite degree has a basis, <m>B = \{1,x,x^2,x^3,\dots\}</m>, which is infinte.</p>
                </feedback>
                <hint>
                    <p><m>P_n</m>, the vector space of polynomials with degree at most <m>n</m>, has dimension <m>n+1</m> by <xref ref="theorem-exponent-laws"/>.  [Cross-reference is just a demo, content is not relevant.]  What happens if we relax the defintion and remove the parameter <m>n</m>?</p>
                </hint>
            </task>

            <task label="short-answer-task-in-exercises">
                <statement>
                    <p>Explain your reasoning in the previous question.</p>
                </statement>
                <response/>
            </task>
        </exercise>
    </exercises>

    <section xml:id="exercises-timed">
        <title>Exercises that are Timed</title>

        <p>This is a section that merely explains and holds an <tag>exercises</tag> division, which will be at the level of a <tag>subsection</tag>.  There is a <attr>time-limit</attr> attribute on <tag>exercises</tag>, set to the value <c>10</c>, which implies (a) the collection of (two) exercises is a <q>timed exam</q> when hosted on Runestone, and (b) a student will have 10 minutes to complete the collection.</p>

        <p>Showing results, showing feedback, displaying a timer, and allowing pausing are all enabled by default.  To disable any of these features, set the corresponding attributes on the <tag>exercises</tag> division, <attr>results</attr>, <attr>feedback</attr>, <attr>timer</attr>, <attr>pause</attr>, to the value <c>no</c>.  As a test, we have turned off pausing.  Don't panic!</p>

        <p>Of course, if you are not viewing this while online and hosted on a Runestone server, then these exercises will not look any different than in other places.</p>

        <p>(Since this is an unstructured division, the number of the <tag>exercises</tag> is not displayed when born.  It does <em>have</em> a number, which is the same as the enclosing <tag>section</tag>.  To wit: <xref ref="exercises-timed"/> versus <xref ref="timing-exercises"/>.)</p>

        <exercises xml:id="timing-exercises" label="timed-exercises" time-limit="10" pause="no">
            <title>Timed Exercises</title>

            <introduction>
                <p>You have 10 minutes to do these exercises when hosted online on a Runestone server.</p>
            </introduction>

            <exercise label="vector-space-dimension-timed">
                <title>True/False</title>
                <idx>vector space</idx>
                <statement correct="no">
                    <p>Every vector space has finite dimension.</p>
                </statement>
                <feedback>
                    <p>The vector space of all polynomials with finite degree has a basis, <m>B = \{1,x,x^2,x^3,\dots\}</m>, which is infinte.</p>
                </feedback>
                <hint>
                    <p><m>P_n</m>, the vector space of polynomials with degree at most <m>n</m>, has dimension <m>n+1</m> by <xref ref="theorem-exponent-laws"/>.  [Cross-reference is just a demo, content is not relevant.]  What happens if we relax the defintion and remove the parameter <m>n</m>?</p>
                </hint>
            </exercise>

            <exercise label="multiple-choice-not-randomized-timed">
                <title>Multiple-Choice, Not Randomized, One Answer</title>
                <idx>stop signs</idx>
                <statement>
                    <p>What color is a stop sign?</p>
                </statement>
                <!-- to appear as problem with potentially multiple correct -->
                <!-- answers (even though there is only one), use           -->
                <!--                                                        -->
                <!--     <choices multiple-correct="yes">                   -->
                <!--                                                        -->
                <choices>
                    <choice>
                        <statement>
                            <p>Green</p>
                        </statement>
                        <feedback>
                            <p>Green means <q>go!</q>.</p>
                        </feedback>
                    </choice>
                    <choice correct="yes">
                        <statement>
                            <p>Red</p>
                        </statement>
                        <feedback>
                            <p>Red is universally used for prohibited activities or serious warnings.</p>
                        </feedback>
                    </choice>
                    <choice>
                        <statement>
                            <p>White</p>
                        </statement>
                        <feedback>
                            <p>White might be hard to see.</p>
                        </feedback>
                    </choice>
                </choices>
                <hint>
                    <p>What did you see last time you went driving?</p>
                </hint>
                <hint>
                    <p>Maybe go out for a drive?</p>
                </hint>
            </exercise>
        </exercises>
    </section>

    <section xml:id="interactive-projects">
        <title>Projects and Friends</title>

        <p><q>PROJECT-LIKE</q> refers to the elements/blocks <tag>project</tag>, <tag>activity</tag>, <tag>activity</tag>, and <tag>exploration</tag>.  They are very similar to <tag>exercise</tag>, and here we stress that they can be interactive in all the same ways an <tag>exercise</tag> can.  Key differences are that they are blocks, and so are peers of other blocks like paragraphs and examples, and are children of divisions.  By default they have their own numbering scheme, though we expect this to convert to an elective behavior.</p>

        <p>Both <tag>exercise</tag> and PROJECT-LIKE can be structured with <tag>task</tag>.  It would be natural to have a <tag>project</tag> with multiple <tag>task</tag>, each a possibly different interactive problem type.  We expect that to be possible soon.  For now, <tag>exercise</tag> and <tag>project</tag> (and friends) need to be structured with a <tag>statement</tag> (and their associated signal) in order to be interactive.</p>

        <activity label="activity-multiple-choice-multiple-answers">
            <title>Multiple-Choice, Not Randomized, Multiple Answers</title>
            <idx>stop signs</idx>
            <statement>
                <p>Which colors might be found in a rainbow?  (Note that the radio buttons now allow multiple buttons to be selected.)</p>
            </statement>
            <choices>
                <choice correct="yes">
                    <statement>
                        <p>Red</p>
                    </statement>
                    <feedback>
                        <p>Red is a definitely one of the colors.</p>
                    </feedback>
                </choice>
                <choice correct="yes">
                    <statement>
                        <p>Yellow</p>
                    </statement>
                    <feedback>
                        <p>Yes, yellow is correct.</p>
                    </feedback>
                </choice>
                <choice>
                    <statement>
                        <p>Black</p>
                    </statement>
                    <feedback>
                        <p>Remember the acronym<ellipsis/><acro>ROY G BIV</acro>.  <q>B</q> stands for blue.</p>
                    </feedback>
                </choice>
                <choice correct="yes">
                    <statement>
                        <p>Green</p>
                    </statement>
                    <feedback>
                        <p>Yes, green is one of the colors.</p>
                    </feedback>
                </choice>
            </choices>
            <hint>
                <p>Do you know the acronym<ellipsis/><acro>ROY G BIV</acro> for the colors of a rainbow, and their order?</p>
            </hint>
        </activity>

        <p>Now an <tag>exercise</tag> with two <tag>task</tag>.  Since the latter is a short-answer question, it will only be interactive on a capable platform.</p>

        <exercise label="true-false-exercise-with-tasks">
            <title>True/False and Explain</title>
            <introduction>
                <p>Structured with task, we can have an introduction, but this does not migrate with the interactive portions.</p>
            </introduction>

            <task label="true-false-task">
                <title>True/False</title>
                <idx>vector space</idx>
                <statement correct="no">
                    <p>Every vector space has finite dimension.</p>
                </statement>
                <feedback>
                    <p>The vector space of all polynomials with finite degree has a basis, <m>B = \{1,x,x^2,x^3,\dots\}</m>, which is infinte.</p>
                </feedback>
                <hint>
                    <p><m>P_n</m>, the vector space of polynomials with degree at most <m>n</m>, has dimension <m>n+1</m> by <xref ref="theorem-exponent-laws"/>.  [Cross-reference is just a demo, content is not relevant.]  What happens if we relax the defintion and remove the parameter <m>n</m>?</p>
                </hint>
            </task>

            <task label="short-answer-task">
                <statement>
                    <p>Explain your reasoning in the previous question.</p>
                </statement>
                <response/>
            </task>
        </exercise>

        <p>Now an <tag>exploration</tag> nested two-deep with <em>the same two questions</em>, two times each, just for testing purposes.</p>

        <exploration label="exploration-two-deep">
            <title>Exploring Two-Deep</title>

            <task>
                <title>First Iterations of Each</title>

                <task label="task-multiple-choice-first">
                    <title>Multiple-Choice, Not Randomized, One Answer (First Copy)</title>
                    <idx>stop signs</idx>
                    <statement>
                        <p>What color is a stop sign?</p>
                    </statement>
                    <choices>
                        <choice>
                            <statement>
                                <p>Green</p>
                            </statement>
                            <feedback>
                                <p>Green means <q>go!</q>.</p>
                            </feedback>
                        </choice>
                        <choice correct="yes">
                            <statement>
                                <p>Red</p>
                            </statement>
                            <feedback>
                                <p>Red is universally used for prohibited activities or serious warnings.</p>
                            </feedback>
                        </choice>
                        <choice>
                            <statement>
                                <p>White</p>
                            </statement>
                            <feedback>
                                <p>White might be hard to see.</p>
                            </feedback>
                        </choice>
                    </choices>
                    <hint>
                        <p>What did you see last time you went driving?</p>
                    </hint>
                    <hint>
                        <p>Maybe go out for a drive?</p>
                    </hint>
                </task>

                <task label="task-active-code-first">
                    <title>Python ActiveCode (First Copy)</title>
                    <statement>
                        <p>Run the following program and observe the information provided at each step.</p>
                    </statement>
                    <program interactive="activecode" language="python">
                        <input>
                        for i in range(10):
                            print(i)
                        </input>
                    </program>
                    <answer>We're still not really sure.</answer>
                </task>
            </task>

            <task>
                <title>Second Iterations of Each</title>

                <task label="task-multiple-choice-second">
                    <title>Multiple-Choice, Not Randomized, One Answer (Second Copy)</title>
                    <idx>stop signs</idx>
                    <statement>
                        <p>What color is a stop sign?</p>
                        <p>We include a spurious Python <tag>program</tag> element in the <tag>statement</tag> which should never convert this from a multiple-choice question into a programming exercise (on any host), but should still get syntax highlighting as part of rendering the exercise.</p>
                        <program xml:id="python-in-statement" language="python">
                            <input>
                            sum = 0
                            sum += 6
                            for i in range(sum):
                                print("Hello, World!")
                            </input>
                        </program>
                    </statement>
                    <choices>
                        <choice>
                            <statement>
                                <p>Green</p>
                            </statement>
                            <feedback>
                                <p>Green means <q>go!</q>.</p>
                            </feedback>
                        </choice>
                        <choice correct="yes">
                            <statement>
                                <p>Red</p>
                            </statement>
                            <feedback>
                                <p>Red is universally used for prohibited activities or serious warnings.</p>
                            </feedback>
                        </choice>
                        <choice>
                            <statement>
                                <p>White</p>
                            </statement>
                            <feedback>
                                <p>White might be hard to see.</p>
                            </feedback>
                        </choice>
                    </choices>
                    <hint>
                        <p>What did you see last time you went driving?</p>
                    </hint>
                    <hint>
                        <p>Maybe go out for a drive?</p>
                    </hint>
                </task>

                <task label="task-active-code-second">
                    <title>Python ActiveCode (Second Copy)</title>
                    <statement>
                        <p>Run the following program and observe the information provided at each step.</p>
                    </statement>
                    <program interactive="activecode" language="python">
                        <input>
                        for i in range(10):
                            print(i)
                        </input>
                    </program>
                    <answer>We're still not really sure.</answer>
                </task>
            </task>
        </exploration>

        <p>This is an <tag>exercise</tag> which has been structured deeply with <tag>task</tag>.  It is here to allow for testing a tabbed viewer presentation in online outputs.</p>

        <exercise xml:id="exercise-structured" label="very-structured-exercise">
            <title>A very structured exercise</title>

            <introduction>
                <p>This is an over-arching introduction to the whole exercise.  We follow with some tasks.  In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
            </introduction>

            <task>
                <title>A super-simple task</title>
                <p>This first task is very simple, just a paragraph.  In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
            </task>

            <task>
                <p>Now three paragraphs.  In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                <p>In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                <p>In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
            </task>

            <task>
                <title>A title of a task that has a subtask with an <tag>answer</tag> for the Solutions</title>
                <introduction>
                    <p>This second task is further divided by more tasks.  This is its introduction.  In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                    <p>In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                </introduction>
                <task>
                    <title>A task with a title and an <tag>answer</tag> for the Solutions</title>
                    <statement>
                        <p>A really simple subtask.  In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                        <p>A short paragraph, before an answer.</p>
                    </statement>
                    <answer>
                        <p>With a proof.</p>
                        <proof>
                            <p>In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                        </proof>
                        <p>And a bit more to say.</p>
                    </answer>
                </task>
                <task>
                    <statement>
                        <p>A subtask with an answer.  In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                    </statement>
                    <answer>
                        <p>Right!  In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                    </answer>
                </task>
                <task>
                    <introduction>
                        <p>Three simple sub-sub-tasks.  In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                    </introduction>
                    <task>
                        <p>First subsubtask.  Short paragraph.</p>
                    </task>
                    <task>
                        <title>A second three-deep subsubtask!</title>
                        <p>Second subsubtask.  In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                        <p>In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                    </task>
                    <task>
                        <p>Third subsubtask.  In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                        <p>In interdum suscipit ullamcorper</p>
                        <p>In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                    </task>
                    <conclusion>
                        <p>The conclusion of the structured subtask.  In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                    </conclusion>
                </task>
                <task>
                    <p>A simple task as the last subtask.  In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                </task>
                <conclusion>
                    <p>This concludes our structured second task.  In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                </conclusion>
            </task>

            <task>
                <statement>
                    <p>This third top-level task is intermediate in complexity, you are reading the <c>statement</c>, which is followed by more items. In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                </statement>
                <hint>
                    <p>One hint.  In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                    <p>In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                </hint>
                <answer>
                    <p>First answer.  In interdum suscipit ullamcorper.</p>
                </answer>
                <answer>
                    <p>Second answer.  In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                    <p>In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                    <p>In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                </answer>
                <solution>
                    <p>At last, the solution.  In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
                </solution>
            </task>

            <conclusion>
                <p>This is a conclusion where you could summarize the exercise.  In interdum suscipit ullamcorper. Morbi sit amet malesuada augue, id vestibulum magna. Nulla blandit dui metus, malesuada mollis sapien ullamcorper sit amet. Nulla at neque nisi. Integer vel porta felis.</p>
            </conclusion>
        </exercise>
    </section>

    <section>
        <title>Expedited Samples</title>

        <p>We hack in various interactive Runestone exercise types while <pretext/> markup evolves to cover more of Runestone's repertoire.  In static output these will just produce a message.  In <init>HTML</init> they may be interactive simply in a browser, or they may require being hosted on a Runestone server in order to perform.</p>

        <p>CodeLens for a Python program:</p>

        <exercise runestone='over_codelens1' />

        <p>CodeLens for a Java program.  Supplied in source with trace data built beforehand on a Runestone server:</p>

        <exercise runestone='asgn_viz1' />

    </section>

    <reading-questions>

        <exercise label="simple-reading-question">
            <statement>
                <p>This is a simple question.  Does this look like a short answer question?</p>
                <p>Both questions in this <q>reading-questions</q> division should render in an interactive <q>short answer</q> form on a capable platform.</p>
            </statement>
            <response/>
            <hint>
                <p>Shouldn't be hard!</p>
            </hint>
        </exercise>

        <exercise label="second-reading-question" attachment="yes">
            <statement>
                <p>And a second reading question, so we can test having more than one.  Specifically to be certain each goes into the manifest properly.  How about some math now, <m>a^2+b^2=c^2</m>.  Is that all right?</p>
            </statement>
            <response/>
        </exercise>
    </reading-questions>

    <section xml:id="atomic-video">
        <title>YouTube Video Embedding</title>

        <p>An <tag>video</tag> can be placed in five different ways:<ol>
            <li>all by itself, as a peer of <tag>p</tag> typically, with layout control,</li>
            <li>inside a <tag>figure</tag>, earning a number and caption,</li>
            <li>inside a <tag>sidebyside</tag>, with size and layout configured,</li>
            <li>inside a <tag>figure</tag> inside a <tag>sidebyside</tag>, with size and layout configured, with a number and caption, and</li>
            <li>inside a <tag>figure</tag> inside a <tag>sidebyside</tag> inside a <tag>figure</tag>, with size and layout configured, with a number and caption, but now sub-numbered ((a), (b), (c),<ellipsis/>).</li>
        </ol>Examples of each, and more.</p>

        <p>A YouTube video is embedded much differently when hosted on a Runestone server, so that an <init>API</init> is available to report reader (student) interactions.  We are testing here the various possibilities.</p>



        <p>All by itsef, with no layout specified, so showing the default size and placement.  Vivamus in congue massa. Morbi condimentum ac magna at accumsan. Vestibulum ac augue eu lorem semper gravida.</p>

        <video xml:id="yt-list-vars-one" label="youtube-list-vars-one" youtube="X1-UNHUajfk"/>

        <p>Width set at 40%, so equal margins and thus centered.  Aenean faucibus augue tellus, et sollicitudin tortor finibus non. Maecenas semper dolor quis diam placerat, iaculis sollicitudin augue finibus. Vestibulum facilisis ligula lectus, ac tristique nisl aliquet non.</p>

        <video xml:id="yt-list-vars-two" label="youtube-list-vars-two" youtube="X1-UNHUajfk" width="40%"/>

        <p>Asymmetric margins of 20% and 40% given, implying 40% width, equal to previous instance.  Vivamus suscipit diam eget mi cursus viverra.</p>

        <video xml:id="yt-list-vars-three" label="youtube-list-vars-three" youtube="X1-UNHUajfk" margins="20% 40%" />

        <p>As a plain component of a <tag>sidebyside</tag>.  Widths here are 20% and 30%, margins and gaps are automatic, default alignment on top edges.  Nulla pharetra imperdiet elit, in sodales nibh blandit ultricies. Maecenas efficitur ac felis ut pharetra.</p>

        <sidebyside widths="20% 30%">
            <video xml:id="yt-list-vars-four" label="youtube-list-vars-four" youtube="X1-UNHUajfk"/>
            <video xml:id="yt-list-vars-five" label="youtube-list-vars-five" youtube="X1-UNHUajfk"/>
        </sidebyside>

        <p>Inside a <tag>figure</tag> with no adjustments, so default behavior.  Note how a <tag>figure</tag> occupies the entire width of the page, so then does the caption.</p>

        <figure>
            <caption>List Variables</caption>
            <video xml:id="yt-list-vars-six" label="youtube-list-vars-six" youtube="X1-UNHUajfk"/>
        </figure>

        <p>Inside a <tag>figure</tag> with asymmetric (large) margins of 30% and 60%.  Quisque finibus augue sit amet facilisis fringilla. Aenean faucibus augue tellus, et sollicitudin tortor finibus non.</p>

        <figure>
            <caption>List Variables</caption>
            <video xml:id="yt-list-vars-seven" label="youtube-list-vars-seven" youtube="X1-UNHUajfk" margins="30% 60%"/>
        </figure>

        <p>Inside figures inside a <tag>sidebyside</tag>.  Same widths as previous <tag>sidebyside</tag> but alignment on bottoms of the panels, to partially align captions.  Note how the captions are constrained in width by the width of the panels of the side-by-side.</p>

        <sidebyside widths="20% 30%" valign="bottom">
            <figure>
                <caption>List Variables</caption>
                <video xml:id="yt-list-vars-eight" label="youtube-list-vars-eight" youtube="X1-UNHUajfk"/>
            </figure>
            <figure>
                <caption>List Variables (Again)</caption>
                <video xml:id="yt-list-vars-nine" label="youtube-list-vars-nine" youtube="X1-UNHUajfk"/>
            </figure>
        </sidebyside>

        <p>Identical code to previous example, but now wrapped in an overall <tag>figure</tag>, which has its own caption and number, leaving the interior figures to be sub-numbered.  Cross-references use the full number: <xref ref="ups-video" text="type-global"/>.</p>

        <figure>
            <caption>Amalgamation of Videos</caption>
            <sidebyside widths="20% 30%" valign="bottom">
                <figure>
                    <caption>List Variables</caption>
                    <video xml:id="yt-list-vars-ten" label="youtube-list-vars-ten" youtube="X1-UNHUajfk"/>
                </figure>
                <figure xml:id="ups-video">
                    <caption>List Variables</caption>
                    <title>List Variables</title>
                    <video xml:id="yt-list-vars-eleven" label="youtube-list-vars-eleven" youtube="X1-UNHUajfk"/>
                </figure>
            </sidebyside>
        </figure>
    </section>

</chapter>

