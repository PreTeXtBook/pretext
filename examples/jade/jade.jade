doctype xml

mathbook

    docinfo
        macros
            | \newcommand{\doubler}[1]{2#1}

    article(xml:id="jade")
        title Jade meets MathBook XML

        frontmatter
            titlepage
                author
                    personname Harald Schilly

                date
                    today/

            abstract
                p.
                    This is a very short demo, how writing MathBook XML
                    can be simplified by using Jade <xref ref="biblio-jade" />.

        introduction
          p.
              Wouldn't it be nice, if you do not have to deal with verbose XML tags?
              Write paragraphs that do stand more out and aren't cluttered by too much overhead?
              What if, you can start writing in version control (Git) friendly multiple line documents?
              You are finally able to limit yourself to 80 character line lengths and
              make the source of your documents look more like a tidy
              Python <xref ref="biblio-python"/> program.
          p.
              Additionally, all this works well together with Jade's include statement,
              mixin <q>macros</q> and much more.
          p.
              ... and yes, inline XML tags do just <q>work</q>, too!

        section(xml:id="section-textual")
            title Some Demo Text

            p.
                This is just copied from the minimal demo.
                The interesting thing to see here is the source of this in the <c>jade.jade</c> file.

            p.
                Now a single paragraph inside a titled section of the article.
                Which has some text on a second line.
                ... and a bit of <em>emphasizing</em>.

            p.
                The code to accomplish this looks like this:

            pre.
                section(xml:id="section-textual")
                  title Some Demo Text

                  p.
                    This is just copied from the minimal demo.
                    The interesting thing to see here is the source of this in the &lt;c&gt;jade.jade&lt;/c&gt; file.

                  p.
                    Now a single paragraph inside a titled section of the article.
                    Which has some text on a second line.
                    ... and a bit of &lt;em&gt;emphasizing&lt;/em&gt;.

        section(xml:id="section-interesting")
            title.
                A Bit More Interesting

            p The previous section (<xref ref="section-textual" autoname="yes"/>) was a bit boring.

            p
                | This paragraph has some inline math, a Diophantine equation, 
                m x^2 + \doubler{y^2} = z^2
                | , and some display math about infinite series: <me>\sum_{n=1}^\infty\,\frac{1}{n^2} = \frac{\pi^2}{6}.</me>
                | Look at the Jade source to see how <latex /> macros are employed universally across all possible output formats.

            p
                | We could even write a formula
                me \int_0^\infty 3 x^2 + 1 \mathrm{d}x
                | inside a p-tag text on its separate line prefixed by <c>me</c> only!
            p   This looks like that:
            pre.
                p
                | We could even write a formula
                me \int_0^\infty 3 x^2 + 1 \mathrm{d}x
                | inside a p-tag text on its separate line prefixed by &lt;c&gt;me&lt;/c&gt; only!

        section(xml:id="section-computation")
            title Computation

            p.
                The following is a chunk of Sage code.
                Your output format will dictate what you see next.
                In print, you will see expected output.
                In HTML you will have an executable, and editable, Sage Cell to work with.
                In a SageMathCloud worksheet, you will be able to execute and edit the code with all the other features of SageMathCloud.
                Note that if you include the expected output in your source,
                then you can test the example to verify that the behavior of Sage has not changed.

            sage
                input
                    | A = matrix(4,5, srange(20))
                    | A.rref()
                output
                    | [ 1  0 -1 -2 -3]
                    | [ 0  1  2  3  4]
                    | [ 0  0  0  0  0]
                    | [ 0  0  0  0  0]

        section(xml:id="section-jade")
            title Jade

            p.
                Jade is a template engine for Node, see <xref ref="biblio-jade" />.

            include ./jade-include.jade

        backmatter
            references
                title References
                biblio(type="raw" xml:id="biblio-jade").
                    The magic behind all this is provided by the <url href="http://jade-lang.com/">Jade Template Engine</url>.
                biblio(type="raw" xml:id="biblio-python").
                    Python Programming Language.
