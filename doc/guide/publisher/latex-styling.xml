<?xml version="1.0" encoding="UTF-8"?>

<!--   This file is part of the documentation of PreTeXt      -->
<!--                                                          -->
<!--      PreTeXt Author's Guide                              -->
<!--                                                          -->
<!-- Copyright (C) 2013-2017  Robert A. Beezer, David Farmer  -->
<!-- See the file COPYING for copying conditions.             -->

<chapter xml:id="latex-styles">
    <title><latex /> Styles</title>
    <idx><h>style</h><h>print</h></idx>


    <introduction>
        <p>Print and <init>PDF</init> output is created when <pretext/> outputs a <latex/> file, which can subsequently be easily converted to <init>PDF</init> with engines like <c>pdflatex</c> and <c>xelatex</c>.  There are many ways to influence the style (look, appearance) of this output, enhancing the content, but without changing it.  This chapter is directed at publishers who desire to create an attractive and consistent design for their books or articles.</p>

        <p>Please read this chapter thorougly once before embarking.  Certain important points are made in certain contexts, yet are universally applicable.  If you cherry-pick, you will miss them.  Note also that some simple changes, like font size, are described in <xref ref="pdf-print"/>.</p>
    </introduction>

    <section>
        <title>Preparation</title>

        <p>We do not encourage authors to make small adjustments in style, especially if they have few skills in book design.  Instead, they should choose a design built by others that will fit their needs and desires.  We do encourage publishers with design skills to create complete and harmonious designs, and to donate these back to <pretext/> with an open license, for use by all authors.  This chapter assumes you are such a publisher.  Further, it assumes you have certain technical skills.  Specifically<ul>
            <li>Good familiarity with basic <tex/> and <latex/>.</li>
            <li>The ability to debug <latex/> compilations gone bad.</li>
            <li>Willingness to study several <latex/> packages that may be new to you.</li>
            <li>Willingess to mimic and experiment with basic eXtensible Stylsheet Language (<init>XSL</init>).</li>
        </ul>Fortunately, it is easy to start small, get good results, and expand your skills further.</p>

        <p>Begin by creating a file that is a new <init>XSL</init> stylesheet.  You can likely safely copy a mature one from the <c>xsl/latex</c> directory.  Be certain to keep the first few declarations.  The <tag>xsl:import</tag> is critical, since it will <q>pull in</q> all the basic code for the <pretext/> conversion to <latex/>.  You will be overriding and appending to that code (which <pretext/> has made straightforward).  You can start with an absolute path from your filesystem root, but once public a relative path will be necessary.  Remove all of the <tag>xsl:template</tag> elements, leaving a hollow shell to begin working with.</p>

        <p>What we are doing here is similar to the discussion of <q>thin <init>XSL</init> stylesheets</q> in the <url href="https://pretextbook.org/doc/author-guide/html/processing-thin-xsl.html">Author's Guide</url>, only thicker.  String parameters are also described in this guide, at <xref ref="processing-parameters"/>.</p>
    </section>

    <section>
        <title>Overview</title>

        <p>Some changes in style are effected by setting string parameters that exist for use at the command line.  However, the more flexible features come from the selection by <pretext/> of certain <latex/> packages.  These have been chosen for their flexibility, maturity, and stability.  They should be part of a full <latex/> installation, especially one based on TeXLive.  We presume each author has a similar installation.  Please let us know of any exceptions.  Please try to avoid requiring new packages as part of your style, and if necessary, be sure they are mainstream ones.  Start a discussion on the development forum if you think it is warranted or necessary.  It may be difficult and error-prone for you to employ and integrate an obscure package, and it will cause problems for authors who want to use your style.</p>

        <p>This is an incomplete list of the primary packages we employ, and their general purpose.  They, and their documentation, can be easily found at the <url href="https://ctan.org/">Comprehensive <tex/> Archive Network</url>, aka <init>CTAN</init>.</p>

        <table>
            <title>Principal <latex/> packages used for styles</title>

            <tabular>
                <row>
                    <cell><c>geometry</c></cell>
                    <cell>Specification of the sizes of paper, margins, headers and footers</cell>
                </row>
                <row>
                    <cell><c>titleps</c></cell>
                    <cell>Headers and footers (part of <c>titlesec</c>)</cell>
                </row>
                <row>
                    <cell><c>titlesec</c></cell>
                    <cell>Titles of divisions</cell>
                </row>
                <row>
                    <cell><c>tcolorbox</c></cell>
                    <cell>Boxes, colors, <etc/> for <tag>example</tag>, <tag>remark</tag>, <etc/></cell>
                </row>
            </tabular>
        </table>
    </section>

    <section xml:id="page-shape">
        <title>Page Shape</title>

        <p>Various dimensions of a printed page, including the page itself, may be adjusted using the <c>geometry</c> package, so study the documentation of this package to explore possibilities.  The options of this package may be also set on the command line.  To make options part of your style, place the <tag>xsl:param</tag> declaration in your stylesheet as follows (note the two sets of quotes):<cd>
            <cline>&lt;xsl:param name="latex.geometry" select="'foo'"/&gt;</cline>
        </cd>This will have the effect of placing the following line into the preamble of the resulting <latex/> output file, in the right place:<cd>
            <cline>\geometry{foo}</cline>
        </cd>Of course, you will want to use something meaningful, such as<cd>
            <cline>&lt;xsl:param name="latex.geometry" select="'a4paper,total={16cm,25cm}'"/&gt;</cline>
        </cd>to produce in the <latex/> output<cd>
            <cline>\geometry{a4paper,total={16cm,25cm}}</cline>
        </cd></p>

        <p>This is typical and illustrates two important universal points.  First, <pretext/> puts surrounding infrastructure in place.  In this case the <c>geometry</c> package is loaded, and in an order that does not cause conflicts, plus the <c>\geometry{}</c> command itself is placed and output by <pretext/>.  As a style writer, you simply provide the package options you desire.  Second, <q>garbage in, garbage out.</q>  It is very easy to make a typo in your style, and have the <latex/> compilation fail.  This is why we assume you are comfortable with <latex/> compilation and debugging, and not every author should be a style writer.</p>

        <p>Set the document font size first, for this will influence later choices.  The string parameter, <c>latex.font.size</c> (which has <c>pt</c> as part of the value) will set an optimal line width.  This line width should translate to about 75 characters per line, at the upper end of recommendations for an optimal width.  It will also match closely (but not exactly) to line lengths in <init>HTML</init> output.  You can look into the <latex/> output before you experiment to see the value used when the stock <c>\geometry{}</c> command is issued.  You are certainly able to override this width, but read the next paragraph carefully.</p>

        <p>This raises two important more universal points.  You should expect to repeatedly examine the <latex/> output as you develop a style.  And most important<mdash/>are you tempted to use a small font, and <em>increase</em> the line width so as to cram more material onto the page, so your book is shorter, and sells via print-on-demand for $7 rather than $8?  Then you misunderstood that there are time-tested recommendations for the optimal number of characters per line for human readers, and we just counseled you that <pretext/> is <em>already at the high end of these recommendations</em>.  You have a certain freedom as a style writer.  Use it responsibly.  Enhance the content provided by authors, don't degrade it.</p>

        <p>This is the place to think about headers and footers on the page, since you will want to make room for them, and with spacing away from the primary content.  See <xref ref="style-headers-footers"/>.</p>
    </section>

    <section xml:id="style-headers-footers">
        <title>Headers and Footers</title>

        <p>The <c>titleps</c> package cooperates with <q>traditional</q> <latex/> divisions, such as <c>\chapter</c> and <c>\section</c>, and the <c>titlesec</c> package, to pick up the titles of divisions automatically and migrate them to headers and footers on a page.  The <c>ps</c> is short for <q>page style</q>, and the documentation is a <init>PDF</init> file <em>within</em> the distribution for the <c>titlesec</c> package.  Primarily, we let <latex/> manage the selection of its page styles for various pages of an overall document: <c>empty</c>, <c>plain</c>, <c>headings</c>, and <c>myheadings</c>.  <pretext/> does some management in the front matter.  As a style writer it is not your concern where these styles are employed, but you do influence what information they contain and were it is placed on a page.</p>

        <p>Add an <tag>xsl:template</tag> to your stylesheet that begins with<cd>
            <cline>&lt;xsl:template match="book" mode="titleps-style"&gt;</cline>
        </cd>This would then set a collection of commands from the <c>titleps</c> package for a <tag>book</tag>, which will be placed in the correct place in the <latex/> preamble.   (See <xref ref="style-xsl-101"/>.)  You can <c>renew</c> existing page styles or create <c>new</c> pagestyles.  However you should always make your last line a declaration of the overall page style, for example,<cd>
            <cline>\pagestyle{headings}</cline>
        </cd>  Note that a book may use the empty and plain styles for some pages, so you may need to renew those styles to be harmonious with other changes you have made.</p>

        <p>The definition of this template will override (replace) the definition given in any imported stylesheet.  You can replace the value of the <attr>match</attr> attribute with <c>article</c> to make your style apply to a <pretext/> <tag>article</tag>.  If your style will be used for both books and articles, and you want the style to be identical for both, you can expand the <attr>match</attr> attribute to have the value <c>article|book</c>.  To have different styles for a book versus an article, make two separate templates.</p>

        <p>The <c>titleps</c> package allows at least twelve options per page style:  even-numbered page versus odd-numbered page with two-sided printing; left, center, right; header or footer.  There are semi-automatic customizable rules, variable widths allowing hanging styles, choices of marks (division at page-start versus division at page-end versus new-division-mid-page, including combinations at the same time), and more.  Note that the <latex/> system of <c>\markleft</c> and <c>\markboth</c> has been abandonded.  (Did I hear you say, <q>Good riddance!</q>?)</p>

        <p>
          Some care must be taken with using <c>\thechapter</c> to get the chapter number, since strange things happen in the frontmatter and backmatter, where chapters are numberless.   One solution is to use <c>\ifthechapter{}{}</c> which allows you to control the behavior dependent on whether there is a current chapter number.  For example, if you wanted the center of the even-numbered pages to contain <q>Chapter 3: Derivatives</q> you would use
            <cd>\sethead[][\ifthechapter{Chapter \thechapter: }{}\chaptertitle][]{}{}{}</cd>
          which would then just put <q>Index</q> in the index, and nothing at all in the preface.
          A similar approach could be used to deal with section numbers and titles in the case that the introduction of a chapter is multiple pages, using <c>\ifthesection{}{}</c>.
        </p>

        <p>Note also that the macro <c>\chaptertitlename</c> will resolve to <c>Chapter</c> or <c>Appendix</c> as necessary.</p>
    </section>

    <section>
        <title>Titles of Divisions</title>

        <p>The <c>titlesec</c> package cooperates with <q>traditional</q> <latex/> divisions, such as <c>\chapter</c> and <c>\section</c>, to style the start of each division, containing its <pretext/> <tag>title</tag> and in most instances, its number.  If a division is credited to (multiple) <tag>author</tag>, then that information can be styled, and there are plans (2018-09-30) for epigraphs.</p>

        <p><pretext/> manages numbered versus unnumbered divisions, the correct level for one-off divisions like a <tag>preface</tag> or <tag>appendix</tag>, and the specialized divisions such as <tag>exercises</tag> and <tag>references</tag>.  A style writer creates two styles at each level of the hierarchy, for a numbered variant, and an unnumbered variant.  <c>titlesec</c> uses a <c>numberless</c> key to indicate the latter.  A named template, such as<cd>
            <cline>&lt;xsl:template name="titlesec-section-style"&gt;</cline>
        </cd>would produce text containing complete <c>titlesec</c> commands <c>\titleformat</c> and <c>\titlespacing</c> in both numbered and unnumbered variants.</p>

        <p>There are five <latex/> macros created by <pretext/> at the start of each division.  For example, <c>\authorsptx</c> is a comma-separated list of the content of all the <tag>author</tag> elements for the division, in the order given.  Look in the <latex/>output to find the others nearby.  A robust style will include this information, even if the first use of the style may not have any divisions credited to others.</p>

        <p>The table of contents and the index are created by a single <latex/> macro.  This creates a small technical challenge, since <pretext/> never has a chance to write the contents of the heading and must take what it is given.  The upshot is that the <c>\titleptx</c> macro will be wrong or empty.  So instead, use the <c>titlesec</c> device of using the macro parameter <c>#1</c> for the title in the correct argument of <c>\titleformat</c>.  We have enabled this possibility through the package's <c>explicit</c> option.  We believe the <c>numberless</c> variant of a <tag>chapter</tag> of a <tag>book</tag>, and the <c>numberless</c> variant of a <tag>section</tag> of an <tag>article</tag>, are the only places this is necessary.  2019-09-30:  we will contemplate if this should be the rule and the <c>\titleptx</c> macro will go away.  Advise if you see a good answer, either way.</p>

        <p>2019-09-30:  these templates are highly likely to break into two modes (format and spacing), with a <attr>match</attr> that can react to <tag>chapter</tag>, <tag>section</tag>, <etc/>, perhaps differently for books versus articles.  The change will only imply some minor editing to achieve the same end result, so don't hold back waiting.</p>
    </section>

    <section>
        <title>Environments and Blocks</title>

        <p>Objects like <tag>example</tag> and <tag>remark</tag> are almost invariably children of a division, numbered, and work best with a <tag>title</tag>.  <c>tcolorbox</c> is a massive package, that we have taken to as a solution to many under-the-bonnet technical problems, such as a hanging indent for numbers of <tag>exercise</tag> or laying out the panels of a <tag>sidebyside</tag>.  But it also allows an incredible variety of styling options for these intermediate chunks of text.  Think of variable placements of numbers and titles, borders and boxes, and colored backgrounds.  With freedom comes responsibility!  With a light touch, you can <em>help</em> your reader navigate the inherent structure of your <pretext/> source.</p>

        <p>Whatever you call them: environments, blocks, or information objects, almost every one can be styled separately  (2019-09-30: not captioned items yet, such as <tag>figure</tag>).  For example,<cd>
            <cline>&lt;xsl:template match="example" mode="tcb-style"&gt;</cline>
            <cline>    &lt;xsl:text&gt;colback=pink,&lt;/xsl:text&gt;</cline>
            <cline>&lt;/xsl:template&gt;</cline>
        </cd>would cause the background of every <tag>example</tag> to be light red in color.  To make every <pretext/> element that is a variant of an <tag>example</tag> look identical, use one of the <term>entities</term> defined in <c>xsl/entities.ent</c>,<cd>
            <cline>&lt;xsl:template match="&amp;EXAMPLE-LIKE;" mode="tcb-style"&gt;</cline>
            <cline>    &lt;xsl:text&gt;colback=pink,&lt;/xsl:text&gt;</cline>
            <cline>&lt;/xsl:template&gt;</cline>
        </cd>.  This would affect <tag>example</tag>, <tag>question</tag>, and <tag>problem</tag>, and future-proof your style when there is a demand for <tag>illustration</tag> as a new kind of <q>example-like.</q></p>

        <p>There is only one mode, but it can handle a variety of <pretext/> elements in the <attr>match</attr>.  The text produced by the template will be supplied in a named <c>tcolorbox</c> style via a <c>\tcbset{}</c> command.  It is marginally more complicated than that.  <pretext/> will manage certain aspects of creating a <c>tcolorbox</c>, such as forming the <c>tcolorbox</c> <c>title</c> to be a string like <q>Example 4.5 The Chain Rule.</q>, or just <q>Example 4.6</q> when an author does not include a <pretext/> <tag>title</tag>.  As a style writer, you can change the font, color and placement of that string, but not the use of the type-name, the number, the title, or their order.  The text of your template is additive, meaning it is in addition to what the stock <pretext/> conversion provides.  Your options come last, so will be new and effective, or will replace what the base conversion to <latex/> does.  So in the example above, the base conversion to <latex/> has <c>colback=white</c> (rather than the default gray!), and this will be overridden since pink will come later.</p>
    </section>

    <section xml:id="style-xsl-101">
        <title><init>XSL</init> 101</title>

        <p>If you have read this far, and read carefully, you have been exposed to several key principles of writing <c>XSL</c>.  Basically you are creating templates which the base <latex/> conversion will <q>call</q> in exactly the right place.  In a procedural language these might be called <term>hooks</term>.  Besides a smooth integration with the rest of <pretext/> there are several advantages:<ul>
            <li>A template using a <attr>match</attr> can apply narrowly or broadly.  Witness the example above for <tag>example</tag> versus <c>&amp;EXAMPLE-LIKE;</c>.  This attribute is similar to a <c>this</c> pointer in an object-oriented language and the modal template is not dissimilar to a method.</li>

            <li><pretext/> has a discovery phase when it constructs the <latex/> preamble.  If your <pretext/> source has no <tag>example</tag> in it, then there will be no associated <c>tcolorbox</c> style added to the preamble, and the <latex/> <c>example</c> environment will not be defined.  So the preamble is exactly what your document needs, and no more (mostly).  The <attr>match</attr> attribute makes this possible.</li>

            <li>You have seen named templates, which will feel familiar if you know procedural languages.  While perhaps comfortable, they are way less powerful, and we noted that we may get rid of them.</li>

            <li>The <tag>xsl:import</tag> mechanism allows us to keep base definitions and override others.  So as you develop your style, you do not need to start from scratch.</li>
        </ul></p>

        <p>Be aware that <em>every single character</em> that you put inside the <tag>xsl:text</tag> element will get copied literally into the preamble of your <latex/> output, including newlines and spaces you use to indent in your <init>XSL</init>.  Conversely, any <em>whitespace</em> inside your template, but <em>between</em> the <tag>xsl:text</tag> elements is ignored.  So we like to use multiple <tag>xsl:text</tag> elements (except we were a bit lazy getting this out the door initially<mdash/>do as we say, not as we do) and explicitly create newlines with the <c>&amp;#xa;</c> character.  Your goal is to have a <latex/> preamble with no blank lines and no unintended indentation.  We often create comment lines (with two leading <c>%</c> characters to aid with readability.</p>

        <p>See the <pretext/> website for recommendations for books on <init>XSL</init> if you are encouraged to learn more.</p>
    </section>

    <section>
        <title>Testing and Debugging</title>

        <p>The sample article tries to have one of everything, plus a few torture tests.  It is a good place to test initially, especially with the <c>tcb-style</c> templates.  The sample book is less haphazard, but does have most of the structure a typical book would have.  So if you are designing for a book it is a good place to test page styles, headers and footers, and division titles.  (2019-09-30: it is possible <tag>part</tag> has not been tested thorougly enough yet.)</p>

        <p>When things go bad, such as a non-obvious <latex/> compilation, it can help to stop working with <pretext/> source, and instead edit the generated <latex/> until the problem is understood.</p>

        <p>We do not expect to provide great support for this process.  First, because new code and basic support already keeps us busy, and second, because you have the freedom to really make a mess, and thus you should take responsibility for the problem.  When you are certain that <pretext/> has done something wrong or inadvisable, please, please do post in the development forum with a careful explanation and a (minimal) example.  It will happen.  Just don't use the forums as a replacement for this documentation or a bit of sleuthing through the <latex/> that <em>you</em> are now creating.  With freedom comes responsibilty.  Thanks.</p>
    </section>

    <section xml:id="styling-justification">
        <title>Justified Text</title>

        <p>We employ the <latex/> package, <url href="https://ctan.org/pkg/microtype"><c>microtype</c></url><fn><c>ctan.org/pkg/microtype</c></fn> to enhance <latex/>'s algorithms for spacing text.  See <xref ref="print-justification"/> for some explanation.  The package admits a great deal of fine-tuning, and we make it easy to pass in options via a template included as part of the styling.</p>

        <p>If you were using <c>pdflatex</c> you might include in your styling:<cd>
            <cline>&lt;xsl:template name="microtype-options"&gt;</cline>
            <cline>    &lt;xsl:text&gt;protrusion=true,expansion&lt;/xsl:text&gt;</cline>
            <cline>&lt;/xsl:template&gt;</cline>
        </cd>This would have the effect of putting<cd>
            <cline>\usepackage[protrusion=true,expansion]{microtype}</cline>
        </cd>into your <latex/> output file.  Study the <c>microtype</c> documentation for possibilities.</p>
    </section>

    <section>
        <title>Planned Additions</title>

        <p>Some items to include, as of 2019-09-30:<ul>
            <li>Color schemes, so an author can use a style and just change the colors with a very simple stylesheet.</li>
            <li>Font control, so a style writer has simple instructions that navigate <latex/>'s procedures.</li>
            <li>Flexibility with the building blocks of a title page.</li>
            <li>Cover design and placement.</li>
        </ul></p>
    </section>
</chapter>
