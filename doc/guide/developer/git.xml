<?xml version="1.0" encoding="UTF-8"?>

<!--   This file is part of the documentation of PreTeXt      -->
<!--                                                          -->
<!--        PreTeXt Developer's Guide                         -->
<!--                                                          -->
<!-- Copyright (C) 2019-2019                                  -->
<!-- Robert A. Beezer, David Farmer, Alex Jordan              -->
<!-- See the file COPYING for copying conditions.             -->

<chapter xml:id="git-developer">
    <title>Git</title>

    <section>
        <title>Getting Started</title>

        <p>Todo: preliminary list as of 2019-04-26:<ul>
            <li>Install git.</li>
            <li>Learn to use git at command-line, front-ends will ruin your life.</li>
            <li>GitHub is not git, but we use it to advantage.  Explain the difference.</li>
            <li>Point to Git for Authors.</li>
        </ul></p>
    </section>

    <section>
        <title>Commit Messages</title>

        <p>Commit messages are a critical tool when locating and reviewing changes to the project.  In a way, they are like an index of a book.  We take great care to have useful and concise commit messages, and to this end, we are likely to edit yours.  But you can help by doing some simple things, so we do not have to.<ul>
            <li>Begin with a capital letter.</li>
            <li>Do not end with a period.</li>
            <li>Do not repeat information available by examining the commit itself.  Bad: <q>Changes in foo.xsl</q></li>
            <li>No longer than roughly 60 to 70 characters, and never onto multiple lines.</li>
            <li>You can find lots of advice about phrasing commit messages with action words, or in ways that describe how the code will be different.  These make for good reading, but we do not adhere slavishly to any one formulation.</li>
            <li>For whatever reason, we isolate and prefix messages with the name of a relevant conversion such as <q>HTML:<nbsp/></q>, or other areas, such as <q>Guide:<nbsp/></q> or <q>Schema:<nbsp/></q>.  Scroll the list of commit messages to see the range.</li>
            <li>For pull requests we will append <q><nbsp/>(PR #nnnn)</q>.  (This provides a permanent record somewhat independent of GitHub, and GitHub will utilize this number.)  </li>
        </ul></p>
    </section>

    <section xml:id="git-whitespace">
        <title>Whitespace</title>
        <idx><h>whitespace</h><h>in code</h></idx>

        <p><term>Whitespace</term> refers to those pesky characters that you really cannot see visually, but which are definitely (different) bytes in your source code.  Spaces, non-breaking spaces, tabs, newlines (carriage return?  Enter?).  Here is the problem.  Somebody else left a blank space at the end of a line mid-sentence, perhaps because they manually added a newline there to make a line shorter and more readable (especially if it is code).  Now you open that file with your editor, which is set to strip trailing whitespace from lines.  Maybe you make an edit, realize it was not what you needed and remove the edit.  The rest of your work is off in some other file.  But now the original file has a single one-character deletion, and that will be carried forever in the git history as a change you made to the work of the previous manual-line-breaker.</p>

        <p>Solution: the original space introduced at the end of the line in mid-sentence should never have been part of a commit, and should never have been merged in the first place.  The fault is really not yours, and having your editor strip trailing whitespace is probably a good thing.  But if you find these sorts of mistakes, they should be on a commit of their own, clearly labeled as fixing whitespace (see <xref ref="code-style-whitespace"/>).  But do not be the person who introduces the spurious whitespace in the first place!  We will likely ask you to clean it up before your pull request is merged.</p>

        <p>Whether or not a newline is the last character of a file seems to be a common <q>correction</q> that editors make routinely.  Let us say that a newline should be there, so feel free to add such newlines (on its own commit).</p>

        <p>When I do <c>git diff</c> at the command-line, extraneous whitespace (trailing characters, blank lines that are really not at all blank) are shown as bright red rectangles.  Can't miss 'em.  Find a similar tool that works for you.  Or <c>grep</c> with a pattern like <c> $</c> (that's a space and a dollar-sign.)  And learn to configure your editor to do the right thing routinely (and no more).</p>
    </section>

    <section xml:id="git-tabs">
        <title>Tabs</title>
        <idx><h>whitespace</h><h>tabs</h></idx>

        <p>A <term>tab</term> is the worst sort of whitespace!  (See <xref ref="git-whitespace"/>.)  There should never ever be any tabs present in any contribution to <pretext/>.  The problem: the <q>width</q> of a tab is different for each person who opens a file.  Two spaces, four spaces, eight spaces, you name it.  So if indentation is accomplished with a mix of tabs and spaces, there is a good chance it might look right to you, but looks wrong to many other developers.  I hit the tab key on my keyboard all the time.  But my editor is set to supply <em>four spaces</em> as a result.  See if your editor will behave similarly.</p>
    </section>

    <section>
        <title>Pull Requests</title>

        <p>Contributions to the code repository are accomplished with a <term>pull request</term><idx>pull request</idx>.  The short version is that you have a copy of the repository and you make a collection of changes on your copy.  Then you make a request to have your changes <q>pulled into</q> the official (main, canonical) repository.  A pull request is a concept independent of GitHub, but one of GitHub's advantages is that it makes a pull request very easy to create and manage.</p>

        <paragraphs>
            <title>One-Time Initial Setup</title>

            <p><ol>
                <li>Make an account on <url href="https://github.com/" visual="github.com">GitHub</url> if you do not have one already.  A username that bears some correspondence to your real name or favorite email name is helpful.</li>

                <li>Log into your (new) account.</li>

                <li>Go to the official repository for <pretext/>. Find a button labeled <c>Fork</c>, roughly in the upper-right corner.  Click on it.  This will make a copy (a <term>fork</term>)<idx>fork</idx> of the official repository in your GitHub account.  This repository is called a fork since you are going to make improvements there and your version will diverge from the official version.  The fork will <q>know</q> where it came from.</li>

                <li>Install a command-line version of Git on your local computer.  Heed the advice above about using front-ends.</li>

                <li>
                    <p>You are now going to make a local copy of your fork.  Think of it as a mirror<mdash/>you will do your best to keep the copy and the fork in-sync.  Git calls this a <term>clone</term><idx>clone</idx>.  In your fork (i.e. in your account, find a green button partway down the right side.  Clicking on it will bring up a textbox with a <init>URL</init> you can copy.  Now at the command-line, execute something similar to<cd>
                        <cline>git clone https://github.com/mjsmith/mathbook.git</cline>
                    </cd>Your clone will also <q>know</q> where it came from.</p>
                </li>

                <li>
                    <p>That finishes setup.  You can check that all is well by running<cd>
                        <cline>git remote -vv</cline>
                    </cd>and the response should be something like<cd>
                        <cline>origin      https://github.com/mjsmith/mathbook.git (fetch)</cline>
                        <cline>origin      https://github.com/mjsmith/mathbook.git (push)</cline>
                        <cline>upstream    https://github.com/PreTeXtBook/pretext.git (fetch)</cline>
                        <cline>upstream    https://github.com/PreTeXtBook/pretext.git (push)</cline>
                    </cd><c>origin</c> is an alias for the location of the repository you cloned.  And <c>upstream</c> is an alias the fork uses to know the location of the official repository.</p>
                </li>
            </ol></p>
        </paragraphs>

        <paragraphs>
            <title>Preparing Your Changes</title>

            <p>The following all happens on your local computer, using your clone, at the command-line.<ol>
                <li>
                    <p>Create a <term>branch</term> for your work, and switch into it.<cd>
                        <cline>git checkout -b my-big-improvement</cline>
                    </cd>The name you choose will not ever be part of the official repository, but it will be part of the record on GitHub.  So you do not have to be too careful, but it should be informative.</p>
                </li>

                <li>Use a text editor to make changes to existing files, or to create and populate new ones.  As you save the affected files, you can type<cd>
                    <cline>git diff</cline>
                </cd>to see the changes to existing files.  See the rest of this guide for particulars about the code.</li>

                <li>
                    <p>When finished, you will package up your changes as a <term>commit</term>, the fundamental unit of a git repository.  Throughout this process (and at any other time), you can type<cd>
                        <cline>git status</cline>
                    </cd>to see how your repository is changing.</p>

                    <p>If you have created new files, you need to stage them.  You can see these files' status changing if you run <c>git status</c> before and after.  To stage a new file,<cd>
                        <cline>git add xsl/pretext-esoteric-format.xsl</cline>
                    </cd></p>

                    <p>You do exactly the same thing for existing files you have changed.  Run <c>git status</c> before and after.<cd>
                        <cline>git add xsl/pretext-common.xsl xsl/pretext-latex.xsl</cline>
                    </cd></p>

                    <p>Runnning <c>git status</c> should now show that all affected files (changed, new) are now in the staging area, and no files with changes are left behind.  You can preview the commit with<cd>
                        <cline>git diff --cached</cline>
                    </cd>If you need to edit some more, go ahead, and be sure to <c>add</c> your new changes into the staging area.  Now you are ready to make your commit.<cd>
                        <cline>git commit -m "Create a new conversion to an esoteric format"</cline>
                    </cd></p>

                    <p>Now <c>git status</c> should show something of a clean slate.  You can also run<cd>
                        <cline>git show-branch</cline>
                    </cd>to get a pictorial version of your branch.</p>
                </li>
            </ol></p>
        </paragraphs>

        <paragraphs>
            <title>Creating the Pull Request</title>

            <p>Now you will communicate your changes (on a branch on your local computer) to GitHub as a request for incorporation into the official repository.<ol>
                <li>
                    <p>First, <term>push</term> your branch to your fork on GitHub.  Recall that this repository is known as <c>origin</c>.  On your local computer, at the command-line,<cd>
                        <cline>git push origin my-big-improvement</cline>
                    </cd></p>
                </li>

                <li>
                    <p>Now move to your web browser and your fork on GitHub, which now has a copy of the <c>my-big-improvement</c> branch.  You should see a prominent message about your new branch, and a green button labeled <c>Compare &amp; pull request</c>.  Click on it.</p>
                </li>

                <li>
                    <p>Now you have a screen titled <q>Open a pull request</q>, where you can describe the purpose of the new code.  Then click on the green button labeled <c>Create pull request</c>.</p>

                    <p>That's it.  The developers responsible for approving pull requests will be notified automatically and receive your code in a way they can test and review it in their own forks/clones of the repositories.  You can see the pull request in action at the appropriate area of the official repository.  Pretty slick.</p>
                </li>
            </ol></p>
        </paragraphs>

        <paragraphs xml:id="pull-request-verification">
            <title>Pull Request Verification</title>

            <p>It is often advisable to add an example of any new markup, new situation, or bug-provoking content into the sample article as part of a pull request.  Please do so, as appropriate.  However, because we do rolling releases, all code gets thoroughly tested.  For this reason <em>please</em> put all changes to the sample article, and only changes to the sample article, onto a first commit.  Code should then follow on subsequent commits.  This makes a big difference in our ability to test quickly and accurately.  Thanks.  (Ask if you need help rearranging your commits to achieve this, or see <xref ref="git-formation"/>.)</p>
        </paragraphs>

        <paragraphs>
            <title>Modifications to a Pull Request</title>

            <p>To Do: describe how a pull request might iterate to approval/merge.</p>
        </paragraphs>

        <paragraphs>
            <title>Cleaning Up</title>

            <p><ol>
                <li>
                    <p>At any time after pushing your branch to your clone you can/should switch to the default branch (<c>dev</c> now, but changing to <c>master</c> later).<cd>
                        <cline>git checkout dev</cline>
                    </cd></p>
                </li>

                <li>
                    <p>Your pull request ends when the lead developers <term>merge</term><idx>merge</idx> your branch into the main branch that everybody uses.  The commit will have your name on it, as part of the permanent record.  But the commit may have changed slightly between initiating the pull request and its subsequent merge.  You will want to remove your original branch from your clone on your local computer.<cd>
                        <cline>git checkout dev</cline>
                        <cline>git branch -d my-big-improvement</cline>
                        <cline>git branch -D my-big-improvement</cline>
                    </cd>The second command will fail, as a safeguard against deleting branches with temporary (but important) work on them.  The capital <q>D</q> is a <q>forced deletion</q> so should be used with care!  But it is the right thing to do here, since your work has been incorporated into the official repository.</p>
                </li>

                <li>
                    <p>But, of course, you want your new improvement like everybody else.  So you are now going to pull it from the official repository into your clone on your local computer.  Remember that the official repository is known as <c>upstream</c>.<cd>
                        <cline>git checkout dev</cline>
                        <cline>git pull upstream dev</cline>
                    </cd></p>
                </li>

                <li>
                    <p>Technically, you could now totally trash your fork (making your clone disconnected), and make a new fork and clone for your next contribution.  Instead, you can sync your clone with the fork.<cd>
                        <cline>git checkout dev</cline>
                        <cline>git push origin dev</cline>
                    </cd>Now all three repositories (clone, fork, official) look the same and have your contribution.  Before your next contribution you will want to pull from <c>upstream</c> into your clone, and then push that into <c>origin</c> (your fork).</p>
                </li>
            </ol></p>
        </paragraphs>

    </section>

    <section xml:id="git-formation">
        <title>Forming Logical Commits</title>

        <p>There is an art to making a pull request that is easier to review, and which will be useful to others later (such as when using <c>git bisect</c> to isolate the introduction of a bug).  Here are some notes:
            <ul>
                <li>
                    <p>Always <c>rebase</c> your sequence of commits onto <c>master</c> before creating a pull request.  Any (rare) conflicts should be your responsibility.  If we delay in getting to a review, then maybe conflicts are our responsibility.</p>
                </li>
                <li>
                    <p>Make logical commits.  Changes to common templates, HTML-specific templates, <latex/>-specific templates, etc. should all be on separate commits.  Contributions to the Guide, and examples for testing in the sample article, should follow (even if testing examples may have been an early commit on your branch during development).  Make schema changes <em>last</em> since it will be easier for us to manufacture derived files as an add-on to your work.</p>
                </li>
                <li>
                    <p>Do not put partial work on two disjoint files into one commit, come back later, add a second commit with more work in each file, and call it good.  Likely there should be two commits<mdash/>relevant code in one file, related code in the other file.  This is a general suggestion: a stream-of-consciousness commit history is of no benefit to anybody, even you.</p>
                </li>
                <li>
                    <p>Do not make a mistake (typo, whitespace, logical error) in one commit, and then fix it several commits later as part of the same pull request.  If you made a mistake, learn how to make the change/fix so it looks like it never happened.  You do not want other developers to think you make mistakes, do you?</p>
                </li>
                <li>
                    <p>Done right, a pull request with no changes will be merged as-is with no changes to the commit hashes.  Consider that a goal, and we will congratulate you when it happens the first time (and expect it from then on!)</p>
                </li>
            </ul></p>

        <p>Alright, those are high expectations.  How do you make a well-formed sequece of commits?  This is not a git tutorial, but we will make some suggestions.  git has what is called a <term>staging area</term> where you can gradually place a collection of changes before making them part of a single commit.  The command <c>git commit -a</c> is a bad habit and breaking yourself of it will help you learn to be more flexible about how you package changes into a commit via the staging area.  Finally <c>-m</c> is a useful option for making (or changing) a commit message without being thrown into an editor.
            <ul>
                <li>
                    <p>If your most recent commit (or only commit!) is lacking you can add new changes into it by adding them to the staging area and using <c>git commit --amend</c> to introduce them into the commit.</p>
                </li>
                <li>
                    <p><c>git reset HEAD~n</c> will return your files to a state as if you have made no commits (presuming you had <m>n</m> of them in the first place).  Your edits will all be available (this is <em>not</em> a <q>hard</q> reset, and forget that we even mentioned such a possibility).  Then you can selectively stage portions of your work with tools like <c>git add &lt;file&gt;</c> or <c>git add -p</c> and build up individual logical commits in the staging area.  Of course, you do not always need to reset all of your commits on a branch, perhaps only a few will need reworking.  Caution: do not reset so many commits that you blow past branch pointers and lose them, such as <c>master</c>.</p>
                </li>
                <li>
                    <p>You can do an interactive rebase with <c>git rebase -i HEAD~n</c>.  This unwinds <m>n</m> commits on the current branch, makes a little script for replaying them in the proper order, and throws you into an editor with the script.  Exit the editor and the script runs.  With that description/process nothing interesting happens.  What is interesting is that you can edit the script to affect the replay.</p>
                    <p>You can rearrange the order of the commits.  But this only works if you know that interchanged commits do not build on one another.  For example, I often start developing a new feature by designing the <pretext/> markup and making an example in the sample article.  But once I am all done, I move it to be <em>later</em> than the code, as an example of how the new code will behave (ansd I do not leave the sample article in a broken state).</p>
                    <p>Suppose you have ten commits on a branch, and you discover that the third-newest has a small mistake.  Correct the mistake and make a throw-away commit with just that correction on it.  Now, do an interactive rebase with the newest <em>four</em> commits (you just added one), <c>git rebase -i HEAD~4</c>.  Edit the script to place the throwaway commit just after the commit with the mistake, and do not leave it as <c>pick</c>, but edit that action to <c>fix</c> (an <c>f</c> is all you really need).  Be sure to remove the line that has the original version of the throwaway commit.  Exit your editor.  Poof!  Three commits and the mistake is corrected.  (Do not use the <c>squash</c> action, that accumulates commit messages, which we do not want.)</p>
                    <p>This is analgous to <c>git --amend</c> except it is needed for the times when you see a change that needs to be made several commits ago.</p>
                </li>
                <li>
                    <p>The <c>git cherry-pick &lt;commit&gt;</c> command allows you to recycle existing commits onto new branches.  Suppose your current branch ends up having two very different projects on it.  Make a new branch and cherry-pick the commits for one project onto it.  Now do an interactive rebase on the original branch and remove those commits from the script.  Of course, this assumes you know the two sets of commits are independent of each other.</p>
                    <p>Here is a different solution to the same problem.  Do a <c>git reset</c> of the entire branch, as described above.  Build up the first project into a set of commits.  Now do <c>git stash save</c> to put all the remaining edits for the second project into the <term>stash</term> temporarily).  Switch to <c>master</c>, make a new branch, <c>git stash pop</c> to get all the edits back, and start building up the second branch.  Note that this assumes the second project does not build on the first project.</p>
                </li>
                <li>
                    <p>Be bold!  But maybe make backups first?  You can often abandon things that are not going well.  If <c>git rebase master</c> has conflicts you can look around at the files affected, and then you can give up with <c>git rebase --abort</c>.  There are other bail-outs for other commands.</p>
                </li>
                <li>
                    <p>The commands <c>git log</c>, <c>git diff</c>, and <c>git status</c> are your friends.  It is never a mistake to use them more than necessary.</p>
                </li>
            </ul>
        </p>
    </section>

    <section xml:id="git-blame">
        <title>Blame</title>

        <p>The command <c>git blame</c> is simultaneously funny, useful, and powerful.  A line of code you do not understand can be traced back to its originating commit.  We maintain a list of commits (in <c>.git-blame-ignore-revs</c>) that have no real new code and make just cosmetic changes, so you may want to use this feature.  To use:<cd>
            <cline>git blame --ignore-revs-file .git-blame-ignore-revs birds.xml</cline>
        </cd>  You can also make this happen every time with a local configuration change, to wit:<cd>
            <cline>git config blame.ignoreRevsFile .git-blame-ignore-revs</cline>
        </cd></p>

        <p>To learn more, see <url href="https://akrabat.com/ignoring-revisions-with-git-blame/">Rob Allen's post</url>, and <xref ref="code-style-whitespace"/>.</p>
    </section>
</chapter>
