<?xml version="1.0" encoding="UTF-8"?>

<!--   This file is part of the documentation of PreTeXt      -->
<!--                                                          -->
<!--        PreTeXt Developer's Guide                         -->
<!--                                                          -->
<!-- Copyright (C) 2019-2019                                  -->
<!-- Robert A. Beezer, David Farmer, Alex Jordan              -->
<!-- See the file COPYING for copying conditions.             -->

<chapter xml:id="git-developer">
    <title>Git</title>

    <section>
        <title>Getting Started</title>

        <p>Todo: preliminary list as of 2019-04-26:<ul>
            <li>Install git.</li>
            <li>Learn to use git at command-line, front-ends will ruin your life.</li>
            <li>GitHub is not git, but we use it to advantage.  Explain the difference.</li>
            <li>Point to Git for Authors.</li>
        </ul></p>
    </section>

    <section>
        <title>Commit Messages</title>

        <p>Commit messages are a critical tool when locating and reviewing changes to the project.  In a way, they are like an index of a book.  We take great care to have useful and concise commit messages, and to this end, we are likely to edit yours.  But you can help by doing some simple things, so we do not have to.<ul>
            <li>Begin with a capital letter.</li>
            <li>Do not end with a period.</li>
            <li>Do not repeat information available by examining the commit itself.  Bad: <q>Changes in foo.xsl</q></li>
            <li>No longer than roughly 60 to 70 characters, and never onto multiple lines.</li>
            <li>You can find lots of advice about phrasing commit messages with action words, or in ways that describe how the code will be different.  These make for good reading, but we do not adhere slavishly to any one formulation.</li>
            <li>For whatever reason, we isolate and prefix messages with <q>Author's Guide:<nbsp/></q>, <q>Publisher's Guide:<nbsp/></q>, <q>Developer's Guide:<nbsp/></q>, and <q>Schema:<nbsp/></q>.</li>
            <li>For pull requests we will append <q><nbsp/>(PR #nnnn)</q>. You can try to predict this in advance of creating your PR.  (This provides a permanent record somewhat independent of GitHub, and GitHub will utilize this number.)  </li>
        </ul></p>
    </section>

    <section>
        <title>Pull Requests</title>

        <p>Contributions to the code repository are accomplished with a <term>pull request</term><idx>pull request</idx>.  The short version is that you have a copy of the repository and you make a collection of changes on your copy.  Then you make a request to have your changes <q>pulled into</q> the official (main, canonical) repository.  A pull request is a concept independent of GitHub, but one of GitHub's advantages is that it makes a pull request very easy to create and manage.</p>

        <paragraphs>
            <title>One-Time Initial Setup</title>

            <p><ol>
                <li>Make an account on <url href="https://github.com/">GitHub</url><fn><c>github.com</c></fn> if you do not have one already.  A username that bears some correspondence to your real name or favorite email name is helpful.</li>

                <li>Log into your (new) account.</li>

                <li>Go to the official repository for <pretext/>. Find a button labeled <c>Fork</c>, roughly in the upper-right corner.  Click on it.  This will make a copy (a <term>fork</term>)<idx>fork</idx> of the official repository in your GitHub account.  This repository is called a fork since you are going to make improvements there and your version will diverge from the official version.  The fork will <q>know</q> where it came from.</li>

                <li>Install a command-line version of Git on your local computer.  Heed the advice above about using front-ends.</li>

                <li>
                    <p>You are now going to make a local copy of your fork.  Think of it as a mirror<mdash/>you will do your best to keep the copy and the fork in-sync.  Git calls this a <term>clone</term><idx>clone</idx>.  In your fork (i.e. in your account, find a green button partway down the right side.  Clicking on it will bring up a textbox with a <init>URL</init> you can copy.  Now at the command-line, execute something similar to<cd>
                        <cline>git clone https://github.com/mjsmith/mathbook.git</cline>
                    </cd>Your clone will also <q>know</q> where it came from.</p>
                </li>

                <li>
                    <p>That finishes setup.  You can check that all is well by running<cd>
                        <cline>git remote -vv</cline>
                    </cd>and the response should be something like<cd>
                        <cline>origin      https://github.com/mjsmith/mathbook.git (fetch)</cline>
                        <cline>origin      https://github.com/mjsmith/mathbook.git (push)</cline>
                        <cline>upstream    https://github.com/rbeezer/mathbook.git (fetch)</cline>
                        <cline>upstream    https://github.com/rbeezer/mathbook.git (push)</cline>
                    </cd><c>origin</c> is an alias for the location of the repository you cloned.  And <c>upstream</c> is an alias the fork uses to know the location of the official repository.</p>
                </li>
            </ol></p>
        </paragraphs>

        <paragraphs>
            <title>Preparing Your Changes</title>

            <p>The following all happens on your local computer, using your clone, at the command-line.<ol>
                <li>
                    <p>Create a <term>branch</term> for your work, and switch into it.<cd>
                        <cline>git checkout -b my-big-improvement</cline>
                    </cd>The name you choose will not ever be part of the official repository, but it will be part of the record on GitHub.  So you do not have to be too careful, but it should be informative.</p>
                </li>

                <li>Use a text editor to make changes to existing files, or to create and populate new ones.  As you save the affected files, you can type<cd>
                    <cline>git diff</cline>
                </cd>to see the changes to existing files.  See the rest of this guide for particulars about the code.</li>

                <li>
                    <p>When finished, you will package up your changes as a <term>commit</term>, the fundamental unit of a git repository.  Throughout this process (and at any other time), you can type<cd>
                        <cline>git status</cline>
                    </cd>to see how your repository is changing.</p>

                    <p>If you have created new files, you need to stage them.  You can see these files' status changing if you run <c>git status</c> before and after.  To stage a new file,<cd>
                        <cline>git add xsl/pretext-esoteric-format.xsl</cline>
                    </cd></p>

                    <p>You do exactly the same thing for existing files you have changed.  Run <c>git status</c> before and after.<cd>
                        <cline>git add xsl/pretext-common.xsl xsl/pretext-latex.xsl</cline>
                    </cd></p>

                    <p>Runnning <c>git status</c> should now show that all affected files (changed, new) are now in the staging area, and no files with changes are left behind.  You can preview the commit with<cd>
                        <cline>git diff --cached</cline>
                    </cd>If you need to edit some more, go ahead, and be sure to <c>add</c> your new changes into the staging area.  Now you are ready to make your commit.<cd>
                        <cline>git commit -m "Create a new conversion to an esoteric format"</cline>
                    </cd></p>

                    <p>Now <c>git status</c> should show something of a clean slate.  You can also run<cd>
                        <cline>git show-branch</cline>
                    </cd>to get a pictorial version of your branch.</p>
                </li>
            </ol></p>
        </paragraphs>

        <paragraphs>
            <title>Creating the Pull Request</title>

            <p>Now you will communicate your changes (on a branch on your local computer) to GitHub as a request for incorporation into the official repository.<ol>
                <li>
                    <p>First, <term>push</term> your branch to your fork on GitHub.  Recall that this repository is known as <c>origin</c>.  On your local computer, at the command-line,<cd>
                        <cline>git push origin my-big-improvement</cline>
                    </cd></p>
                </li>

                <li>
                    <p>Now move to your web browser and your fork on GitHub, which now has a copy of the <c>my-big-improvement</c> branch.  You should see a prominent message about your new branch, and a green button labeled <c>Compare &amp; pull request</c>.  Click on it.</p>
                </li>

                <li>
                    <p>Now you have a screen titled <q>Open a pull request</q>, where you can describe the purpose of the new code.  Then click on the green button labeled <c>Create pull request</c>.</p>

                    <p>That's it.  The developers responsible for approving pull requests will be notified automatically and receive your code in a way they can test and review it in their own forks/clones of the repositories.  You can see the pull request in action at the appropriate area of the official repository.  Pretty slick.</p>
                </li>
            </ol></p>
        </paragraphs>

        <paragraphs>
            <title>Modifications to a Pull Request</title>

            <p>To Do: describe how a pull request might iterate to approval/merge.</p>
        </paragraphs>

        <paragraphs>
            <title>Cleaning Up</title>

            <p><ol>
                <li>
                    <p>At any time after pushing your branch to your clone you can/should switch to the default branch (<c>dev</c> now, but changing to <c>master</c> later).<cd>
                        <cline>git checkout dev</cline>
                    </cd></p>
                </li>

                <li>
                    <p>Your pull request ends when the lead developers <term>merge</term><idx>merge</idx> your branch into the main branch that everybody uses.  The commit will have your name on it, as part of the permanent record.  But the commit may have changed slightly between initiating the pull request and its subsequent merge.  You will want to remove your original branch from your clone on your local computer.<cd>
                        <cline>git checkout dev</cline>
                        <cline>git branch -d my-big-improvement</cline>
                        <cline>git branch -D my-big-improvement</cline>
                    </cd>The second command will fail, as a safeguard against deleting branches with temporary (but important) work on them.  The capital <q>D</q> is a <q>forced deletion</q> so should be used with care!  But it is the right thing to do here, since your work has been incorporated into the official repository.</p>
                </li>

                <li>
                    <p>But, of course, you want your new improvement like everybody else.  So you are now going to pull it from the official repository into your clone on your local computer.  Remember that the official repository is known as <c>upstream</c>.<cd>
                        <cline>git checkout dev</cline>
                        <cline>git pull upstream dev</cline>
                    </cd></p>
                </li>

                <li>
                    <p>Technically, you could now totally trash your fork (making your clone disconnected), and make a new fork and clone for your next contribution.  Instead, you can sync your clone with the fork.<cd>
                        <cline>git checkout dev</cline>
                        <cline>git push origin dev</cline>
                    </cd>Now all three repositories (clone, fork, official) look the same and have your contribution.  Before your next contribution you will want to pull from <c>upstream</c> into your clone, and then push that into <c>origin</c> (your fork).</p>
                </li>
            </ol></p>
        </paragraphs>

    </section>

</chapter>