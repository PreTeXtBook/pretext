<?xml version="1.0" encoding="UTF-8"?>

<!--   This file is part of the documentation of PreTeXt      -->
<!--                                                          -->
<!--      PreTeXt Author's Guide                              -->
<!--                                                          -->
<!-- Copyright (C) 2013-2023  Robert A. Beezer                -->
<!-- See the file COPYING for copying conditions.             -->

<chapter xml:id="tutorial">
    <title>Getting Started Tutorial</title>

    <introduction>
      <p>
        This chapter serves as a tutorial for quickly getting started with <pretext /> in your web browser
        using free services provided by <url href="https://github.com">GitHub</url>.
        (Advanced users who'd prefer to install our free and open-source software
        to their own machine may choose to skip ahead to <xref ref="tutorial-install"/>.)
      </p>
      <objectives>
        <introduction><p>At the end of this tutorial you will have...</p></introduction>
        <ul>
          <li><p>Created a free GitHub account.</p></li>
          <li><p>Created a GitHub Repository and Codespace for authoring <pretext/> in your web browser.</p></li>
          <li><p>Learned the first steps to editing a <pretext/> document.</p></li>
          <li><p>Converted your document to both <latex/>-generated PDF and accessible <init>HTML</init>.</p></li>
          <li><p>Deployed your <init>HTML</init> to the web via GitHub Pages.</p></li>
        </ul>
      </objectives>
      <p>
        The community does its best to keep this guide updated, but for even more up-to-date advice,
        join us at our regular Zoom drop-ins announced at
        <url href="https://groups.google.com/g/pretext-announce/">our Google group</url> or
        watch a recording posted in <xref ref="tutorial-videos"/>.
      </p>
    </introduction>

    <section xml:id="quickstart-example">
      <title>Using <pretext /> online</title>
      <introduction>
        <p>
          It is possible to write <pretext /> documents using nothing more than a web browser.  This approach does not require you to install any software (other than a web browser), although it does require you have internet access.  Options for installing <pretext /> on your own computer are discussed in <xref ref="tutorial-install"/>.
        </p>
      </introduction>
      <subsection>
        <title>What is GitHub</title>
        <p>
          <term>GitHub</term> is a freely-available service owned by Microsoft for authoring, sharing, and deploying
          documents and source code. It uses the free and open-source <term>Git</term>
          software for version management.
        </p>
        <p>
          There are other services such as <url href="https://cocalc.com">CoCalc</url> and
          <url href="https://about.gitlab.com/">GitLab</url> for managing <pretext/> documents
          online, as well as other ways to write <pretext/> that don't require anything
          besides installing the free and open-source <pretext/> software onto your own device
          (see <xref ref="tutorial-install"/> to learn more).
        </p>
        <p>
          We will use GitHub for this tutorial as it the most popular way to share and disseminate
          <pretext/> documents, and provides the easiest pathway to getting started writing in the
          <pretext/> language.
        </p>
        <p>
          To create your free GitHub account,
          <url href="https://github.com/signup">
              follow the instructions on GitHub's
              sign-up page
          </url>. You can also log into an existing GitHub account if you already have one.
          Be sure to note your GitHub username and password in your password manager
          (or however you usually keep track of login credentials).
        </p>
        <paragraphs>
          <title>Tip!</title>
          <p>
            Educators and non-profit researchers can get many of GitHub's paid features
            for free. While this is not strictly required for the rest of the tutorial, it's a
            useful way to increase GitHub's free Codespaces usage quotas, and allows you to use GitHub's free web hosting even for private repositories.
          </p>
          <p>
            Apply at
            <url href="https://education.github.com/discount_requests/pack_application">Education.GitHub.com</url>
            to unlock these features. In our experience, applications are usually processed quickly for <c>.edu</c>
            email addresses, but you do not need to wait for approval to continue on with this tutorial.
          </p>
        </paragraphs>
      </subsection>
      <subsection>
        <title>Three GitHub concepts</title>
        <p>
          This tutorial uses three GitHub services:
          <dl>
            <li>
              <title>Codespaces (<c>github.dev</c>)</title>
              <p>
                The Codespace for your project is an application
                run in your web browser that gives you access to a virtual
                computer with all the software recommended to author <pretext/>
                installed for you automatically. This Codespace is private to you,
                and lives at an address like
                <c>https://username-random-words-abc123.github.dev</c>.
              </p>
            </li>
            <li>
              <title>Repository hosting (<c>github.com</c>)</title>
              <p>
                The <term>repository</term> for your project represents
                the history of its edits that have been <q>committed and synced</q>
                from your Codespace to it. This repository can be public
                or private (though we encourage public repositories as they help
                the community provide support for each other),
                and lives at an address like
                <c>https://github.com/username/reponame/</c>.
              </p>
            </li>
            <li>
              <title>GitHub Pages (<c>github.io</c>)</title>
              <p>
                The <term>GitHub Pages</term> service provides free hosting
                for websites such as the HTML generated from a <pretext/> project.
                This website is public, and lives at an address like
                <c>https://username.github.io/reponame/</c>.
              </p>
            </li>
          </dl>
        </p>
        <p>
          Broadly speaking, you <q>author</q> within your Codespace, which you periodically
          <q>commit and sync</q> to your repository, and then occasionally <q>deploy</q>
          to your public GitHub Pages website.
        </p>
      </subsection>
      <subsection>
        <title>Creating your repository and Codespace</title>
        <p>
          Follow the instructions at <url href="https://github.com/PreTeXtBook/pretext-codespace" />
          to get started creating your repository and Codespace. You'll have the option to make your repository public
          (recommended if you want support from the rest of the <pretext/> community) or private.
          Either way, those instructions will also walk you through creating your private Codespace
          for authoring.
        </p>
        <p>
          This takes a few moments, but is a one-time process. Take note of the <c>github.com</c>
          URL your new repository lives at so you can find it
          the next time you want to work on your project.
          (You can always access your <c>github.dev</c> Codespace link from there via the <c>Code</c>
          menu.)
          Then you'll be ready for <xref ref="tutorial-first-document"/>.
        </p>
      </subsection>
    </section>

    <section xml:id="tutorial-first-document">
      <title>Your First PreTeXt Document</title>
      <introduction>
        <p>
          At this point, you should have a <pretext /> project set up as a
          <c>github.com</c> repository with a <c>github.dev</c> Codespace. You can use the
          <c>Code</c> menu on the repository webpage to pull up the Codespace environment in
          your web browser if you haven't already.
        </p>

        <p>
          When you first created your repository from the template, there were very few files included.  The first thing you will do when you open your Codespace is to create a new <pretext /> project.  As the directions in the repository indicate, you can do this by selecting the <q>PreTeXt: New Project</q> command from the <term>command pallette</term> (which you can open with <kbd>CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>P</kbd>, among other options).
        </p>

        <p>
          You should be presented with a dialog asking for what sort of project you would like to create (<c>article</c>, <c>book</c>, <c>course</c>, <c>slideshow</c>, etc.).  For purposes of this tutorial, you should select <c>article</c> or <c>book</c>.  You will then be asked where you would like to create the project, and selecting the default suggested location is fine.
        </p>

        <p>
          The window should now refresh and you will see a bunch of new files, including a folder called <c>source</c> that contains your <c>main.ptx</c> file.  Now you are ready to build it!
        </p>
      </introduction>
      <subsection>
        <title>Building for web</title>
        <p>
          You can build your entire project in a few different ways.
          <ul>
            <li>
              <p>
                Click the <q>PreTeXt</q> button in the center left of the bottom toolbar of the VS Code window (see <xref ref="tutorial-figure-codespaces-pretext"/>). A dialog will pop up asking which <pretext /> command you want to run.  Select <c>Build default target</c>, or choose <c>Build another target...</c> to get a menu of options to select a <term>target</term> to build (choose <c>web</c>).
              </p>
            </li>
            <li>
              <p>
                You can use the keyboard shortcut <kbd>CTRL</kbd>+<kbd>ALT</kbd>+<kbd>p</kbd>
                (replacing <kbd>CTRL</kbd> with <kbd>CMD</kbd> if you have a Mac) to get the same dialogs.  Or to build in one step, use <kbd>CTRL</kbd>+<kbd>ALT</kbd>+<kbd>b</kbd>.
              </p>
            </li>
            <li>
              <p>
                Select a <pretext /> command from the VS Code command palette, which you can access by clicking the icon in the bottom left of the VS Code window. You can also access this by typing <kbd>CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>p</kbd> (again, replacing <kbd>CTRL</kbd> with <kbd>CMD</kbd> if you have a Mac).  Start typing <q>pretext</q> to get a list of commands available.
              </p>
            </li>
            <li>
              <p>
                If you are comfortable entering commands in a terminal/command prompt, you can access one in your Codespace using <kbd>CTRL</kbd>+<kbd>`</kbd>.  Then you can run <c>pretext build web</c> to build your project.
              </p>
            </li>
          </ul>
          The resulting HTML files will be available in the <c>output/web</c> directory of your project.  However, to view it, you should NOT navigate there and open the files. Instead, read on.
        </p>

        <figure xml:id="tutorial-figure-codespaces-pretext">
          <caption>PreTeXt commands in Codespaces</caption>
          <image width="50%" source="codespaces-pretext.png">
            <description>Screenshot of VS Code PreTeXt button in Codespaces</description>
          </image>
        </figure>
      </subsection>

      <subsection xml:id="tutorial-previewing">
        <title>Viewing</title>
        <p>
          You can preview these HTML files you just built using the <term>View</term> command.
          Again, you can access this in multiple ways: <pretext /> button in the toolbar, <kbd>CTRL</kbd>+<kbd>ALT</kbd>+<kbd>p</kbd>, etc.
          Select <c>View</c> from the dialog.  You may be given options on how to view the document,
          depending on what VS Code plugins you have available to you. Try one or another until
          you're able to view your web build in either a new tab of your browser or a tab within VS Code.
        </p>

        <p>
          The VS Code Live Preview is a good option, but it is buggy when used inside Codespaces.  It seems to help to use the VS Code command palette to run <c>Live Preview: Show Preview (External Browser)</c>, then close the tab that opens, and start the process over.  You may need to do this a few times before it works.
        </p>

        <p>
          Now is a great time to try to make edits to your source files (maybe change the title).
          Note that these changes aren't updated live in your preview:
          you will need to build again, and then refresh the preview window to see them.  Note, you do not need to run the <c>View</c> command again unless you stop the preview server.
        </p>
      </subsection>

      <subsection xml:id="tutorial-pdf">
        <title>Building for print</title>
        <p>
          To produce a PDF from your <pretext /> source, repeat the above instructions
          with the <c>print</c> target. If you use the <pretext /> button in the toolbar, select <c>Build another target...</c> and then <c>print</c>. Alternatively, you can enter <c>pretext build print</c> in a terminal. The resulting PDF will land in <c>output/print/main.pdf</c>, and can be downloaded by right-clicking in the VS Code file explorer, or previewed using
          a View command.
        </p>

        <p>
          If you would like to see the intermediate <latex /> source files, you can add a new target to the project manifest (<c>project.ptx</c>) with a <attr>format</attr> of <c>latex</c>.  See <xref ref="cli-project-manifest"/>.
        </p>

      </subsection>


      <subsection xml:id="tutorial-saving">
        <title>Saving your work</title>
        <p>
          Using Codespaces will keep all your files <q>in the cloud</q>,
          saved automatically as you edit.
          As long as your Codespace is active, your files will be saved there
          for your private use. However, inactive Codespaces are periodically
          cleaned up by GitHub (as of writing, this happens after one month of
          inactivity), so you'll need to periodically
          <term>commit &amp; sync</term> your work to your repository
          where it will never be deleted.
        </p>

        <p>
          Recall that your Codespace lives at <c>github.dev</c>, while your
          repository has a <c>github.com</c> address like
          <c>https://github.com/username/reponame</c>).
          This repository serves as a backup of your work in the Codespace, and has the added benefit of
          allowing collaborators to access your files as well. As a bonus, if you made your repository
          public, members of the PreTeXt community who watch
          the <url href="https://groups.google.com/g/pretext-support">PreTeXt-support</url>
          Google group can create their own Codespace based on your public repository and easily answer any
          questions you have.
        </p>

        <p>
          While Git and GitHub have a lot of features, there's a very simple way to use them
          via Codespaces. As you edit files, you'll notice that their filenames will turn orange, and new
          files will appear green. Likewise, a blue number will appear in the left sidebar.
        </p>

        <figure xml:id="tutorial-figure-codespaces-sidebar">
          <caption>Filenames changing color as they are edited in Codespaces</caption>
          <image width="50%" source="codespaces-sidebar.png">
            <description>Screenshot of VS Code sidebar in Codespaces</description>
          </image>
        </figure>

        <p>
          This blue badge is next to the Source Control view.
          You will notice a list of files that were changed;
          you can click on any of these to see what the changes are.
        </p>

        <figure xml:id="tutorial-figure-codespaces-diff">
          <caption>A <q>Git diff</q> showing changes in a file</caption>
          <image width="100%" source="codespaces-diff.png">
            <description>Screenshot of VS Code Git diff in Codespaces</description>
          </image>
        </figure>

        <p>
          <em>Type a message describing the changes you've made</em> then
          click the green <q>Commit and Sync</q> button. If it just says <q>Commit</q>,
          use the drop-down menu to choose <q>Commit and Sync</q>. (If you forget to type a message describing the changes you've made, then a new tab will open: <q>COMMIT_EDITMSG</q> where you can type the message.  When you are done, close the tab.)
        </p>

        <figure xml:id="tutorial-figure-codespaces-sync">
          <caption>Committing and syncing changes</caption>
          <image width="50%" source="codespaces-sync.png">
            <description>Screenshot of VS Code source control in Codespaces</description>
          </image>
        </figure>

        <p>
          To see that this is successful, return to your <c>github.com</c> repository webpage.
          You should see your files with all your
          committed/synced changes. (That is, most of them: many files, such as log files and
          temporary build files that appear in gray within your Codespace, will not
          be synced.
          This is no problem: they are created during a build automatically and don't need to be,
          and really shouldn't be, saved or shared with others.)
        </p>
      </subsection>

      <subsection xml:id="tutorial-generate">
        <title>Generating assets</title>

        <p>
          If your document contains certain elements, you might need to <term>generate</term> their assets
          for use in certain output formats. Depending on your build target, these include:
          <ul>
            <li><tag>latex-image</tag></li>
            <li><tag>sagemath</tag></li>
            <li><tag>asymptote</tag></li>
            <li><tag>youtube</tag></li>
            <li><tag>webwork</tag></li>
            <li><tag>codelens</tag></li>
          </ul>
        </p>

      <p>
        Starting in CLI version 1.7, these assets will be automatically generated whenever you build your output. If you change the source of these assets, they will be regenerated when you build.
      </p>
      <p>
        Regardless of which version of the CLI you are using, you can generate assets as a separate step in much the same way you run a build. You will see a <c>Generate</c> option in the <pretext /> command dialog, just below <c>Build</c>. Select your target and wait for the process to complete, then <c>Build</c> once more to incorporate your generated assets.
      </p>

      </subsection>

      <subsection xml:id="tutorial-deploy">
        <title>Deploy</title>
        <p>
          So you have worked tirelessly to prepare course notes or a book, built and previewed,
          synced changes to your git repository, and now you are ready to share the results of
          your efforts with the world.  It's time to <term>deploy</term> your project!
        </p>

      <p>
        From the <q>PreTeXt Commands</q> dialog, select <q>Deploy</q>. This will automatically take the most recent build of your web target and host it through <url href="https://pages.github.com/">GitHub Pages</url>. Watch the output pane for a link to your published site; unlike the preview link you've been using on <c>github.dev</c> which is private to only you, this <c>github.io</c> link is ready to share with the world. (It can take a few minutes for the site to get set up or updated; there should be another link to view the progress of the GitHub <q>action</q> that reports the progress.)
      </p>

      <p>
        By default, doing a deploy will just publish your <c>web</c> target. It is also possible to deploy multiple targets along with a <q>landing</q> page directing a visitor of your site to the different versions of your project. See <xref ref="processing-CLI" /> for more information.
      </p>
    </subsection>

      <subsection xml:id="tutorial-advanced">
        <title>Using this guide and advanced features</title>
        <p>
          The rest of this guide will help you on your way.
          However, keep in mind that this guide is the work of many volunteers
          over many years, and certain sections may assume the reader is using mechanisms for writing <pretext/>
          that have been around for much longer than the Codespaces environment
          recommended for this tutorial.
        </p>
        <p>
          In particular, there are two advanced mechanisms used by many <pretext/> authors: the
          <term>PreTeXt developer script</term>
          <xref ref="pretext-script"/> (i.e. the <c>pretext/pretext</c> script) and the
          <term>PreTeXt CLI</term> <xref ref="processing-CLI"/>.
        </p>
        <p>
          Under the hood, the PreTeXt CLI is what you're using in Codespaces, and it also has the ability to
          call the PreTeXt developer script as well. If you ever want to use a PreTeXt CLI command, you can open
          a <term>Terminal</term> in your Codespace using the menus, or by pressing <kbd>Ctrl</kbd>+<kbd>`</kbd>
          (the backtick key, found in upper left of many keyboards).
        </p>
        <p>
          From the terminal, you can type in any PreTeXt CLI commands directly. For example,
          typing in the CLI command <c>pretext build web</c> and running it by pressing <kbd>Enter</kbd> builds the
          web target.
        </p>
        <figure xml:id="tutorial-figure-codespaces-pretext-cli">
          <caption>Using the PreTeXt CLI with a Codespaces terminal</caption>
          <image width="80%" source="codespaces-pretext-cli.png">
            <description>Screenshot of using the PreTeXt CLI within Codespaces</description>
          </image>
        </figure>
        <p>
          The CLI should be sufficient to do nearly everything you want to do for your project, and using
          the developer script should be exercised with caution. Nonetheless,
          to access a <c>pretext/pretext</c> developer script feature, you can use <c>pretext devscript</c>.
          For example, if the
          documentation suggests a command like <c>pretext/pretext -foo bar</c>, you could try running
          <c>pretext devscript -foo bar</c>.
        </p>
      </subsection>
    </section>

  <section xml:id="tutorial-install">
    <title>Installing PreTeXt</title>

    <introduction>
      <p>
        The browser-based GitHub Codespaces workflow described in <xref ref="quickstart-example"/> is a quick and easy way to use <pretext /> without needing to install any additional software.  If you prefer to have a local setup of PreTeXt, we recommend one of the following three setups.   
      </p>
    </introduction>

    <subsection xml:id="subsec-installing-a-docker-container">
      <title>Option 1: Installing a Docker container</title>

      <p>
        The closest thing we have to a single click installer is to use a <term>Docker container</term> that includes all the software needed to run PreTeXt.  In fact, the setup described in this section results in an identical environment to the one used in GitHub Codespaces, but it is all locally running on your own computer.  The directions for all operating systems are the same (since the two programs you need to download and install are available for Windows, Mac, and Linux).
      </p>

      <p>
        The one downside to this approach is that you will need a fair amount of disk space (around 5 GB all together), and some of that space will be used to install tools like <latex /> and SageMath that you might already have installed anyway.
      </p>

      <p>
        Here are the steps required to use this option.
        <ol>
          <li>
            <p>
              Download and install <url href="https://code.visualstudio.com/">Visual Studio Code</url>.  This is the desktop version of the text editor used in Codespaces (and is great for all your text editing needs, not just PreTeXt).
            </p>
          </li>
          <li>
            <p>
              Download and install <url href="https://www.docker.com/products/docker-desktop">Docker Desktop</url>.  Once installed, start Docker Desktop and agree to the licensing terms.  You should not need to create an account.
            </p>
          </li>
          <li>
            <p>
              Download the <url href="https://github.com/PreTeXtBook/pretext-codespace/archive/refs/heads/main.zip">PreTeXt Codespace</url> zip file and extract it to a location of your choice.
            </p>
          </li>
          <li>
            <p>
              Launch Visual Studio Code.  Use the <q>File</q> menu to select <q>Open Folder...</q> and navigate to the folder where you extracted the zip file in the previous step.  Select that folder and click <q>Open</q>.
            </p>
          </li>
          <li>
            <p>
              You will likely get a popup in the lower right corner of the window asking if you want to install the devcontainer extension, or if you want to open the current workspace in a devcontainer.  You do want to do both of these.  If you don't get this message, you can install the <q>Dev Containers</q> extension from the Extensions view (click the square icon on the left sidebar) and then use the Command Palette (<kbd>CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>P</kbd>) to run the command <q>Dev Containers: Reopen in Container</q>.
            </p>
          </li>
        </ol>
        
        The last step will take a few minutes the first time since it must download the container image.
      </p>

      <p>
        Upon completing the steps above, you can create a new project and build/view/deploy just like described in <xref ref="tutorial-first-document"/>.
      </p>

      <p>
        Whenever you work on a project locally, you will want to open it in the container (but next time it will boot up much faster since you will already have the container image downloaded).
      </p>
    </subsection>

    <subsection xml:id="subsec-installing-pretext-cli">
      <title>Option 2: Installing the <pretext /> CLI and Additional Software</title>

      <p>
        The <pretext /> CLI is a Python package that can be installed on your computer.  This option is more lightweight than using a Docker container, but it does require you to install several prerequisite programs (including Python itself).  
      </p>

      <p>
        Detailed instructions for installing the <pretext /> CLI with PIP are available in <xref ref="processing-CLI"/>. If you know what you are doing, you can just run `pip install pretext[all]` to get all the python and core parts of <pretext />.
      </p>

      <p>
        This option is great if you already have a lot of the software that would be duplicated in the docker image from Option 1.  In the following list, only python is strictly required, but many features of <pretext /> will not work without the other software. 
        <ul>
          <li>
            <p>
              <term>Python</term> (version 3.10 or later); required.
            </p>
          </li>
          <li>
            <p>
              <term>Node.js</term> (version 18 or later); required to build custom themes for HTML and to build Braille and some epub targets.
            </p>
          </li>
          <li>
            <p>
              <term>Git</term>; required to store your project on GitHub and use the `pretext deploy` command to host your project on GitHub Pages.
            </p>
          </li>
          <li>
            <p>
              <term>PreFigure</term>; required to build  <tag>prefigure</tag> images. You can get this as part of the <pretext /> CLI installation, if you install the cli with <c>pip install pretext[prefigure]</c>, although you might need some additional system libraries installed.  See <url href="https://prefigure.org/">PreFigure's website</url> for more information.
            </p>
          </li>
          <li>
            <p>
              <term><latex /></term> (any standard distribution, including TeXLive, MiKTeX or TinyTex will work); required to build PDF output and if your document includes TiKz images (in a <tag>latex-image</tag> element).
            </p>
          </li>
          <li>
            <p>
              <term>SageMath</term> (version 10.0 or later recommended); required to build SageMath output and if your document includes sageplots (in a <tag>sageplot</tag> element).
            </p>
          </li>
        </ul>
      </p>

      <p>
        While you can use any text editor you like for authoring <pretext /> documents, <term>Visual Studio Code</term> is highly recommended due to the availability of the <c>pretext-tools</c> extension which provides syntax highlighting, autocompletion, and other features that make authoring <pretext /> documents much easier.  You can install this extension from the Extensions view in Visual Studio Code (click the square icon on the left sidebar) or by searching for <c>pretext-tools</c> in the Extensions Marketplace (it is automatically installed if you use the Docker container from Option 1).
      </p>
    </subsection>

    <subsection xml:id="subsec-installing-from-source">
      <title>Option 3: Running <pretext /> <q>from source</q></title>
      
      <p>
        For advanced users, especially if you want to contribute to the development of <pretext />, you can run <pretext /> without the CLI.  To do this, you will need to clone the <url href="https://github.com/PreTeXtBook/pretext">PreTeXt repository</url> and install the required dependencies manually.  This is required if you want to run the <xref ref="pretext-script"><pretext /> script</xref> or even just use <xref ref="xsltproc"><c>xsltproc</c></xref> to process your <pretext /> documents.  Additional information is available in the linked sections.
      </p>

      <p>
        Some context for experienced Python developers: <pretext /> is an open-source <url href="https://en.wikipedia.org/wiki/XML">XML</url> language primarily powered by
        <url href="https://en.wikipedia.org/wiki/XSLT">XSLT</url> and <url href="https://en.wikipedia.org/wiki/Python_(programming_language)">Python</url> tools.
        PreTeXt development is primarily split over two GitHub repositories:
        <url href="https://github.com/PreTeXtBook/pretext">PreTeXtBook/pretext</url>
        for the <q>core</q> functionality of PreTeXt, and the more recent
        <url href="https://github.com/PreTeXtBook/pretext-cli">PreTeXtBook/pretext-cli</url>
        that packages up these resources into a Python package with several UX enhancements
        such as a simplified command line interface and project management that does not require the use of custom makefiles.  Instructions for developing with the CLI are available in its repository's README file.
      </p>

      <p>
        If you're interested in potentially contributing back to PreTeXt someday, please
        feel free to request to join
        <url href="https://groups.google.com/g/pretext-dev">our developer Google Group</url>
        and say hello!
      </p>
    </subsection>

  </section>    
  
  <section xml:id="tutorial-videos">
      <title>Videos</title>

      <p>
        Occasional <q>Getting Started with PreTeXt</q> tutorials are offered to the community via
        Zoom. For updates on when these are available, subscribe to
        <url href="https://groups.google.com/g/pretext-announce">the PreTeXt announcements
        Google Group</url>.
      </p>

      <p>The most recent recording of this tutorial is provided here for your reference.</p>

      <figure xml:id="tutorial-videos-figure">
          <caption>Getting Started with PreTeXt, 2023 July</caption>
          <video xml:id="tutorial-videos-video" youtube="w_Wu5ysIiPQ" preview="getting-started-preview.png"/>
      </figure>
    </section>
</chapter>
