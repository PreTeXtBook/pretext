<?xml version="1.0" encoding="UTF-8"?>

<!--   This file is part of the documentation of PreTeXt      -->
<!--                                                          -->
<!--      PreTeXt Author's Guide                              -->
<!--                                                          -->
<!-- Copyright (C) 2013-2023  Robert A. Beezer                -->
<!-- See the file COPYING for copying conditions.             -->

<chapter xml:id="tutorial">
    <title>Getting Started Tutorial</title>

    <introduction>
      <p>
        This chapter serves as a tutorial for quickly getting started with <pretext /> in your web browser
        using the free <url href="https://github.com/features/codespaces">GitHub Codespaces service</url>.
      </p>
      <objectives>
        <introduction><p>At the end of this tutorial you will have...</p></introduction>
        <ul>
          <li><p>Created a free GitHub account.</p></li>
          <li><p>Created a GitHub Codespace for authoring <pretext/> in your web browser.</p></li>
          <li><p>Learned the first steps to editing a <pretext/> document.</p></li>
          <li><p>Converted your document to both HTML and <m>\LaTeX</m>.</p></li>
        </ul>
      </objectives>
    </introduction>

    <section xml:id="tutorial-github">
      <title>Using GitHub and Codespaces</title>
      <subsection>
        <title>GitHub</title>
        <p>
          <term>GitHub</term> is a freely-available service for authoring, sharing, and deploying
          documents and source code, owned by Microsoft. It uses the free and open-source <term>Git</term>
          software for version management.
        </p>
        <p>
          There are other similar products such as
          <url href="https://about.gitlab.com/">GitLab</url> for managing <pretext/> documents,
          as well as other ways to write <pretext/> that don't require anything
          besides installing the free and open-source <pretext/> software onto your own device.
          However, we will use GitHub as it the most popular way to share and disseminate <pretext/>
          documents, and provides the easiest pathway to getting started to actually write in the <pretext/>
          language.
        </p>
        <p>
          To create your free GitHub account, 
          <url href="https://github.com/signup">
              follow the instructions on GitHub's
              signup page
          </url>. You can also log into an existing GitHub account if you already have one.
          Be sure to note your GitHub username and password in your password manager
          (or however you usually keep track of login credentials).
        </p>
        <p>
          Educators and non-profit researchers can get many of GitHub's paid features
          for free. While this is not strictly required for the rest of the tutorial, it's a
          useful way to avoid GitHub's limit on free Codespaces usage.
        </p>
        <p>
          Apply at
          <url href="https://education.github.com/discount_requests/pack_application">Education.GitHub.com</url>
          to unlock these features (in our experience, applications are usually processed quickly for <c>.edu</c>
          email addresses).
        </p>
      </subsection>
      <subsection>
        <title>Codespaces</title>
        <p>
          A <term>Codespace</term> is an authoring environment that lives in the <q>cloud</q>,
          that is, a virtual machine hosted by GitHub that has all of the software needed to
          create great accessible documents, accessible with just your web browser.
        </p>
        <p>
          This coding environment uses a web version of Virtual Studio
          Code, an open-source text editor, along with the PreTeXt community's
          custom plugins and software to get started authoring quickly.
        </p>
        <p>
          Follow the instructions at <url href="https://github.com/PreTeXtBook/pretext-codespace" />
          to get started. You'll have the option to make your work public (recommended if you want
          support from the rest of the <pretext/> community) or private.
          Then you'll be ready for <xref ref="tutorial-first-build"/>.
        </p>
      </subsection>
    </section>

    <section xml:id="tutorial-first-document">
      <title>Your First Document</title>
      <subsection>
        <title>Building</title>
        <p>
          Inside the VS Code window you opened through Codespaces, open <c>main.ptx</c>. You can build your entire project in a few different ways.
          <ul>
            <li>
              <p>
                Click the green triangle in the top-right corner of the window (hovering will show <c>Build (select target)</c>).  A window will pop up asking for a <term>target</term> to build.  To start just select <q>web</q>.
              </p>
            </li>
            <li>
              <p>
                In the <q>Explorer</q> panel on the left-hand side of the window, you can expand the <q>PreTeXt Commands</q> menu and select the <c>Build</c> option.
              </p>
            </li>
            <li>
              <p>
                You can use the keyboard shortcut <kbd>CTRL</kbd>+<kbd>ALT</kbd>+<kbd>b</kbd> (replacing <kbd>CTRL</kbd> with <kbd>CMD</kbd> if you have a Mac).
              </p>
            </li>
          </ul>
        </p>
      </subsection>
    
      <subsection xml:id="tutorial-previewing">
        <title>Viewing</title>
        <p>
          You can check the output of what you built using the <term>View</term> command. 
          Again, you can access this in multiple ways: top-right icon or PreTeXt Commands menu.
          When you use either of these, you may be given options on how to view the document,
          depending on what VS Code plugins you have available to you. Try one or another until
          you're able to view your web build in either a new tab of your browser or a tab within
          VS Code.
        </p>
    
        <p>
          When you make edits to your source files, you will need to build again, and then refresh
          the preview window to see the changes.
        </p>
      </subsection>
    
    
      <subsection xml:id="tutorial-saving">
        <title>Saving your work</title>
        <p>
          Using codespaces will keep all your files <q>in the cloud</q> on GitHub's server.  As long as you don't delete your codespace, your files will be saved there.  However, you will want to <term>push</term> these files to your <term>git repository</term> on GitHub to make this save perminent.  This has the benefit of allowing collaborators to access your files as well (your codespace is unique to your account).
        </p>
    
        <p>
          There is a <em>lot</em> to learn about git, but luckily using VS Code lets you do everything you need using menus (you don't need to use the command line, unless you want to).  Everything can be controlled using the <term>Source Control</term> view: it should be third from the top on the very left of the window, an icon with splitting paths, and likely a badge showing how many files you have changed.
        </p>
    
        <p>
          Here are the basic concepts you need to understand.
          <ul>
            <li>
              <p>
                The program <term>git</term> keeps track of all the changes you make to files inside of your <term>repository</term> (in this case, the folder containing your project). 
              </p>
            </li>
            <li>
              <p>
                Once you have edited your files and are happy with all of them, you tell git to track the set of changes as a <term>commit</term>.  This creates a handy <em>breakpoint</em> you could return to if you want to go back to an earlier version.
               </p> 
                
               <p>
                There are two steps to creating a commit (which you can often do all at once in practice):
                <ol>
                  <li>
                    <p>
                      You <term>stage</term> the files you want to update in the commit.
                    </p>
                    <p>
                      You <term>commit</term> the stage files including a <term>commit message</term>.
                    </p>
                  </li>
                </ol>
                Doing this in two steps can be helpful if you want to commit only some of the files that have changed.
              </p>
            </li>
            <li>
              <p>
                Once you have one or more commits, you need to sync these changes with GitHub.  To <q>upload</q> your changes, you <term>push</term> the repository.  To download changes that you are someone else made, you <term>pull</term> the repository.
              </p>
            </li>
          </ul>
        </p>
    
        <p>
          Now, how do we do these things in VS Code?  Start by looking at the Source Control view.  You will notice a list of files that were changed.  You can click on any of these to see what the changes are (you will see a side-by-side view of the original and updated version).
        </p>
    
        <p>
          If you are comfortable staging and committing in one step, you can simply write yourself a short message in the textbox above the big green <q>Commit</q> button, and click the button.  If you want to stage first, click the + next to each file under <q>changes</q> to stage them.
        </p>
    
        <p>
          The green button should now turn into a <q>Sync</q> button.  When you click that, it will do a quick pull and then a push, to sync changes with GitHub.
        </p>
    
        <p>
          The only small point about using git is that no all files will be tracked.  This is on purpose, since temporary files really should not be <q>remembered</q> using this version control setting.  Which files or types of files are ignored by git is controled by the <q>.gitignore</q> file in your repository.
        </p>
    
        <p>
          In particular, we do not track the output of builds.  Git is used to track progress on your source, which you build into output at any time.  If you want others to be able to see the output of your work without building it themselves, you need to deploy your work.
        </p>
      </subsection>

      <subsection xml:id="tutorial-generate">
        <title>Generating assets</title>
    
        <p>
          If your documentment contains some more complicated elements, you might need to <term>generate</term> them for them to show up.  The elements that require this are (depending on what your build target is):
          <ul>
            <li><tag>latex-image</tag></li>
            <li><tag>sagemath</tag></li>
            <li><tag>asymptote</tag></li>
            <li><tag>youtube</tag> (for thumbnail previews)</li>
            <li><tag>webwork</tag></li>
            <li><tag>codelense</tag></li>
          </ul>
        </p>
    
        <p>
          You can generate assets in much the same way you run a build.  There is a button on the top-right of the window, and option in the <q>PreTeXt Commands</q> menu, you can type <c>pretext generate</c> in the terminal, or use the keyboard shortcut <c>CTRL+ALT+g</c>.
        </p>
    
        <remark>  
          <p>
            Note that generating assets requires additional software.  If you started the default codespace, then this is not necessarily installed.  You can fix this by entering the following command in the terminal:
          </p>
          <pre>
            sudo bash ./.devcontainer/postCreateCommand.sh
          </pre>
          <p>
            Alternatively, when you create a codespace, you can click the three dots next to the + and select the devcontainer that has <q>pretext-full</q> in its name. 
          </p>
          <p>
            Once you install this software once, you should be good to go as long as your codespace exists.
          </p>
        </remark>
      </subsection>
    
      <subsection xml:id="tutorial-deploy">
        <title>Deploy</title>
        <p>
          So you have worked tirelessly to prepare course notes or a book, built and previewed, synced changes using git, and now you are ready to share the results of your efforts with the world.  It's time to <term>deploy</term> your project.
        </p>
    
        <p>
          With our Codespace setup this is simple.  From the <q>PreTeXt Commands</q> menu, click on <q>Deploy to GitHub</q>.  This will automatically take the most recent build of your web target and host it through <url href="https://pages.github.com/">GitHub Pages</url>.  Watch the output pane for a link to your published site. (It can take a few minutes for the site to get set up or updated; there should be another link to view the progress of the GitHub <q>action</q> that reports the progress.)
        </p>
      </subsection>
    </section>
    <section xml:id="tutorial-videos">
      <title>Videos</title>

      <p>A series of videos showcasing how to get started with PreTeXt
      as the ecosystem evolves over time is curated by
      <url href="https://clontz.org">Steven Clontz</url>. Roughly once
      a month, a <q>Getting Started with PreTeXt Today</q> presentation is
      made available on Zoom, showcasing any new workflows or technologies
      that are best recommended for writing modern PreTeXt. These videos
      are documented here for your reference.</p>
  
      <figure xml:id="gsv-2023-jan">
          <caption>Getting Started in 2023 Jan</caption>
          <video xml:id="gsv-2023-jan-video" youtube="y-33Ube-Rhk"/>
      </figure>
    </section>
</chapter>
