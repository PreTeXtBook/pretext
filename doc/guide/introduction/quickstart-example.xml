<?xml version="1.0" encoding="UTF-8"?>

<!--   This file is part of the documentation of PreTeXt      -->
<!--                                                          -->
<!--      PreTeXt Author's Guide                              -->
<!--                                                          -->
<!-- Copyright (C) 2013-2016  Robert A. Beezer                -->
<!-- See the file COPYING for copying conditions.             -->

<chapter xml:id="quickstart-example">
    <title>Getting Started Tutorial</title>

    <introduction>
      <p>
        This chapter serves as a tutorial for quickly getting started with <pretext />.  We will describe how to run <pretext /> in the cloud using CoCalc, and one path to installing <pretext /> on a local machine (assuming you already have some prerequisite software installed).  Then we will generate an example book, as well as a minimal example <pretext /> document and convert them to HTML and PDF.  Finally, we will discuss some ways to extend the minimal example.  Let's get started.
      </p>
    </introduction>

    <section xml:id="quickstart-getting-pretext">
      <title>Getting <pretext /></title>
      <p>
        For the sake of this tutorial, we will use the <pretext />-CLI, a python-based command line interface that simplifies the installation of <pretext />, and allows you to easily create, build (convert), and view <pretext /> documents.  Other setups that provide more flexibility at the cost of complexity can be found in <xref ref="processing"/>.
      </p>

      <p>
        You have two options for running the <pretext />-CLI: you could do everything in the cloud using <url href="https://cocalc.com/" visual="cocalc.com">CoCalc</url>, or you could install PreTeXt on your own computer.  The CoCalc route is faster and doesn't require installing Python and <latex /> on your computer, but unless you pay for a subscription to CoCalc, your experience there might be limited.  A local install also allows you to use a more powerful text editor that might have <pretext />-specific support that speeds up editing.
      </p>

      <p>
        Luckily, both processes are relatively easy to try out, so there is no reason not to attempt both of the options below.
      </p>

      <p>
        Note: We will work at the <term>command-line</term>
        <idx>command-line</idx> inside of a <term>terminal</term> or <term>console</term>.<idx>terminal</idx><idx>console</idx>
        If you do not know what this is, it will seem very primitive at first.  Sometimes the old ways are the best ways.  This will be called a <q>Command Prompt</q> or <q>PowerShell</q> in Windows or a <q>Terminal</q> on a Mac.  In Linux it may be known as a <q>console</q> or a <q>shell</q>.
        Whenever the guide says to enter something on the <em>command line</em> or in a <em>terminal</em>, or just to <em>enter the command</em>, this is what we are talking about.
      </p>

      <paragraphs>
        <title>Using CoCalc</title>
        <p>
          CoCalc has graciously already installed the <pretext />-CLI, as well as <latex />, so there is almost no setup required.
        </p>
        <p>
          Simply visit <url href="https://cocalc.com/" visual="cocalc.com"/>.  There you can click on the <q>Run CoCalc Now</q> button, or sign up for a free account so you can save your work.  Once you are in a CoCalc <em>project</em>, click on the <q>New</q> tab and select the <q>Linux terminal</q> button.  This will give you a command prompt where you can start typing commands.
        </p>

        <p>
          At this point, you can skip directly to the next section of the tutorial, <xref ref="quickstart-example-projects"/>.
        </p>
      </paragraphs>
      <paragraphs>
        <title>Local Installation</title>
        <p>
          Before you can install <pretext /> locally, make sure you have the following software on your computer, or else install it using instructions easily searched for online.
          <ul>
            <li>
              <p>
                Python, version 3.8 or later.  In a terminal, type <c>python --version</c> to ensure you are already set up.
              </p>
            </li>
            <li>
              <p>
                <latex />.  Try <c>xelatex --version</c> to see if you already have this.
              </p>
            </li>
            <li>
              <p>
                Any text editor.  <url href="https://code.visualstudio.com/" visual="code.visualstudio.com/">Visual Studio Code</url> is a reasonable choice (and has a pretext-tools extension available), but so are SublimeText, atom, emacs, vi, etc.  See <xref ref="editors"/>.
              </p>
            </li>
          </ul>
        </p>

        <p>
          Now we can install <pretext />.  Open a terminal and type the following:
        </p>

        <console>
          <input>pip install pretextbook</input>
        </console>

        <p>
          If this fails, try:
        </p>

          <console>
            <input>python -m pip install pretextbook</input>
          </console>
        <p>
          The <c>python -m</c> helps in case Python is on your <init>PATH</init> but <c>pip</c> is not.  This is a useful fix for the rest of the commands listed for the <pretext />-CLI.
        </p>

        <p>
          To ensure that the CLI is installed, type <c>pretext --version</c> (or <c>python -m pretext --version</c>) and you should get back a number (0.5.1, for example).
        </p>

        <p>
          We are now ready to move on to creating and converting a new <pretext /> document.
        </p>
      </paragraphs>
    </section>

    <section xml:id="quickstart-example-projects">
      <title>Example Projects</title>
      <p>
        We are now ready to create our first <pretext /> project.  First, let's run through the steps to start a new book, and see how to convert it to HTML and PDF.  After that, we will create a very minimal article to explore the structure of a <pretext /> project.
      </p>

      <paragraphs>
        <title>Your First <pretext /> Book</title>
        <p>

          From a terminal, type:
        </p>
          <console>
            <input>pretext new book</input>
          </console>
        <p>
          This will create a new folder at your current location called <c>new-pretext-project</c>. The folder contains the <term>source</term> files for your project (the files you will edit to add content to your book), as well as a folder for <term>assets</term> (such as external images you might put in your book), a folder for <term>publication files</term> (which describe some customizations for your book) and a <c>project.ptx</c> file that tracks options for different output <term>targets</term>.
        </p>

        <p>
          Next, change directories to the new-pretext-project.  In the terminal:
        </p>

        <console>
          <input>cd new-pretext-project</input>
        </console>

        <p>
          Now we build an HTML version with the following command:
        </p>

        <console>
          <input>pretext build html -d</input>
        </console>

        <p>
          The <c>-d</c> flag tells <pretext /> to generate any images described in the source.  After doing this once, you can omit the <c>-d</c>, unless you modify the code for one of the images described in the source.
        </p>

        <p>
          Finally, we can view the results of our conversion using this command:
        </p>

        <console>
          <input>pretext view html</input>
        </console>

        <p>
          The output from this command will give a url to click on that should show you to html output.
        </p>

        <p>
          To build and then view a PDF, you would enter the following two lines:
        </p>

        <console>
          <input>pretext build pdf</input>
          <input>pretext view pdf</input>
        </console>
      </paragraphs>

      <paragraphs>
        <title>A Minimal Example</title>
        <p>
          Let's back up and create a simpler project to explore.  First rename the <c>new-pretext-project</c> folder you just created to something like <c>book-example</c>, either using your file manager or in the terminal by doing the following (assuming you were still inside that folder):
        </p>
        <console>
          <input>cd ..</input>
          <input>mv new-pretext-project book-example</input>
        </console>
        <p>
          Now enter:
        </p>
        <console>
          <input>pretext new hello</input>
        </console>
        <p>
          This creates another <c>new-pretext-project</c>, and you can follow the directions above to navigate to it, build and view it.
        </p>

        <p>
          Time to look at the source.  Open the file <c>main.ptx</c> in the <c>source</c> folder of your project.  Make sure this opens in a text editor, and that you see something like this:
        </p>

        <pre>
          <![CDATA[
          <?xml version="1.0" encoding="UTF-8"?>
          <pretext>
            <article>
              <title>Hello World!</title>
              <p>This is a PreTeXt document.</p>
            </article>
          </pretext>
          ]]>
        </pre>

        <p>
          This illustrates the structure of all <pretext /> documents.  In particular, notice:
          <ul>
            <li>
              <p>
                The first line says that the text file you are looking at is an <init>XML</init> file.  This should go at the top of every pretext file, including any that you later import.
              </p>
            </li>
            <li>
              <p>
                The next line and the last line of the document are the start and end of the <tag>pretext</tag> tags.  Every pretext document needs these to wrap all of their contents.
              </p>
            </li>
            <li>
              <p>
                Inside those, we have <tag>article</tag> tags, since this is an article (and not a book, which would have <tag>book</tag> tags instead).
              </p>
            </li>
            <li>
              <p>
                Then, inside the article, we have a title (the text of the title is wrapped in the <tag>title</tag> tags), followed by a paragraph (in <tag>p</tag> tags).
              </p>
            </li>
            <li>
              <p>
                Notice how every opening tag (no slash) has a paired closing tag (with a slash, plus the identical name).  Think of these tags as defining a box that holds either text content or other boxes (defined by a pair of opening and closing tags).
              </p>
            </li>
          </ul>
        </p>

        <p>
          In the next section we will expand this minimal example by adding some additional content.
        </p>
      </paragraphs>
    </section>

    <section xml:id="quickstart-extend-minimal-example">
        <title>Extending the Minimal Example</title>

        <p>We will not keep reproducing the entire example but instead suggest a series of modifications.  After each edit, convert the file again (<c>python -m pretext build html</c>) to make sure your syntax is correct (before you get too far along) and to see the changes (<c>python -m pretext view html</c>).</p>

        <p>The generic name of the resulting files is pretty bland, and it would be nice to have a title for our article.  We will add an <term>attribute</term><idx>attribute</idx> to the <tag>article</tag> tag, specifically <attr>xml:id</attr>, which is a very important part of <pretext /> and used frequently.  For now, it will be used to generate the names of the output files.  (The <q>at</q> symbol is a way of reminding you that it is an attribute, it is not part of what you author.)</p>

        <p>So make the following modifications:</p>

        <pre>
        <![CDATA[
        <article xml:id="hello">
          <title>Hello World!</title>
          <p>This is a PreTeXt document.</p>
        </article>
        ]]>
        </pre>

        <p>Your outputs should now have a title, and more importantly, the HTML filename will be <c>hello.html</c>.</p>

        <p>Let us give our article a bit of structure.  We will have an introduction and two sections with their own titles.  So replace the one-sentence paragraph by the following, all following the article title and contained within the <tag>article</tag> tags.</p>

        <pre>
        <![CDATA[
        <introduction>
          <p>
            Let's get started.
          </p>
        </introduction>

        <section xml:id="section-short">
          <title>Beginnings</title>

          <p>
            This is a short sentence.
          </p>
        </section>

        <section xml:id="section-multiple-paragraph">
          <title>Endings</title>

          <p>
            This is a longer sentence that is followed by another sentence.
            Two sentences, and a second paragraph to follow.
          </p>

          <p>
            One more short paragraph.
          </p>
        </section>
        ]]>
        </pre>

        <p>The <latex />/PDF output will be a bit odd looking since every paragraph is so short, but all the content should be there.  Notice that the HTML output now has a table of contents to the left and active navigation buttons.  Also the two sections are in their own files and the URLs have been constructed from the supplied values of the <attr>xml:id</attr> attribute.</p>

        <p>One last experiment<mdash />let's add some mathematics.  We use XML tags, <tag>m</tag> for <q>inline</q> mathematics and <tag>me</tag> for a <q>math equation</q> which will be rendered with a bit of vertical separation and centered from left to right.  We use <latex /> syntax for mathematics, which has been the standard for working mathematicians for decades.  For electronic presentation, we rely on the excellent <url href="https://www.mathjax.org/" visual="www.mathjax.org/">MathJax</url> project which basically supports all the syntax of the <url href="https://www.ctan.org/pkg/amsmath?lang=en" visual="www.ctan.org/pkg/amsmath?lang=en">amsmath</url> package from the American Mathematical Society.  Add the following sentence to any of the paragraphs of your article (inside on of the <tag>p</tag> tags).</p>

        <pre>
        <![CDATA[
        If the two sides of a right triangle have lengths
        <m>a</m> and <m>b</m> and the hypotenuse has length
        <m>c</m>, then the equation <me>a^2 + b^2 = c^2</me>
        will always hold.
        ]]>
        </pre>

        <p>So your final source file might look like the following. </p>

        <pre>
        <![CDATA[
        <pretext>
          <article xml:id="hello">
            <title>Hello World</title>

            <introduction>
              <p>
                Let's get started.
              </p>
            </introduction>

            <section xml:id="section-short">
                <title>Beginnings</title>

                <p>
                  This is a short sentence.
                </p>
            </section>

            <section xml:id="section-multiple-paragraph">
                <title>Endings</title>

                <p>
                  This is a longer sentence that is followed
                  by another sentence. Two sentences, and a
                  second paragraph to follow.
                </p>

                <p>
                  One more short paragraph.  If the two sides of a
                  right triangle have lengths <m>a</m> and <m>b</m>
                  and the hypotenuse has length <m>c</m>, then the
                  equation <me>a^2 + b^2 = c^2</me> will always hold.
                </p>
            </section>
          </article>
        </pretext>
        ]]>
        </pre>

        <p>
          You now have many of the basic skills you would need to write an entire research article in mathematics, and should be in a position to learn the remainder easily and quickly.  Poke around the book-example we created earlier to see how to include modular files, as well as some of the other blocks (examples, theorems, figures) you can include.  These constructions are detailed in the next few chapters.  For a quick introduction to what is available, also see the <xref text="title" ref="part-basics"/>.
        </p>
    </section>
</chapter>
