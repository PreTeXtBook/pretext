<?xml version="1.0" encoding="UTF-8"?>

<!--   This file is part of the documentation of PreTeXt      -->
<!--                                                          -->
<!--      PreTeXt Author's Guide                              -->
<!--                                                          -->
<!-- Copyright (C) 2013-2016  Robert A. Beezer                -->
<!-- See the file COPYING for copying conditions.             -->

<chapter xml:id="author-faq">
    <title>Author FAQ: Frequently Asked Questions</title>

    <p>Technical questions first, followed by questions about markup.</p>

    <p><ol>
        <li>
          <title>On my local machine, why is the <fillin characters="8"/> not working?</title>

            <p>
              The <q><fillin characters="8"/></q> could be a knowl that appears empty.
              Or a sage cell that appears empty.
              Or an interactive element of some sort that seems broken.
              Or any component of the HTML page that is <q>fancy</q>.
            </p>

            <p>
              Viewing an HTML file on your own computer is not the same as visiting
              it on a website. There is no web server, so you should assume that
              things will be different.
            </p>

            <p>
              The cause of the difficulty is that some web browsers will behave
              differently when viewing a local file compared with viewing it on a website.
              If there are other resources to fetch (for example, the content of a knowl)
              the browser may consider it a security risk to fetch them while viewing
              a local file.
            </p>

            <p>
              Try viewing your HTML file using a different browser, and you may find that
              the feature is working there. However the real test is to transfer the
              files to an actual web server, or to set up a local web server so that local
              files operate in the usual way.
            </p>

            <p>
              To set up a local server, see <xref ref="processing-testing-html"/>.
            </p>
        </li>

        <li>
            <title>How do I install <c>xsltproc</c> on Ubuntu or Debian Linux?</title>
            <p>
              <c>sudo apt-get install xsltproc</c>
            </p>
        </li>

        <li>
            <title>How do I install <c>pdf2svg</c>?</title>
            <p>
              <c>pdf2svg</c> is necessary for TikZ diagrams in HTML.
            </p>

            <p>
              On Debian or Ubuntu Linux:
              <c>sudo apt-get install pdf2svg</c>.
            </p>

            <p>
              To install <c>pdf2svg</c> on a Mac, you will need to install MacPorts.
              Read the directions carefully, since you will need to install Xcode
              (available from the Mac App Store) first.
              Make sure that the command line tools are installed by running Xcode.
              After Xcode is installed read the directions to install Macports.
              Once MacPorts is installed run the following command to install <c>pdf2svg</c>:
              <c>sudo port install pdf2svg</c>.
              Be patient as this will take a few minutes.
              To get rid of any intermediate build files, run the command
              <c>sudo port clean --all all</c>.
              Again be patient.
            </p>

            <p>
              If you have trouble with MacPorts, try HomeBrew.
            </p>
        </li>

        <li>
            <title>Why is there no tag for bold?</title>
            <p>
              Because the first principle of <pretext/>
              is that the markup captures the structure of the document,
              not the appearance.
            </p>

            <p>
              A better question is: <em>why</em> do you want to print something in bold?
              Is it emphasis? (See <tag>em</tag>.)
              Is it the volume number of a journal? (See <tag>journal</tag>.)
              Do you want to SHOUT?  Try <tag>alert</tag>.  And so on. There are lots of good answers, some of which are not yet implemented.  We would love to hear about elements you need that are about expressing content, and not about altering presentation.  See <xref ref="principle-markup" text="type-local">Principle</xref>.
            </p>
        </li>

        <li>
            <title>Can I create <pretext/> source in Microsoft Word or Google Docs?</title>
            <p>Unlikely.  <pretext/> is designed around <init>XML</init> markup, so using a text editor to create a text file is the intended process for creating source.  When you create a file with other word processors it is likely to use different characters in some places, such as <q>smart quotes</q>, and convert other things you type, such as converting three periods into a single ellipsis character.  And if you make font changes, such as italics for emphasis, that will not translate directly to <pretext/>.</p>

            <p>Perhaps you know somebody technically-minded you want to convert your word-processor files for you?  First, this is a tedious job.  Second, they may not accurately translate your intent.  Third, you cannot make any edits and you will be <em>reliant</em> on them alone to maintain your project for you.</p>

            <p>If you insist on authoring with a traditional word-processor, then you should.  But you will get whatever output that tool provides, and miss out on the benefits of the semantic markup that allows us to create all the various output formats <pretext/> provides.</p>
        </li>

        <li>
            <title>Why do I get no output and some warnings about bugs?</title>
            <p>There is a good chance you have <q>modularized</q> your source files and have not included the <c>--xinclude</c> switch on the command-line when you ran <c>xsltproc</c>.  (See <xref ref="processing-modular" />.)
               If that was your mistake, then you should have seen a warning.
               Please check to see if there was a warning you missed.  (If not, we can improve the warning if you tell us how your source was organized.  So please do, since we would love to hear about it.)</p>
        </li>

        <li xml:id="faq-pull-regularly">
            <title>I don't like surprises and have not updated in months.  Why do I now have a problem?</title>
            <p>We almost never release mistaken code that breaks output produced from valid source (<xref ref="schema" />).  And when we have, the cause is usually a small typo, or something that gets fixed easily and quickly.  We do sometimes make backwards-incompatible changes, but you always get warnings, often the changes can wait, there are announcements on the mailing lists, and whenever possible, we update tools that automate the changes.</p>

            <p>As volunteers, we cannot support problems from old versions, and sometimes we have to implement changes in reaction to third-party software (like MathJax), which is beyond our control.  So while development is rapid, we implore you to remain on the <c>dev</c> branch of the repository and <c>git pull</c> regularly.  Such as <em>daily</em>, with your morning coffee as you sit down to write, or with your last compilation of the evening.  You will have <em>far fewer unpleasant surprises</em> this way, and we can help you better.</p>

            <p>We understand that <pretext /> is a moving target, but we are iterating to a better state, and it is best to have everybody along for the <em>whole</em> ride.</p>
        </li>

        <li xml:id="faq-keep-up-with-changes">
            <title>I have not updated in months, so I did a pull, and now I have a bunch of warnings.  How do I catch up?</title>
            <p>Changes on our end which produce new warnings are almost always announced on the <c>pretext-announce</c> Google Group.  This is a very low-traffic, announcement-only list, so you could skim the messages you missed.  Also, read warnings carefully, as they often have explicit suggestions about what to do next.</p>
        </li>

        <!-- mathbook-xml-support:  2015-06-21:  Subscripts in custom lists -->
        <!-- mathbook-xml-support:  2016-06-19:  Formulas in list labels    -->
        <li>
            <title>How do I put mathematics into my list labels?</title>
            <p>First, realize that the way <latex/> uses the term <term>label</term> in the context of lists is different from how much of the rest of the world uses the term in this context.  In our case the <attr>label</attr> attribute describes the style of the grouping markers.  For example, bullets versus squares on items of an unordered list, or Roman numerals versus Arabic numerals on an ordered list.  So this attribute conveys information <em>about</em> the list, not content <em>of</em> the list.  And even if you tried putting an <tag>m</tag> tag into the value of the attribute, you would not have any luck since <init>XML</init> does not even allow that construction.  Finally, there is no real good way to accomplish this in <init>HTML</init>, so conversion to that format would be difficult.</p>

            <p>The alternative is to use a description list, with a <tag>dl</tag> element.  Put your mathematics in the <tag>title</tag> and put the associated content into the remainder of the <tag>li</tag>.  Or, put titles on the list items of an ordered or unordered list.</p>
        </li>

        <li>
            <title>I have errors when I try to validate my markup, but everything looks okay when I make the HTML and the PDF.  Should I be worried?</title>

            <p>
              Occasionally the schema lags behind the code, so your first step is to
              post to <c>pretext-support@googlegroups.com</c> to find out if it is
              a problem with the schema.
            </p>

            <p>
              Possibly there is another way to accomplish what you want, and that
              markup will fit the schema.
              Or maybe what you are doing meets the <q>common and reasonable</q>
              test and can become a feature request.  The discussion on
              <c>pretext-support</c> should provide an answer.
            </p>
        </li>

        <li>
            <title>Why are theorems, definitions, examples, remarks, etc.<nbsp/>all numbered using the same counter?</title>
            <p>The following is an argument in favor of using common counters for blocks of similar appearance. The argument is stronger in the context of using a printed copy of the book, where physical page flipping is necessary, but also applies to scrolling through a (long) page in a web browser.</p>

            <p>Suppose your professor gave you a note to review Example 2.4.7 in your textbook. The <q>2.4</q> is useful information directing you to Chapter 2, Section 4. You can tell by the <q>7</q> that the example is probably not right at the beginning of the section, so you open to the middle of the section. You find yourself on a page with no examples, but you do see Remark 2.4.11. What do you do: flip forward or flip backward?</p>

            <p>If examples and remarks are numbered using separate counters, you have no information about which way to go. You need to make a random decision, and flip pages until you find another example that you can use as a guidepost.  And examples might be rare and sparse, so it may take quite a bit of page flipping to find that guidepost. You may end up at Example 2.4.8, telling you that you need to flip backward now. But how far? Will it be one page earlier or twenty?</p>

            <p>For a more expansive discussion along these lines, see <xref ref="publisher-numbering"/>.</p>

            <p>Also, as an author, recognize that there is a very flexible mechanism for making lists of objects that may be included in the <tag>backmatter</tag> (or elsewhere).  To continue the example here, you could make a list of all the examples in the book, and a separate list of all the remarks.  Each list would be in the order of appearance, include the number (and a title if you provide one).  In <init>HTML</init> output, each is a knowl which will quickly provide the content (independent of location), and also provides an <q>in-context</q> link to take you to the location for surrounding material.  This useful feature requires very little additional effort, especially if you title your blocks as you author them.</p>
        </li>

        <li>
            <title>Why do I have <latex /> errors?</title>
            <p>
              If you have errors when you run <c>pdflatex</c> or <c>xelatex</c>,
              that is more likely to be caused by a problem with your <latex /> installation
              than with <pretext />.  It is difficult to make legitimate <pretext /> 
              that fails to compile; an exception being math markup inside a math element
              (<tag>m</tag>, <tag>me</tag>, and friends).
            </p>

            <p>
              To check your <latex /> installation, run <c>pdflatex -version</c>.  
              If it reports something older than <q>TeX Live 2017</q>,
              then updating may help.  If the trouble seems to be coming from a
              particular package, then check which version of the package is being used.
              For example, if the <q>tasks</q> package is causing a problem,
              run <c>kpsewhich tasks.sty</c> in the directory where you are
              compiling the <latex />.  If the package is in your personal
              texmf tree, that may be the problem.
            </p>

            <p>
              If the PDF is created without errors, but something looks wrong in the PDF,
              then probably the <pretext /> source markup is wrong.  Validate your source
              against the schema (see <xref ref="schema-validation" />), and also carefully examine the HTML output.  
              If that does not reveal the problem, seek expert help.
            </p>
        </li>

        <li>
            <title>I have great output, so why does validation produce hundreds of errors?</title>
            <p>Success with a tool like <c>xsltproc</c>, in terms of no errors and great-looking output, does not mean your source is correct.  <init>XSLT</init> processing can be forgiving, and many invalid constructions just work, and look great.  But that is no guaranteee this situation will continue, or the same happy accidents occur for a conversion to a different output format.</p>

            <p>We do raise some errors during processing with <c>xsltproc</c>, but error-checking your input is a job for a validator, so in theory we should not ever produce any errors during a conversion.  So strive for having 100% valid <pretext /> source, not simply great-looking results.  See <xref ref="schema" /> and <xref ref="schema-install" />.</p>
        </li>

        <li>
            <title>Why not <latex/>?  Why <pretext/>?</title>
            <p><tex/> was first released in 1978.  There was no Internet, no <init>HTML</init>, no Unicode, and no YouTube.  There have been many attempts to convert <tex/>/<latex/> to more modern document formats.  They are not hard to find<mdash/>none is satisfactory.  We know because we have spent many years trying to adapt them to our purposes.</p>

            <p>Many laud <latex/> for its ability to separate content from presentation.  The key word is <em>ability</em>.  It is possible to use <latex/> in a purely semantic way.  But it very rarely happens in practice.  And we suspect that when it does, the result looks much like <init>XML</init> anyway, such as the use of many <c>\begin{}/\end{}</c> pairs.  <latex/> allows authors enough freedom that it is impossible to accurately discern intent in a totally automated way.</p>

            <p>By contrast, an <init>XML</init> vocabulary defined by a schema (i.e. <pretext/>) forces authors to communicate intent and denies authors the opportunity to micro-manage presentation.  The result is automated conversions to many useful output formats with no extra effort from the author, including future conversions to formats not yet imagined.  And <init>XSL</init>, once understood, is a robust and powerful tool for the sorts of text-manipulation tasks necessary.</p>
        </li>

        <li>
            <title>Why do I have an <q>extra</q> period at the end of a title?</title>
            <p>Author your titles <em>without</em> punctuation at the end meant for spacing or separation (period, colon, semi-colon, hyphen).  Do include punctuation which imparts meaning (question-mark, exclamation-point).  <pretext /> will then add separation (a period, or spacing), as needed, in all the places where it is required.  But <pretext /> will respect your question-marks and exclamation-points.</p>

            <p>If you think you have an additional punctuation character that conveys meaning at the end of a title, please bring it to our attention.</p>
        </li>

        <li>
          <title>I'm a little confused about the less-than character, the ampersand, and <q>escape characters</q> in general</title>

          <p>When you process <init>XML</init>, the less-than character, <c>&lt;</c>, is a signal that the name of an opening or closing tag is coming next.  How do you prevent this if you really need the character, especially for something like computer code?  Answer: you use the <q>escaped</q> version, <c>&amp;lt;</c>.  The ampersand is known as an <term>escape character</term>.  It is a signal to the processor to escape from its usual rules.  <q>But,</q> I hear you say, <q>we just gave the ampersand character a special meaning, now how do I get <em>that</em> character when I need to say <sq>I went to the A&amp;P store.</sq>?</q>  Simple<mdash/>there is an escaped version, <c>&amp;amp;</c>.</p>

          <p>So think of <c>&amp;lt;</c> and <c>&amp;amp;</c> as <em>being</em> the characters <c>&lt;</c> and <c>&amp;</c>.  End of story.  These two concessions should <q>work</q> throughout your <pretext/> source and in every conversion.  Every markup language needs, and uses, an escape character, but <init>XML</init> and <pretext/> have you covered and really only need these two (infrequent) exceptions.</p>

          <p>It is worth repeating: think of the escaped versions of the characters as actually being the characters themselves.  That is the way the <init>XML</init> processor sees them and uses them.  For more, see <xref ref="overview-exceptional-characters"/>, <xref ref="overview-verbatim-literal"/>, <xref ref="topic-exceptional-characters"/>, <xref ref="topic-verbatim-literal"/>, and <xref ref="topic-url-characters"/>.</p>

          <p>Postscript:  <init>XML</init> has the escaped characters <c>&amp;gt</c>, <c>&amp;apos</c>, and <c>&amp;quot</c> for <c>&gt;</c>, <c>&apos;</c>, and <c>&quot;</c> (respectively).  But they are rarely (never?) necessary within <pretext/>.</p>

          <p>Extra-credit homework: think about how some of the above was authored and then look at the source to grade your own work.</p>
        </li>

        <li>
          <title>The labels of my description list are long, and the formatting is really bad.</title>

          <p>Use shorter label text?  Read too about the <attr>width</attr> hint for list items within <xref ref="topic-lists"/>.</p>

          <p>Or convert your list to an <tag>ol</tag> or <tag>ul</tag>.  The titles will now render more like their own paragraphs.</p>
        </li>

        <li>
          <title>My math looks great in one output format (<latex/> or <init>HTML</init>) but is causing errors or looks bad in another output format (<init>HTML</init> or <latex/>).  What's up?</title>

          <p>There are subtle and minor variations and restrictions around the interpretation of <latex/> syntax by <latex/> itself and the MathJax Javascript routines for rendering in a web page.  Work backwards from <xref ref="mathematics-notes"/> for details.</p>
        </li>
    </ol></p>
</chapter>