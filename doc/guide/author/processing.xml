<?xml version="1.0" encoding="UTF-8"?>

<!--   This file is part of the documentation of PreTeXt      -->
<!--                                                          -->
<!--      PreTeXt Author's Guide                              -->
<!--                                                          -->
<!-- Copyright (C) 2013-2016  Robert A. Beezer                -->
<!-- See the file COPYING for copying conditions.             -->

<chapter xml:id="processing">
    <title>Processing, Tools and Workflow</title>

    <introduction>
        <p>This chapter explains in full detail how to convert your source into various output formats, using both the simple <pretext />-CLI as well as other methods to combine your source file with an XSL stylesheet that might provide greater flexibility and control.  It expands on the simple cloud-based workflow in <xref ref="tutorial" />, providing options for a local installation and processing.</p>
    </introduction>

    <section xml:id="processing-basic">
        <title>Options for Processing</title>

        <p>
            There are currently three supported options for converting (processing) your source:
            <ol>
                <li>
                    <p>
                        The <pretext/>-CLI: very easy and friendly, but somewhat limited in customization.  Requires Python 3.8 or later.  Documentation appears in <xref ref="processing-CLI" />, and throughout the Guide as needed.
                    </p>
                </li>
                <li>
                    <p>
                        The <pretext/> script: a Python script that has a variety of utilities to process your source.  Requires Python 3.6 or later.  In rare cases this may be needed to test new features that have not yet been exposed in the <pretext/>-CLI.  See <xref ref="pretext-script"/>.
                    </p>
                </li>
                <li>
                    <p>
                        <c>xsltproc</c>: an executable program that directly converts <init>XML</init> using a specified XSL file.  Requires <c>xsltproc</c>, which is easily available on Linux and MacOS, but harder to install on Windows.  Demonstrations of use in this Guide are being phased-out.
                    </p>
                </li>
            </ol>
        </p>

        <p>
            The <pretext />-CLI, can be installed on the command-line using the command <c>pip install pretext</c>, see <xref ref="processing-CLI"/>.  To use options 2 and 3 above, you will need to get a copy of <pretext /> from its <url href="https://github.com/PreTeXtBook/pretext" visual="github.com/PreTeXtBook/pretext">GitHub repository</url>.  This can be done using the command <c>git clone https://github.com/PreTeXtBook/pretext.git</c>, or by downloading a zip file directly from the repository.
        </p>

        <p>
            Wherever the functionality of the <pretext />-CLI allows it, instructions in this guide will use that method.  We will collect corresponding processing instructions using <c>xsltproc</c> in <xref ref="xsltproc"/>.  Information on the use of the <pretext /> script can be found in <xref ref="pretext-script" />.  These tools are especially useful when developing new features for <pretext />, so they are housed in the <xref ref="part-developer" text="title"/>.
        </p>
    </section>

    <section xml:id="processing-CLI">
        <title>The <pretext />-CLI</title>
        <author>Oscar Levin</author>
        <idx><h>CLI</h></idx>
        <introduction>
        <p>
            Here we will outline the functionality of the <pretext />-CLI.  Instructions for using the CLI without any local installation can be found in <xref ref="tutorial"/>.  Note that an easy first step toward getting PreTeXt working locally would be to download VS Code and install the <c>pretext-tools</c> extension (which will install the <pretext />-CLI for you, assuming you have an appropriate version of python available).
        </p>

        <p><idx>command-line</idx><idx>terminal</idx><idx>console</idx>
            We will work at the <term>command-line</term> inside of a <term>
            terminal</term> or <term>console</term>. If you do not know what this is, it will seem very primitive at first. This will be called a <q>Command Prompt</q> or <q>PowerShell</q> in Windows or a <q>Terminal</q> on a Mac. In Linux it may be known as a <q>console</q> or a <q>shell</q>. Whenever the guide says to enter something on the <em>command line</em> or in a <em>terminal</em>, or just to <em>enter the command</em>, this is what we are talking about.
        </p>

        <p>
            A final note before we get started: everything we describe here can be done locally or using an online service like <url href="https://cocalc.com/" visual="cocalc.com">CoCalc</url>, which has a terminal and has all the required software (python, <latex />, sagemath, etc) installed already.  To use CoCalc, you likely will need a paid account so you have internet access (required if you want to get the most recent version of <pretext /> or want to use <c>pretext deploy</c> to save and host your work on GitHub).
        </p>


        </introduction>

        <subsection>
            <title>Installing <pretext /></title>

            <p>
                Before you can install <pretext /> locally, make sure you have the following software on your computer, or else install it using instructions easily searched for online.
                <ul>
                    <li>
                        <p>
                            Python, version 3.8.5 or later. In a terminal, type <c>python --version</c> to ensure you are already set up. On MacOS or Linux, your command for python might be called <c>python3</c>, so also try <c>python3 --version</c>.
                        </p>
                    </li>
                    <li>
                        <p>
                            To produce a pdf, or to generate tikz images from source, you need <latex />. Try <c>xelatex --version</c> to see if you already have this.
                        </p>
                    </li>
                    <li>
                        <p>
                            Any text editor. <url href="https://code.visualstudio.com/" visual="code.visualstudio.com">Visual Studio Code</url> is an excellent choice (and has an extension, <url href="https://marketplace.visualstudio.com/items?itemName=oscarlevin.pretext-tools">PreTeXt-tools</url>, with specific language support), but other editors such as SublimeText, atom, emacs, vi, etc. can also be used. See <xref ref="editors" />.
                        </p>
                    </li>
                </ul>
            </p>

            <p>
                Now we can install <pretext />. Open a terminal and type the following:
            </p>
            <console>
                <input>pip install pretext</input>
            </console>

            <p>
                If this fails, try:
            </p>

            <console>
                <input>python -m pip install pretext</input>
            </console>

            <p>
               (or, if <c>python3</c> worked above, do <c>python3 -m pip install pretext</c>.)
            </p>

            <p>
                The <c>python -m</c> helps in case Python is on your <init>PATH</init> but <c>pip</c> is not. This is a useful fix for the rest of the commands listed for the <pretext />-CLI.
            </p>

            <p>
                To verify that the CLI is installed, type <c>pretext --version</c> (or <c>python -m pretext --version</c>) and you should get back a number (1.7.5, for example).
            </p>

            <p>
            <idx><h>CLI</h><h><c>--help</c></h></idx>
                For quick hints about what you can do, the CLI has built-in help. You can access this by entering <c>pretext --help</c> or <c>pretext build --help</c> (replacing <c>build</c> with <c>new</c> or <c>view</c> or <c>generate</c> etc.).
            </p>

        <paragraphs>
            <title>Upgrading</title>

            <p>
                This documentation will assume you have version 1.0 or later of the CLI. You can upgrade the CLI to the most recent version through PIP using the command:
            </p>

            <console>
                <input>pip install pretext --upgrade</input>
            </console>

            <p>
                If you want to experiment with bleeding-edge features, you can install a nightly development version of the CLI by running:
            </p>

            <console>
                <input>pip install pretext --upgrade --pre</input>
            </console>

            <p>
                If you ever want to downgrade to previous version, you can do that with <c>pip</c> as well.  For example, to install version 1.7.5:
            </p>

            <console>
                <input>pip install pretext=="1.7.5"</input>
            </console>
            <warning>
                <p>
                    If you installed the <pretext />-CLI before version 1.0, you need to manually uninstall the package <c>pretextbook</c> (which is what the CLI was called during early development).  Run <c>pip uninstall pretextbook</c> and then <c>pip install pretext</c> te get caught up.
                </p>
            </warning>
            </paragraphs>
        </subsection>

        <subsection>
            <title>Starting a New Project: <c>pretext new</c></title>
            <idx><h><c>new</c></h></idx>
            <idx><h><c>pretext new</c></h></idx>
            <idx><h>CLI</h><h><c>new</c></h></idx>
            <p>
                To generate a new book or article, from the folder in which you want to project located, type:
            </p>

            <console>
                <input>pretext new book</input>
            </console>

            <p>
                This creates a new book in the folder <q>new-pretext-project</q> (which you can safely rename).  For a new article, use <c>pretext new article</c>.  You might also try <c>pretext new demo</c> to get a project that shows off more features available.
            </p>

            <p>
                Inside the <q>new-pretext-project</q> folder, you will find the following folders and files:
                <dl>
                    <li>
                        <title>assets</title>
                        <p>
                            A folder to place static (external) assets, such as images or data files, that you will include in your project, for example, with <tage>image source="frog.jpg"</tage>.
                        </p>
                    </li>
                    <li>
                        <title>generated-assets</title>
                        <p>
                            A folder that will hold assets (such as images) generated from source, using the <c>pretext build</c> or <c>pretext generate</c> commands.  You should not manually edit any contents of this folder.
                        </p>
                    </li>
                    <li>
                        <title>publication</title>
                        <p>
                            A folder to hold your <q>publication</q> files used to customize how your output looks.  One publication file is included, but you can have as many as you want.  See <xref ref="publication-file-reference"/>.
                        </p>
                    </li>
                    <li>
                        <title>source</title>
                        <p>
                            A folder to hold all your <pretext /> source files.  These are the main files you will edit to control the content of your project.
                        </p>
                    </li>
                    <li>
                        <title>.gitignore</title>
                        <p>
                            A file containing a list of folders and files that should not be tracked by git if you use it for version control.
                        </p>
                    </li>
                    <li>
                        <title>project.ptx</title>
                        <p>
                            An <init>XML</init> file called the <term>project manifest</term>. This specifies options for converting your source into different <term>target</term> outputs.  We will describe the contents of this file in <xref ref="cli-project-manifest"/>.
                        </p>
                    </li>
                    <li>
                        <title>README.md</title>
                        <p>
                            A file that you can use to describe your project.
                        </p>
                    </li>
                    <li>
                        <title>requirements.txt</title>
                        <p>
                            A simple text file that contains the version of the CLI that is initially used to build the project.  If you upgrade the CLI, you will be warned to also update the version in this file once you know that things build as expected.
                        </p>
                    </li>
                </dl>
            </p>

            <p>
                Once you build your project, you will get a folder called <q>output</q>.  Do not edit the contents of this folder manually.
            </p>
        </subsection>
        <subsection>
            <title>Converting: <c>pretext build</c></title>
            <idx><h><c>build</c></h></idx>
            <idx><h><c>pretext build</c></h></idx>
            <idx><h>CLI</h><h><c>build</c></h></idx>
            <p>
                To convert your source into one of the available output formats, say HTML, run the command:
            </p>

            <console>
                <input>pretext build web</input>
            </console>

            <p>
                Here <q>web</q> is the <attr>name</attr> of one of the targets in the project manifest (<c>project.ptx</c>).  To build different targets, replace it with the <attr>name</attr> of another target, as in <c>pretext build print</c>.
            </p>

            <p>
                You can also build the first (default) target of the manifest by omitting the target: just type <c>pretext build</c>.
            </p>
        </subsection>

        <subsection>
            <title>Viewing output: <c>pretext view</c></title>
            <idx><h>CLI</h><h><c>view</c></h></idx>
            <idx><h><c>view</c></h></idx>
            <idx><h><c>pretext view</c></h></idx>
            <p>
                After you convert your source into, say HTML, you can view the output using the command:
            </p>

            <console>
                <input>pretext view web</input>
            </console>

            <p>
                This will direct you to open a file running in a local server (that the CLI started for you) at a provided address (perhaps <url href="http://localhost:8128/output/web" visual="http://localhost:8128/output/web"/>).  Once you have run <c>pretext view</c> once, you can navigate to other output targets by navigating to a different url (maybe <url href="http://localhost:8128/output/print" visual="http://localhost:8128/output/print"/>) or just rerun the <c>pretext view</c> command with a different target name.
            </p>

            <p>
                Running <c>pretext view</c> will attempt to open your default program for the type of file you are opening.  You can prevent this attempt using the <c>--no-launch</c> flag.
            </p>

            <p>
                Assuming you ran this command in a terminal, the easiest way to continue working is to open a new terminal tab to run <c>pretext build</c> again; the local server will continue in the original terminal until you stop it with <kbd>CTRL</kbd>+<kbd>C</kbd>.
            </p>

            <warning>
                <p>
                    When using <c>pretext view</c>, your project is only viewable on your local machine (even if you are working in a Codespace or on CoCalc).  To make the output available to the public, you will need to copy the output to a web server, or use the <c>pretext deploy</c> command, described below.
                </p>
            </warning>
        </subsection>


        <subsection>
            <title>Hosting your project: <c>pretext deploy</c></title>
            <idx><h>hosting</h></idx>
            <idx><h>CLI</h><h><c>deploy</c></h></idx>
            <idx><h><c>deploy</c></h></idx>
            <idx><h><c>pretext deploy</c></h></idx>
            <p>
                When you are ready to share your project with the world, you can copy the contents of the <c>output/web</c> (or whatever you called the output of your html build) to any webserver.  A convenient free option is to use <url href="https://pages.github.com/">GitHub Pages</url>, and the CLI makes this especially easy.
            </p>

            <p>
                If you already track your source files using GitHub, all you need to do is enter the following command:
            </p>

            <console>
                <input>pretext deploy</input>
            </console>

            <p>
                If you watch the terminal, you will either get directions for how to set up your repository, or will simply be told what the live website for your project is.
            </p>
            <p>
                Behind the scenes, this command copies the contents of the output folders you want to deploy to a folder <c>output/stage</c>, and then moves the entire contents of that folder to the <c>gh-pages</c> branch of your github repository.  If you have not already created a <c>gh-pages</c> branch, the CLI will create one for you.  If you have not already set up your repository to track your source files, the CLI will walk you through the steps you need to get set up.
            </p>
            <insight>

                <p>
                    You can deploy multiple targets, starting with the 2.0 release of the CLI.  To do this, you will need to specify a <attr>deploy-dir</attr> attribute in your project manifest for each target you want to deploy.  Additionally, you should create a folder in the root of your project called <c>site</c> and create a landing page for your project.  The <c>site</c> folder and the output folders for each specified project will all be copied to <c>output/stage</c>.  We recommend using the flag <c>--stage-only</c> so you can preview you complete site before deploying it.
                </p>
            </insight>
        </subsection>

        <subsection>
            <title>Generating assets: <c>pretext generate</c></title>
            <idx><h><c>generate</c></h></idx>
            <idx><h><c>pretext generate</c></h></idx>
            <idx><h>CLI</h><h><c>generate</c></h></idx>
            <p>
                Some <pretext /> elements require special processing: <webwork/> exercises, <tag>latex-image</tag>, <tag>sageplot</tag>, and <tag>asymptote</tag> images, as well as previews for embedded youtube videos or interactive elements.  We call these elements <q>assets</q> or <q>generated assets</q>.  \
            </p>

            <p>
                Prior to version 1.7 of the CLI, you would need to run <c>pretext generate -t [target]</c> (where <q>[target]</q> is the name of a target, like <q>web</q>) in order to generate assets.  Since then, you can still do this, but it is usually not necessary: whenever you build a target, the CLI will automatically generate any assets that are out of date.  If you want to force the generation of assets, you can use the <c>-g</c> flag when building (e.g., <c>pretext build web -g</c>).  If you really don't want to automatically regenerate assets, you can use the <c>--no-generate</c> flag when building (e.g., <c>pretext build web --no-generate</c>).
            </p>

            <p>
                If you are using an older version of the CLI, or if you want to generate assets without building, the following instructions can help you limit what you generate.
                <ul>
                    <li>
                        <p>
                            You can limit which sorts of assets you generate.  For example, if you edit a few <tag>latex-image</tag> elements, you can just generate these (for the first target in the manifest) with <c>pretext generate latex-image</c>.
                        </p>
                        <p>
                            Valid choices for what types of assets you can generate in this specific way are: <c>webwork</c>, <c>latex-image</c>, <c>sageplot</c>, <c>asymptote</c>, <c>interactive</c>, <c>youtube</c>, <c>codelense</c>, and <c>datafile</c>.
                        </p>
                    </li>
                    <li>
                        <p>
                            To be even more precise, if the element you wish to generate has an <attr>xml:id</attr>, you can generate just that element using the <c>-x</c> flag.  For example, if your <tag>latex-image</tag> has id <q>img-circle</q>, generate it with <c>pretext generate -x img-circle</c>
                        </p>
                    </li>
                    <li>
                        <p>
                            Finally, there might be times you would like to get all output formats for the assets you are generating.  You can accomplish this using the <c>--all-formats</c> flag on <c>pretext generate</c>
                        </p>
                    </li>
                </ul>
            </p>
        </subsection>

        <subsection xml:id="cli-project-manifest">
            <title>The project manifest: <c>project.ptx</c></title>
            <idx><h>project manifest</h></idx>
            <idx><h>manifest</h></idx>
            <idx><h>CLI</h><h>project manifest</h></idx>
            <idx><h><c>project.ptx</c></h></idx>
            <p>
                The project manifest, always named <q>project.ptx</q>, contains information about each <term>target</term> you will build.  Prior to version 2.0 of the CLI, it also contained the names of <term>executables</term> of external tools that might be needed for building targets and generating assets.  (In 2.0 and later, if you need to change the default names or paths to executables, you will use a separate <c>executables.ptx</c> file.)
            </p>

            <p>
                The CLI looks for this file, so you should have only one.  If you have a project that was not created using <c>pretext new</c>, you can get a copy of the file by running <c>pretext init</c>.  You can also get the most recent template version of the manifest by running <c>pretext init --refresh</c>, which will create time-stamped versions of the files (so your files with matching names don't get overwritten) for you to copy from.
            </p>

            <p>
                While we use the <c>.ptx</c> extension, the manifest is not technically a <pretext/> document, since it does not agree with the schema.  However, it must have a specific structure to be used with the CLI.  An example of a simple manifest is given in <xref ref="cli-project-manifest-example"/>.  Note this is version 2 manifest; for a comparison of <q>legacy</q> manifests and the current format, see <xref ref="cli-v1vsv2"/>.
            </p>

            <listing xml:id="cli-project-manifest-example">
                <caption>Example of a very simple project manifest.</caption>
            <program language="xml">
                <code>
                <![CDATA[
                <?xml version="1.0" encoding="utf-8"?>
                <project ptx-version="2">
                <targets>
                    <target name="web" format="html" />
                    <target name="rs" format="html" platform="runestone" />
                    <target name="print" format="pdf" />
                </targets>
                </project>
                ]]>
                </code>
            </program>
            </listing>

            <p>
                The manifest contains a single <tag>project</tag> element with a <attr>ptx-version</attr> attribute.  This attribute is required and must be set to <q>2</q> for the CLI to recognize the file as a valid manifest.  Additional optional attributes of <tag>project</tag> can also be specified, which we will describe below.  The <tag>project</tag> element has a single child, <tag>targets</tag>, which contains a list of <tag>target</tag> elements.
            </p>

            <p>
                <idx><h>CLI</h><h>targets</h></idx>
                Each <tag>target</tag> must have a <attr>name</attr> attribute.  The name (e.g., web, print) is what you specify when you run <c>build</c>, <c>view</c>, or <c>generate</c> for a specific target (so <c>pretext build web</c>, <c>pretext view web</c> or <c>pretext generate -t web</c>).
            </p>

            <p>
                <idx><h>CLI</h><h>format</h></idx>
                The second required attribute of <tag>target</tag> is <attr>format</attr>, which must be one of html, pdf, latex, custom, epub, kindle, or braille (although the last three of these are still experimental, as of 9/1/2023).
            </p>

            <p>
                With just these attributes, as with the manifest in <xref ref="cli-project-manifest-example"/>, the CLI assumes your project uses default values throughout. The following defaults are constucted from the default value for an attribute of the root <tag>project</tag> element with the default value for an attribute of a particular <tag>target</tag> element. Each of the two pieces can be overrided. The net default folders are:
                <ul>
                    <li><p>The source is <c>source/main.ptx</c>.</p></li>
                    <li><p>The publication file is <c>publication/publication.ptx</c>.</p></li>
                    <li><p>Output is stored in <c>output/</c> (with each target in a subfolder identical to the target's <c>name</c>).</p></li>
                    <li><p>The staging directory to preview deploys is <c>output/stage</c>.</p></li>
                </ul>
                Again, each of these can be modified using the appropriate attribute of either the root <tag>project</tag> element or a particular <tag>target</tag> element.
            </p>

            <p>
                In <xref ref="table-cli-project-attributes"/> and <xref ref="table-cli-target-attributes"/> we give all the attributes you can have on the <tag>project</tag> and <tag>target</tag> elements, respectively.  Some attributes can be specified for both elements.  In such cases, the values will be paths, and the path given in the <tag>target</tag>'s attribute will be relative to the path given in the <tag>project</tag>'s attribute. This can be useful, for example, if all targets have publication files in the same folder, but the files for some targets are different.
            </p>

            <p>All paths described in <xref ref="table-cli-project-attributes"/> are given <em>relative to the root of your project</em> (the location of the <c>project.ptx</c> file).</p>

            <table xml:id="table-cli-project-attributes">
                <title>Attributes available for the <tag>project</tag> element.</title>
                <tabular valign="top">
                    <col/><col width="70%"/>
                    <row header="yes">
                        <cell>Attribute</cell><cell>Description</cell>
                    </row>
                    <row>
                        <cell><attr>ptx-version</attr></cell><cell><p>Required.  Must have value 2.</p></cell>
                    </row>
                    <row>
                        <cell><attr>source</attr></cell><cell><p>Optional, default: <c>source</c>.  Path to folder holding main source file.</p></cell>
                    </row>
                    <row>
                        <cell><attr>publication</attr></cell><cell><p>Optional, default: <c>publication</c>.  Path to folder holding publication file.</p></cell>
                    </row>
                    <row>
                        <cell><attr>output-dir</attr></cell><cell><p>Optional, default: <c>output</c>.  Path to folder in which output files/folders for each target will be created.</p></cell>
                    </row>
                    <row>
                        <cell><attr>site</attr></cell><cell><p>Optional, default: <c>site</c>.  Path to folder holding user-provided landing page for deploying multiple targets.</p></cell>
                    </row>
                    <row>
                        <cell><attr>stage</attr></cell><cell><p>Optional, default: <c>output/stage</c>.  Path to folder where deployable targets will be collected before they are deployed.</p></cell>
                    </row>
                    <row>
                        <cell><attr>xsl</attr></cell><cell><p>Optional, default: <c>xsl</c>.  Path to folder holding custom xsl files.</p></cell>
                    </row>
                    <row>
                        <cell><attr>asy-method</attr></cell><cell><p>Optional, default: <c>server</c>.  Valid values: <c>server</c> or <c>local</c>. Used to specify whether asymptote images should be generated using the <c>server</c> asymptote version or a <c>local</c> asymptote install.</p></cell>
                    </row>
                </tabular>
            </table>`

            <p>Any file paths described in attributes of a <tag>target</tag> element are relative to a corresponding attribute value from the root <tag>project</tag> element.</p>

            <table xml:id="table-cli-target-attributes">
                <title>Attributes available for the <tag>target</tag> elements.</title>
                <tabular halign="left" valign="top">
                    <col/><col width="70%"/>
                    <row header="yes">
                        <cell>Attribute</cell><cell>Description</cell>
                    </row>
                    <row>
                        <cell><attr>name</attr></cell><cell><p>Required.  The name you use when executing a CLI command.</p></cell>
                    </row>
                    <row>
                        <cell><attr>format</attr></cell><cell><p>Required.  Valid values: <c>html</c>, <c>pdf</c>, <c>latex</c>, <c>epub</c>, <c>kindle</c>, <c>braille</c>, <c>webwork</c>, and <c>custom</c>.  The format the target will be built into.</p></cell>
                    </row>
                    <row>
                        <cell><attr>source</attr></cell><cell><p>Optional, default: <c>main.ptx</c>.  Path to the root source file of the project (relative to the value of the <attr>source</attr> of <tag>project</tag>).</p></cell>
                    </row>
                    <row>
                        <cell><attr>publication</attr></cell><cell><p>Optional, default: <c>publication.ptx</c>.  Path to publication file (relative to the value of <attr>publication</attr> attribute of <tag>project</tag>).</p></cell>
                    </row>
                    <row>
                        <cell><attr>output-dir</attr></cell><cell><p>Optional, default: the value of <attr>name</attr>.  Path to folder in which output files/folders will be created (relative to the value of <attr>output-dir</attr> attribute of <tag>project</tag>).</p></cell>
                    </row>
                    <row>
                        <cell><attr>output-filename</attr></cell><cell><p>Optional, default: generated by pretext. Only valid for formats that produce a single output file.  Path to output file to be built (relative to the value of <attr>output-dir</attr> of the same <tag>target</tag> element).</p></cell>
                    </row>
                    <row>
                        <cell><attr>deploy-dir</attr></cell><cell><p>Optional, no default.  Path to subdirectory of deployed site where this target will live.  If deploying multiple targets, then this attribute must have a value for it to be deployed.</p></cell>
                    </row>
                    <row>
                        <cell><attr>xsl</attr></cell><cell><p>Optional, no default. Required when <attr>format</attr> is <c>custom</c>. Path to custom <init>XSL</init> file (relative to the value of <attr>xsl</attr> attribute of <tag>project</tag>).</p></cell>
                    </row>
                    <row>
                        <cell><attr>latex-engine</attr></cell><cell><p>Optional, default: <c>xelatex</c>.  Valid values: <c>xelatex</c>, <c>pdflatex</c>, or <c>latex</c>. Only used on targets that build with latex, to specify what latex command to call in that step.</p></cell>
                    </row>
                    <row>
                        <cell><attr>braille-mode</attr></cell><cell><p>Optional, default: <c>emboss</c>.  Valid values: <c>emboss</c> or <c>electronic</c>. Only used when <attr>format</attr> is <c>braille</c>, to specify the mode for braille.</p></cell>
                    </row>
                    <row>
                        <cell><attr>platform</attr></cell><cell><p>Optional, no default. Only valid when <attr>format</attr> is <c>html</c>.  Valid values: <c>runestone</c>.  Used to specify that the target will be hosted on Runestone.</p></cell>
                    </row>
                    <row>
                        <cell><attr>compression</attr></cell><cell><p>Optional, no default.  Only valid when <attr>format</attr> is <c>webwork</c> or <c>html</c> and <attr>platform</attr> is not <c>runestone</c>. Valid values: <c>zip</c>.  Results in output being compressed (as <c>.zip</c> file).</p></cell>
                    </row>
                    <row>
                        <cell><attr>asy-method</attr></cell><cell><p>Optional, default: <c>server</c>.  Valid values: <c>server</c> or <c>local</c>. Overrides the <attr>asy-method</attr> attribute on <tag>project</tag>.</p></cell>
                    </row>
                </tabular>
            </table>

            <example xml:id="example-manifest">
                <title>Example Project Manifest</title>

                <p>
                    To illustrate how the relative paths work, with attributes on both <tag>project</tag> and <tag>targets</tag> elements, consider the following manifest:
                </p>
            <program language="xml">
                <code>
                <![CDATA[
                <?xml version="1.0" encoding="utf-8"?>
                <project ptx-version="2" source="src" output-dir="out">
                    <targets>
                        <target
                            name="web"
                            format="html"
                            output-dir="web" />
                        <target
                            name="print"
                            format="pdf"
                            source="main-print.ptx"
                            publication="pub/publication.ptx"/>
                    </targets>
                </project>
                ]]>
                </code>
            </program>
                <p>
                    Here, the web target, with format html, will build from the root <pretext/> file "src/main.ptx", using the publication file "publication/publication.ptx", and will place the output in the folder "out/web".
                </p>
                <p>
                    The print target, with format pdf, will build from the file "src/main-print.ptx", using the publication file "publication/pub/publication.ptx", and will place the output in the folder "out/print".
                </p>
            </example>

            <p>
                <idx><h>stringparam</h></idx>
                <idx><h>CLI</h><h>stringparam</h></idx>
                <idx><h>xmlid-root</h></idx>
                <idx><h>CLI</h><h>xmlid-root</h></idx>
                In addition to the attributes available for <tag>target</tag> elements, there is one optional child element, <tag>stringparams</tag>, which can be used to specify string parameter options (see <xref ref="publisher-string-parameters"/>).  These are specified using an attribute for the name of the string parameter, and the value of the attribute is the value of the string parameter.  Multiple string parameters are set using multiple attributes on the single <tag>stringparams</tag> element.
            </p>
        </subsection>

        <subsection>
            <title>Executables</title>
            <idx><h>CLI</h><h>executables</h></idx>
            <p>
                <pretext/> uses several external tools to build and generate assets.  The CLI will automatically find these tools if they are installed in the default location for your operating system.  If you have installed them in a non-standard location, you can specify the path to the executable in a <c>executables.ptx</c> file, at the root of your project.  In <xref ref="listing-v2-executables"/> we give the defaults and formatting of such a file.
            </p>

            <listing xml:id="listing-v2-executables">
                <caption>Example of version 2 executables file</caption>
                <program language="xml">
                  <code>
                  <![CDATA[

                  <?xml version="1.0" encoding="utf-8"?>
                  <executables
                        latex="latex"
                        pdflatex="pdflatex"
                        xelatex="xelatex"
                        asy="asy"
                        sage="sage"
                        pdfpng="convert"
                        pdfeps="pdftops"
                        node="node"
                        liblouis="file2brl" />

                  ]]>
                  </code>
                </program>
              </listing>

              <warning>
                <p>
                    Prior to version 2 of the CLI, these executables were contained in the <c>project.ptx</c> file.  If you are using a version prior to 2.0, see <xref ref="cli-v1vsv2"/>.
                </p>
              </warning>
        </subsection>

        <subsection>
            <title>Getting help</title>
            <p>
                <idx><h>CLI</h><h><c>-v debug</c></h></idx>
                In addition to checking <c>pretext --help</c>, <c>pretext build --help</c>, <c>pretext view --help</c>, etc, you have a few options when you run into trouble.  If you are getting errors that don't make sense, even after trying follow the suggestion of the error messages, look at the time-stamped log files inside the <c>logs</c> folder (or the <q>cli.log</q> file if you are using a CLI version prior to 2.0), which includes debug-level log messages.  You can also run the CLI using this higher level of verbosity using the <c>-v debug</c> option, which must go right after <c>pretext</c> command, before the subcommands (<c>build</c>, <c>deploy</c>, etc.).  That is, enter the following for example,
            </p>

            <console>
                <input>pretext -v debug build web</input>
            </console>

            <p>
                <idx><h><c>pretext support</c></h></idx>
                <idx><h>CLI</h><h><c>support</c></h></idx>
                You can also ask for help on the <url href="https://groups.google.com/g/pretext-support">google support group</url>.  When you post there, please run <c>pretext support</c> from inside your project's folder and copy the output into your help request.
            </p>
        </subsection>
    </section>

    <section xml:id="processing-modular">
        <title>Modular Source Files</title>
        <idx>modular source files</idx>
        <idx><h>including files</h><see>modular source files</see></idx>

        <p>For a large project, such as a book, you will likely want to split up your source into logical units, such as chapters and sections.
        The <pretext />-CLI supports an inclusion mechanism automatically (see <xref ref="xsltproc"/> for what you need to do different for <c>xsltproc</c>).
        </p>

        <p>
            Suppose your <c>book</c> on animals has a <c>chapter</c> on mammals with a <c>section</c> on monkeys.  Then you need to do the following:
            <ol>
                <li>
                    <p>For the file containing the <tag>chapter</tag> tag for the chapter on mammals, place the attribute
                    <cd>
                        <cline>xmlns:xi="http://www.w3.org/2001/XInclude"</cline>
                    </cd>
                    on the outermost tag in the file.</p>
                </li>
                <li><p>Within the <tag>chapter</tag> element for the chapter on mammals, add the line <c>&lt;xi:include href="monkeys.xml" /&gt;</c> to <q>pull in</q> the section on monkeys at that location.  The <attr>href</attr> attribute can point to a file in a subdirectory, but will be interpreted relative to the location of the file containing the mammal chapter element.</p></li>
        </ol></p>

        <p>Several comments are in order.<ul>
            <li><p>Begin small and start a project <em>without</em> using modular files.  Modularizing seems to add a layer of complexity that sometimes obscures other beginner's errors.  So get comfortable with a single source file before branching out.</p></li>
            <li><p>The <init>XML</init> specification requires that a source file only contain a single outermost element.  So for example, two <tag>chapter</tag> elements cannot go into the same file as simultaneous outermost elements.</p></li>
            <li>There will always be a <q>main</q> file that contains the <tag>pretext</tag> element as its single outermost element.  In this Guide we will call this the <term>top-level</term> file.<idx>top-level file</idx></li>
            <li><p>Any file that uses an <tag>xi:include</tag> element will need the <c>xml:ns</c> declaration on the outermost element.  So in our animal book example, the top-level file, which presumably includes several chapter files, would need this declaration on the <tag>pretext</tag> element.</p></li>
            <li><p>In practice, there is not a lot to be gained by creating a subdirectory structure mirroring your modularization<mdash />all your source files can go into one big directory and the <init>XML</init> hierarchy will take care of the organization.  I do sometimes like to name my files accordingly, so for example <c>chapter-mammals.xml</c> and <c>section-monkeys.xml</c>.</p></li>
            <li><p>When you validate your source (see <xref ref="processing-dtd"/> and <xref ref="schema"/>) you will always point to the top-level source file (the one with the <tag>pretext</tag> tags).</p></li>
        </ul></p>

        <p>The book generated by <c>pretext new demo</c> has modular source, so is a nice starting point to see how this works.  Other examples are the sample book in <c>examples/sample-book</c> amply demonstrates different ways to modularize parts of a project (but in no way should be taken as best practice in this regard).  This guide, in <c>doc/author-guide</c> is a simple example of modular source files, and might be a good template to follow for your book.
        See <xref ref="topic-xinclude" /> for some of the finer points of this topic.</p>
    </section>

    <section xml:id="processing-dtd">
        <title>Verifying your Source</title>

        <p>A <term>schema</term><idx>schema</idx>, in our case a <init>RELAX-NG</init> schema,  is a formal specification of an <init>XML</init> vocabulary<idx><h>schema</h><seealso>XML vocabulary</seealso></idx><idx>XML vocabulary</idx> (the allowed tags and attributes), and how they relate to each other.  So, for example, the restrictions that say you cannot nest a <tag>book</tag> inside of a <tag>chapter</tag>, nor can you nest a <tag>subsection</tag> in a <tag>chapter</tag> without an intervening <tag>section</tag>, are expressed and enforced by the schema.  One of the beauties of the schema is that it is written using a very specific syntax and then there are tools that use a schema as input.  In particular, a <pretext /> source file that conforms to the <pretext /> schema is said to be <term>valid</term><idx>valid schema</idx>.  You should strive to always, always, always have valid source files, and therefore you want to regularly verify that this is the case.</p>

        <p>You can find the <pretext /> schema in the <url href="https://github.com/PreTeXtBook/pretext/schema" visual="github.com/PreTeXtBook/pretext/schema"><c>schema</c> folder of the GitHub repository</url>.  The version we author and maintain is <c>pretext.xml</c>, which is used to create <c>pretext.rnc</c>, which uses the compact syntax of the RELAX-NG specification.  By providing the schema and your source to a program called a <term>validator</term><idx>validator</idx> you can check if your source is valid, and if not, why.  See <xref ref="schema" /> for the details on doing this.</p>

        <p>
            The <pretext />-CLI also has some basic validating capability: after running <c>pretext build</c>, open the <c>.error_schema.log</c> file in the main folder of your project to see validation errors.
        </p>

        <p>If you author source that is valid <pretext />, then a conversion of your source to another format should succeed.  And maybe in the future, somebody will create a new conversion to a new output format, and your source should still produce faithful output, with no extra effort from you.  Think of the schema as a contract between authors of source files and developers of converters.  This is different than performing a conversion and getting good-looking output<ndash />that can just be a happy accident and your source may not succeed with some other conversion.</p>

        <p>We cannot stress enough the importance of setting up and performing regular validation and preventing many consistent errors of the same type.  You will learn what elements are allowed where, and which are not, from the messages produced by validation errors.  And when a conversion fails, or produces spectacularly incorrect output, validating your source should be your first reaction.  Always.</p>

        <p>The other beauty of a schema is that you can supply it to a text editor (<xref ref="introduction-to-source-formatting" />) and then you will get context-sensitive help that greatly assists you in using only the tags and attributes that are allowed in a given location of your source.  <url href="http://xml-copy-editor.sourceforge.net/" visual="xml-copy-editor.sourceforge.net/">XML Copy Editor</url> is the one editor like this we have tried, but we do not have extensive experience.</p>

        <p>We have devoted an entire chapter (<xref ref="schema" />) to amplifying this introduction and providing more details, such as where to find details on installing a validator.</p>
    </section>

    <section xml:id="processing-customizations">
        <title>Customizations</title>

        <p>There are some aspects of your output that are entirely divorced from the actual content, and are presumably all about how that content is presented.  Two good examples are the size of the font used in <latex />/PDF/print output, and the granularity of web pages in HTML output (by this we mean, is each web page a whole chapter, a whole section, a whole subsection?).  Producing output with varying values of these parameters does absolutely nothing to change your content in any way, and so should not be a part of your writing, nor a concern while you concentrating on your writing.</p>

        <p>Therefore, many aspects of how your writing is <em>presented</em> is accomplished by your publisher.  Note that this is very different from <em>your</em> role as the author of your project.  When your project is mature then you can consult with your publisher about how to best present your project to your audience.  An entire part of this guide is devoted to this process (<xref ref="part-publisher"/>), but if you are curious, the first part of <xref ref="conversions"/> can serve as an introduction.</p>
    </section>

    <section xml:id="processing-directory-management">
        <title>Directory Management</title>
        <introduction>
            <p>
                Organizing your source files, external assets (like images) and other support files, can become a challenge as your project grows.  <pretext /> supports managing external and generated files (including images), but this requires some setup and understanding of the correct way to specify assets in your source.  This section explains both those steps.
            </p>

            <p>
                If you are starting a new project, using the <pretext />-CLI (with the command <c>pretext new book</c>, for example), then most of the setup portion is done for you.
            </p>
        </introduction>

        <subsection>
            <title>External and Generated Files</title>

            <p>Early in your writing project, you will decide you want to add images, embedded YouTube videos, interactive demonstrations, or other enhancements that are more than just words on the page.  Some of these objects will be created outside of your <pretext/> project, such as a photograph.  But some images are described within your <pretext/> project, such as a diagram authored using the <latex/> TikZ package, and <pretext/> will help generate different versions of the diagram in different file formats for use in output formats that are not <latex/>.  For an embedded YouTube video we provide tools that will automatically get you a thumbnail preview image from a YouTube server, which will then appear in your non-interactive PDF version.  We describe the photograph as <term>external</term>, since it comes from <q>somewhere else,</q> independent of anything you authored in your source. In contrast, an SVG image of your TikZ diagram for HTML output, and a preview image of a YouTube video for use in a print version, are described as <term>generated</term> since they are dependent on what you have put in your source, and <pretext/> automates almost all of their creation for you.</p>

            <p>As these files are added to your project, you want to organize them in a specific (but flexible) way.  First, make a directory (folder) for your <em>external</em> files.  You can use any name you like, including <c>external</c>.  Within reason you can place it wherever you want.  Natural choices are as a peer of a <c>source</c> directory that holds your <pretext/> files, or as a subdirectory of your project's top-level directory that may hold all your <pretext/> files.  You can also organize this directory with subdirectories of your own choice, if that helps you stay organized.</p>

            <p>Similarly, you need a separate directory for your <em>generated</em> files.  As above, it can be named anything, including <c>generated</c>, and you can place it almost anywhere (close by).  But now, it must have a precise directory structure, described below in <xref ref="subdirectories-of-generated"/>, according to what sort of generation produced the files.</p>

            <p>After you have read this section, see the discussion of generated and external files in <xref ref="version-caveats"/> for some good examples of why this flexibility is useful.</p>
        </subsection>

        <subsection>
            <title>Managing Directories</title>

            <p>The name, and location of the external and generated directories (both of them, always) are then specified in a publication file (see <xref ref="publication-file-directory-management"/> for the precise specification).  The values of these attributes are <em>relative</em> pathnames to the directories, relative to the location of the <em>main</em> <pretext/> file for your project.  Let us take a look at an example.</p>

            <example xml:id="sample-directory-management">
                <title>Sample Directory Management</title>

                <p>Suppose you are M.<nbsp/>Jones, the author of the <init>AOTA</init> project, and so you might have the following directory and file structure.  There is some sort of overall path from the root of your entire filesystem to your project, so on Linux this path could be<cd>
                    <cline>/home/mjones/books/</cline>
                </cd>and on other operating systems it will be slightly different, but those differences are not relevant here.  Inside of <c>books</c> there would be an <c>aota</c> directory for the <init>AOTA</init> project, structured as follows.  We are most interested in the <c>ext</c> and <c>gen</c> directories.<cd>
                    <cline>aota</cline>
                    <cline>    source</cline>
                    <cline>        aota.ptx</cline>
                    <cline>        alligators.ptx</cline>
                    <cline>        dogs.ptx</cline>
                    <cline>    publication</cline>
                    <cline>        print.ptx</cline>
                    <cline>        online.ptx</cline>
                    <cline>        epub.ptx</cline>
                    <cline>    ext</cline>
                    <cline>        photos</cline>
                    <cline>            slow-alligator.jpeg</cline>
                    <cline>            fast-whippet.png</cline>
                    <cline>        movies</cline>
                    <cline>            alligator-chases-whippet.mp4</cline>
                    <cline>        data</cline>
                    <cline>            deer-weights.csv</cline>
                    <cline>    gen</cline>
                    <cline>        latex-image</cline>
                    <cline>            marsupial-life-cycle.svg</cline>
                    <cline>        youtube</cline>
                    <cline>            sloth.jpg</cline>
                </cd></p>

                <p>In your publication files you would then have the entry, as a sub-element of the <c>source</c> element,<cd>
                    <cline>&lt;directories external="../ext" generated="../gen"/&gt;</cline>
                </cd>Notice that we have deliberately named our directories <c>ext</c> and <c>gen</c> as part of this illustration, so that they are not identical to the <em>attribute</em> names on the <tag>directories</tag> element.  The two attribute values are <em>relative</em> to the location of the main <pretext/> file, in this case <c>aota.ptx</c>.  The two periods, <c>..</c>, mean to go up a level, here to the <c>aota</c> directory, then the slash indicates a step down to either <c>gen</c> or <c>ext</c>.  Note that <c>latex-image</c> and <c>youtube</c> within <c>gen</c> <em>must</em> be specified exactly that way.  Now every <pretext/> production tool can deduce where your files are.</p>

                <p>How do you specify in your <pretext/> source which file to use where?  Suppose you want your two (external) photographs to be used in a <tag>sidebyside</tag> element.  You would author<cd>
                    <cline>&lt;sidebyside widths="50% 30%"&gt;</cline>
                    <cline>     &lt;image source="photos/slow-alligator.jpeg"/&gt;</cline>
                    <cline>     &lt;image source="photos/fast-whippet.jpeg"/&gt;</cline>
                    <cline>&lt;sidebyside/&gt;</cline>
                </cd>Notice that the values of your <attr>source</attr> attributes <em>do not</em> include <c>ext</c> or <c>../ext</c>.  This gives you the freedom to move your <c>ext</c> directory or rename it, and then you only change the publication file and not your source.  The decision to have the subdirectories <c>photos</c> and <c>movies</c> are not easily changed, since they will be in your source, but they may have value for the organization of your project.</p>

                <p>The chase video is of your own creation, you have included it as part of your project's files, and will be hosting it on your web server, where the rest of your HTML version is made available for viewing.  You might author<cd>
                    <cline>&lt;figure xml:id="fig-chase"&gt;</cline>
                    <cline>     &lt;caption&gt;Alligator chases whippet&lt;/caption&gt;</cline>
                    <cline>     &lt;video source="movies/alligator-chases-whippet.mp4"/&gt;</cline>
                    <cline>&lt;figure/&gt;</cline>
                </cd></p>

                <p>The situation with the generated files is presently a bit more complicated, but will eventually be transparent to an author.  The marsupial life cycle diagram has been authored in your source using the language from the <latex/> TikZ package, which is delimited as a <tag>latex-image</tag> element.  When building a PDF from <latex/> output this is a no-brainer<mdash/><pretext/> just puts your TikZ code into the <latex/> file.  But how about HTML output?  The <c>pretext/pretext</c> script will manufacture a standalone version of this image and then convert it to an SVG, and this version will work very well in the online version of your project.  What do you author?<cd>
                    <cline>&lt;figure xml:id="fig-life-cycle"&gt;</cline>
                    <cline>     &lt;caption&gt;Marsupial Life Cycle&lt;/caption&gt;</cline>
                    <cline>     &lt;latex-image xml:id="marsupial-life-cycle"&gt;</cline>
                    <cline>         -- some TiKZ code here --</cline>
                    <cline>     &lt;/latex-image&gt;</cline>
                    <cline>&lt;figure/&gt;</cline>
                </cd>With the right options to the <c>pretext/pretext</c> script, the file <c>marsupial-life-cycle.svg</c> will be generated.  Presently, you must explicitly tell the script to place the output in the directory<cd>
                    <cline>/home/mjones/books/gen/latex-image</cline>
                </cd>but we plan to make this the default behavior.  Or you could generate the file anywhere, and move it to the <c>latex-image</c> subdirectory of <c>gen</c>.  Notice how much of the process of creating a companion SVG image (which excels in a web browser) is automated, and how the <attr>xml:id</attr> attribute and the directories in the publication file are used to keep everything coordinated.  The <c>latex-image</c> directory is not negotiable, it is the home for <em>every</em> image authored using a <pretext/> <tag>latex-image</tag> element (see <xref ref="subdirectories-of-generated"/>).</p>

                <p>The slow sloth video was created by somebody else and posted to YouTube as a super slo-mo 240fps video.  You authored it within a <tag>figure</tag> simply by using the ID of the video on YouTube.<cd>
                    <cline>&lt;figure xml:id="fig-sloth"&gt;</cline>
                    <cline>     &lt;caption&gt;Slow Sloth&lt;/caption&gt;</cline>
                    <cline>     &lt;video xml:id="sloth" youtube="DJWEqYcxUl8"/&gt;</cline>
                    <cline>&lt;figure/&gt;</cline>
                </cd>With the right options to the <c>pretext/pretext</c> script, the file <c>sloth.jpg</c> will be generated by requesting a thumbnail preview from YouTube's servers.  Note how this content is generated from your source (precisely, the YouTube ID) through an automated process.  Presently, you must explicitly tell the script to place the output in the directory<cd>
                    <cline>/home/mjones/books/gen/youtube</cline>
                </cd>but we plan to make this the default behavior.  The <c>youtube</c> directory is not negotiable, it is the home for <em>every</em> server-generated preview image for an embedded YouTube video (see <xref ref="subdirectories-of-generated"/>).  (Note that any <tag>video</tag> may have an author-provided image as its preview, and then this would be considered an external file.)</p>
            </example>

            <p>As you can tell from the above, different output formats have different expectations for additional files and when producing an output, there may be different expectations for where exactly where to find files.  A good example is the <init>EPUB</init> format, which despite being basically an HTML format, is still very rigorous about names, formats, and locations for image files.  With the above procedures you provide just enough information for <pretext/> to handle the remainder of the complexity for you, without you becoming an expert with the EPUB standard.  So the <c>pretext/pretext</c> script can automatically produce PDF, HTML, EPUB, Kindle, and braille, each in a single step.</p>

            <p>We have skirted one finer point of all this.  How does an author know if a file is external or generated and what are the supported subdirectories of the generated directory?  A <pretext/> <attr>source</attr> attribute will almost always point to a file that belongs in the external directory.  An exception is the <attr>preview</attr> attribute which is used to specify static images to use in outputs like PDF or print to represent more dynamic objects employed in more-capable electronic formats (videos, audio, interactives).  (Please alert us to other exceptions!)  The list below describes the subdirectories of the generated directory.  The files that belong in these directories are all generated by the <c>pretext/pretext</c> script using aspects of your authored source.</p>

            <list xml:id="subdirectories-of-generated">
                <title>Subdirectories of the Generated Directory</title>
                <!-- preserve alphabetical ordering -->
                <dl width="narrow">
                    <li>
                        <title><c>asymptote</c></title>
                        <p>Images described by Asymptote code in an <tag>asymptote</tag> element.</p>
                    </li>

                    <li>
                        <title><c>latex-image</c></title>
                        <p>Images described by <latex/> code in a <tag>latex-image</tag> element.</p>
                    </li>

                    <li>
                        <title><c>preview</c></title>
                        <p>Static images of dynamic content, created with automatic screenshots via a headless web server.</p>
                    </li>

                    <li>
                        <title><c>problems</c></title>
                        <p>MyOpenMath problems in static <pretext/> forms.  Possibly broken.</p>
                    </li>

                    <li>
                        <title><c>sageplot</c></title>
                        <p>Images described by Sage code in a <tag>sageplot</tag> element.</p>
                    </li>

                    <li>
                        <title><c>youtube</c></title>
                        <p>Static images for YouTube videos, automatically downloaded from YouTube servers.</p>
                    </li>
                </dl>
            </list>

            <p>Just one more obscure situation to address, requiring a peek under the hood.  Occasionally there are external files used in ways that <pretext/> cannot <q>see</q> them and provide the management necessary.  One example is a file of data points used to generate a plot using the <tag>latex-image</tag> element.  Suppose we have a file<cd>
                <cline>/home/mjones/books/ext/data/deer-weights.csv</cline>
            </cd>as shown in <xref ref="sample-directory-management"/>.  We will use this inside of a <tag>latex-image</tag> element employing PGF code with a <c>table {};</c> construction.  As part of building the <latex/> output, this file will be copied to a temporary directory as<cd>
                <cline>external/data/deer-weights.csv</cline>
            </cd>Note that your <c>ext</c> has been converted to <c>external</c> as files are copied<mdash/>that is not a typo.  <pretext/> is not going to examine all your code and try to guess where you have requested a file.  So you need to author<cd>
                <cline>\addplot table {external/data/deer-weights.csv};</cline>
            </cd>
            using the filename created after the copy.  Then the <latex/> compilation will locate the file successfully.  The <c>external</c> directory after the file copy is not negotiable, that is what is always used.</p>
        </subsection>

        <subsection>
            <title>Backward-Compatibility and Migration</title>

            <p>Directory management was added in the middle of 2021.  For projects existing at that time, it is an <q>opt-in</q> feature.  In other words, existing projects can still be built by moving additional files in the same ways as always, so long as you do not have a <tag>directories</tag> element in your publication file.</p>

            <p>However, it is absolutely necessary to opt-in to directory management (via the publication file) if you want to build EPUB or Kindle formats.  You will also then be able to build PDF and HTML output with a single invocation of the <c>pretext/pretext</c> script, without any extra effort to place additional files in the right places.</p>

            <p>New projects should definitely adopt directory management as their project develops.  New features and tools will assume this.  We now describe how existing projects can migrate.</p>

            <p>Previously there was not a firm distinction between external and generated files, though they were specified differently in <pretext/> source.  Many authors placed both types of files into a single directory, and since the default for locating generated files was a directory called <c>images</c>, this was often the single directory employed.   Thus, external files would be specified with a <attr>source</attr> attribute such as<cd>
                <cline>&lt;image source="images/bobcat.jpg"/&gt;</cline>
            </cd>A solution, if a bit clunky, is to make a new directory named <c>ext</c> and copy <c>images</c> and its contents to become a subdirectory of <c>ext</c>.  Then place a relative path to <c>ext</c> in the <attr>external</attr> attribute in your publication file.  This means you will not have to edit your <pretext/> source at all.  At some later time, you could remove all references to <c>images</c> in your source and move the files themselves directly into <c>ext</c>.</p>

            <p>For generated files it will be a bit more involved.  You need a new directory, such as <c>gen</c>, and you need to add it to your publication file with the right relative path.  Then you will need to create as many of the relevant directories from <xref ref="subdirectories-of-generated"/> as necessary, as subdirectories of <c>gen</c>.  Populate these subdirectories with the relevant files, which may have been located in <c>images</c> before you started migrating.  There was a string parameter, <c>directory.images</c>, that could be used to specify an alternative directory to the default, <c>images</c>.  That parameter is now announced as deprecated, but will still be effective until your project opts-in.</p>

            <p>As another short-term option for Mac or Linux users, it is possible to take previously existing resource directories and make symbolic links from a previous image directory, such as <c>my_images</c>, to the names provided here.  In that case, assuming the directory structure provided here, a command like <c>ln -s my_images external</c> (issued in the directory containing <c>my_images</c>) would create the correct symbolic link.</p>
        </subsection>
    </section>

    <section xml:id="processing-images-inkscape">
        <title>Creating Images with Inkscape</title>
        <idx>Inkscape</idx>
        <idx><h>vector graphics</h><h>Inkscape</h></idx>

        <p>A strength of <pretext/> is the ability to create diagrams and images with editable source code, embedded alongside your other <pretext/> source material (<xref ref="topic-images-source"/>, <xref ref="processing-images-pretext"/>).  But sometimes you want, or need, to be more artistic.  <url href="https://inkscape.org/" visual="inkscape.org/">Inkscape</url> is a great tool for creating images.  It ticks all the boxes: open source, mature, cross-platform, standards-compliant.  Bethany Llewellyn helped research Inkscape capabilities for this section.</p>

        <p>Inkscape's native file format is Scalable Vector Graphics (<init>SVG</init>).  As the name suggests, this translates into excellent support for vector graphics.  (See <xref ref="topic-images-raster"/> and <xref ref="topic-images-vector"/> for the distinction.)  Why use Inkscape?<ul>
            <li><init>SVG</init> files are small and scale smoothly when you zoom in on a web page.  So this format is our top choice for how images are realized in the <init>HTML</init> output.  They will also work well in formats based on <init>HTML</init>, such as <init>EPUB</init>.</li>
            <li>The <init>SVG</init> format is how Inkscape works with images internally.  The file format it calls <q>Inkscape SVG</q> is valid <init>SVG</init>, along with additional information to make editing better and/or easier.  So any author may come back and easily edit an image saved in this format.</li>
            <li>Inkscape will export easily and efficiently to Portable Document Format (<init>PDF</init>), another vector format.  This is our top choice for realizing images in <latex/> output, which will become print or <init>PDF</init> output.</li>
            <li><init>SVG</init> is an <init>XML</init> format, just like <pretext/>.</li>
        </ul></p>

        <p>When would you use Inkscape?<ul>
            <li>Your image is more free-form and artistic than what a source language like TikZ or Asymptote will provide, and you do not need to embed any mathematical symbols.</li>
            <li>You do not want to learn some new source language (there <em>is</em> a significant learning curve for most of these).</li>
            <li>You want to annotate screenshots (see <xref ref="list-annotate-screenshot"/>).</li>
        </ul></p>

        <p>Note that when you save an image as <init>SVG</init> from within Inkscape, you have two choices: <q>Plain SVG</q> and <q>Inkscape SVG</q>.  The latter contains additions to the former which make subsequent editing better and/or easier.  So, you can choose to use <q>Plain</q> as the format used for your <init>HTML</init> output, and it will be smaller and provide great performance.  But you can also make an <q>Inkscape</q> version of the same name, and distribute it with your source files in a different directory, so you and others can edit it easily later.</p>

        <list xml:id="list-annotate-screenshot">
            <title>Annotated Screenshot</title>

            <introduction>
                <p>Suppose you want to include a screenshot of some application, and point out some aspect of it.</p>
            </introduction>

            <ol>
                <li>View the application on the highest-resolution monitor you can get your hands on.  Not a laptop and not a phone.</li>

                <li>Zoom in, so the area of interest fills as much of the screen as possible.  You are trying to capture as many pixels as possible.</li>

                <li>Use a screen-capture tool that allows you to save the result as Portable Network Graphics (<init>PNG</init>).  This is a lossless format, and you may be able to elect a high level of compression as part of the file-saving process.</li>

                <li>The only raster format explicitly supported by Inkscape is <init>PNG</init>.  So you can import the screenshot into Inkscape, and use the tools there to add arrows, red ovals, etc. to highlight key parts of the image.</li>

                <li>Save the result as <init>PNG</init>, since it already has a significant raster component, for use in <init>HTML</init> conversions.  And save again as <init>PDF</init> for use in print and <init>PDF</init> output.</li>
            </ol>
        </list>
    </section>

    <section xml:id="processing-images-pretext">
        <title>Images Described in Source</title>

        <p>We believe it is important to preserve a record of how diagrams and other graphics are produced.  This can be easy when a graphics language is employed to describe the graphical elements, rather than creating a bit-mapped image with some other interface.  So we have <tag>asymptote</tag>, <tag>latex-image</tag>, and <tag>sageplot</tag> for elements holding code to produce diagrams or images<idx>image</idx>.</p>

        <p>The upside to this is that small edits to the code can easily accomplish minor changes or corrections necessary for the images.  The <latex /> macros provided by an author can be used in the text <em>and</em> in a diagram, leading to greater consistency between the two.  Finally, starting from source, we can do the best possible job of producing image formats that are compatible with the document output formats and which scale smoothly in PDFs and in web browsers.</p>

        <p>
            The downside is that processing these images requires various <q>helper</q> programs, such as <c>pdflatex</c> and <c>sage</c>.  This requires installing the helper program and perhaps setting the path to it on your system.  This is done inside the <c>project.ptx</c> manifest as children as the <tag>executables</tag> element.
        </p>

        <p>
            Whenever you need to process images described in your source, run <c>pretext generate</c>.  This will build the correct image output file for your specified target (use <c>-t [target]</c>). If you would like to build additional image formats, you can add <c>--all-formats</c> to the command.
        </p>


    </section>

    <section xml:id="processing-author-tools">
        <title>Author Tools</title>
        <idx>author tools</idx>

        <p>While your writing project is getting underway, you may want to go in several directions at once.  We have two devices, and three reports, which can help you manage this.</p>

        <p>You may want to make a forward-reference to some future, not-yet-written material.  So you can go<cd>
            <cline>&lt;xref provisional="a reminder of future material"/&gt;</cline>
        </cd>in your source.  In your output, you will get a temporary place-holder of sorts.</p>

        <p>Comments in the source code of a computer program, labeled <c>TODO</c>, is a common device to help a programmer remember tasks that need to be completed.  You can use a similar device in your <pretext/> source.  Use an <init>XML</init> comment, delimited by <c>&lt;!--</c> and <c>--&gt;</c>, and make the first four non-blank characters spell <c>todo</c>, using any combination of lower- and upper-case you like.  Your Author's Report (next) will look even better if you follow that with a colon and a space, but this is not required.  So, for example, go<cd>
             <cline>&lt;!-- ToDo: include a section on salamanders and their life-cycle --&gt;</cline>
        </cd>  As an XML comment, you can place this anywhere.  Contents need to be plain characters, no XML will be active here.  Remember to escape the two XML characters, and also be aware that <c>--</c> is banned in comments outside of the delimiters.</p>

        <p>Use the <c>author.tools</c><idx><c>author.tools</c></idx> parameter set equal to <c>yes</c> and your <latex/> and <init>HTML</init> output will be annotated.  (See <xref ref="publisher-string-parameters"/> for more on parameters.)  Provisional cross-references and todo-comments will be visible and highlighted, and in particular, the <latex/> output will display an abundance of extra information (maybe too much).  The <latex />-specific publication file entry for draft mode will activate the <latex/> draft option (see <xref ref="latex-draft-mode-options"/>).  The intent here is to make a rough draft, for an author or collaborator only, reporting as much as possible that is incomplete, pending, or hidden, in the usual output.</p>

        <p>
            For users of <c>xsltproc</c>, the <c>authors-report.xsl</c> stylesheet, found in the <c>xsl/utilities</c> directory, will report all of the provisional cross-references and all of the properly prefixed todo-comments.  See <xref ref="xsltproc-author-tools"/>.
        </p>
    </section>

    <section xml:id="processing-updating-source">
        <title>Keeping Your Source Up-to-Date</title>

        <p>Once in a while it becomes necessary to adjust how the <pretext /> vocabulary is arranged, which involves adding or removing elements or attributes, or changing their behavior.  When elements or attributes are removed, or their relationships with other elements change, we say that certain items or behaviors are <term>deprecated</term><idx>deprecated</idx>.  Fortunately, we can often automate the changes.</p>

        <p>When there is a deprecation, a warning is added so that any conversion will report the presence of the old use in the console.  Sometimes we can preserve the old behavior, so there is no rush to make changes to your source.  Sometimes a change needs to be more urgent.  And frequently old behaviors do not get updates or bug-fixes.  Our warnings provide advice and information about what you need to do.  There are also announcements on public discussion groups, clearly marked as deprecations.  Also, the schema will change as part of any deprecation, so the old elements or old use will be reported.</p>

        <p>
            For some suggestions about how to automate the process of adjusting your source, see <xref ref="xsltproc-updating-source"/>.
        </p>

    </section>

    <section xml:id="processing-testing-html">
        <title>Testing <init>HTML</init> Output Locally</title>

        <p>Certain complicated parts of <init>HTML</init> output will not always function when you look at <pretext /> output by just opening files in your web browser.  These include knowls, Sage cells, and YouTube videos.  This is a consequence of security policies and so will vary from browser to browser.  A solution is to run a web server on your own machine, which is much easier than it sounds.</p>

        <p>
            In fact, this is exactly what the <pretext />-CLI does when you type the following command.
        </p>

        <console>
            <input>pretext view web</input>
        </console>

        <p>
            You can replace <q>web</q> with any target name, although it is really <init>HTML</init> builds that benefit from this feature.  The CLI uses Python to spin up a local web server so you can see a copy of your output by going to the <init>URL</init> the CLI gives as output (usually <url href="http://localhost:8000" visual="http://localhost:8000"/>, although if you are working in CoCalc, this will be different).
        </p>

        <p>
            There are two useful options that can be used with <c>pretext view</c> to speed up authoring.  First, the <c>-b</c> flag will build your source before starting the server (i.e., runs <c>pretext build</c> in the background).  Similarly, the <c>-g</c> flag will generate assets prior to viewing.  For small projects, adding the <c>-w</c> flag will <q>watch</q> your source for changes and rebuild the <init>HTML</init> output whenever the source changes (this also builds the source before starting the server).
        </p>

        <p>
            It is also possible to specify whether your server is public or private (on your local network) with the <c>-a</c> option, and to specify a port other than 8000 with the <c>-p</c> option.  (Run <c>pretext view --help</c> for more.)
        </p>

        <p>
            Having this quick local web server might be useful for other purposes. You can use the <c>-d</c> option to specify a path to any directory to serve any files, not just those created in <pretext />.
        </p>

        <p>Another option, in the case where you know where your output lives (such as when you use the <c>pretext/pretext</c> script) is to use Python itself to start a simple web server.  Ideally, first set your working directory to the location of your <init>HTML</init> output.  Then in a console, at a command-line:</p>

        <console>
            <input prompt="$ ">python3 -m http.server</input>
            <output>Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</output>
        </console>

        <p>Which tells you to open your browser using the address <c>http://0.0.0.0:8000/</c>.  <c>Ctrl-C</c> in the terminal will kill the server when you are done.  See the <url href="https://docs.python.org/3/library/http.server.html">Python documentation</url> for more options.</p>
    </section>

    <section xml:id="processing-testing-html-globally">
        <title>Testing <init>HTML</init> Output Globally</title>

        <p>Just like testing files locally can sometimes be misleading, testing on your own server can sometimes be misleading.  For example, on some university campuses, frequently accessed content (your textbook!) can be cached.  So when you update your files, it might not look like anything has changed.  An easy, free, quick solution is to place your <init>HTML</init> temporarily at <url href="https://app.netlify.com/drop" visual="app.netlify.com/drop">Netlify Drop</url> as a double-check on the source of any problems.</p>

        <p>This can also be a great solution if you do not have a server setup and want help from the <pretext/> community with your <init>HTML</init> output.  (See <xref ref="github-issues"/>.)</p>
    </section>

    <section xml:id="processing-doctest-sage">
        <title>Doctesting Sage Code</title>

        <p>Adding computer code to your textbook is a tricky proposition.  You can propose that it is merely an illustration, and not meant to have all the necessary details, or you can make it exact, correct and executable, and then risk inevitable changes to render your code obsolete.  At least you have the option of editing and reposting online versions quickly and easily.</p>

        <p>One of our main motivations for this project was mixing in code from the powerful, open source, mathematical software project, Sage (<xref ref="overview-sage" />).  When you add example Sage code to illustrate mathematical ideas, you are then encouraged to also include expected output in the <tag>output</tag> element.  Here comes one of the powerful advantages of XML source and XSL processing.</p>

        <p>
            This process currently requires <c>xsltproc</c>, and is described in <xref ref="xsltproc-doctest-sage"/>.
        </p>

        <p>The <c>pretext/xsl/pretext-sage-doctest.xsl</c> stylesheet, used in the usual way, will create one, or several file(s), in <em>exactly</em> the format Sage expects for automated testing.  So all your words are gone, and all your Sage input and output is packaged so Sage can run all the <tag>input</tag> and compare the results to the expected <tag>output</tag>.  See <xref ref="common-chunking-options"/> for details on obtaining more than one file.</p>

        <p>We have many years' experience testing hundreds of non-trivial Sage examples from textbooks, for linear algebra and abstract algebra.  Roughly every six months, we discover ten to twenty examples that fail.  Frequently the failures are trivial (usually output gets re-ordered), but some are significant changes in behavior that leads us to re-word surrounding guidance in the text, and in a few cases the failures have exposed bugs introduced into Sage.  It has been relatively easy to do this maintenance on a regular basis, and if it had not been done, the accumulated errors would be enough to greatly degrade confidence in the accuracy of the examples.</p>

        <p>Exact details for this process can be found in <xref ref="topic-doctest-sage" />.  Note that Sage is really just a huge Python library, so it might be possible to test pure Python code with this facility, but we have not tested this at all.  Similar support for other languages can be considered if requested for use in a serious project.</p>
    </section>

    <section xml:id="topic-build-in-cocalc">
        <title>Building Output in CoCalc</title>

        <p>CoCalc <url href="https://cocalc.com/" visual="cocalc.com/"><c>cocalc.com</c></url><idx>CoCalc</idx> has <em>all</em> the tools you need to author with <pretext />.  You will need an upgrade from a subscription to allow Internet connectivity, but at a minimum a colleague with a paid plan can spare you one, they are plentiful and meant to be shared.<ul>
            <li><p>Text editor: reasonably good, partially <init>XML</init> syntax-aware.  It is also now possible to start a virtual VS Code session and use their powerful text editing capabilities.</p></li>
            <li><p><c>git</c>: installed (so you can clone/pull <pretext/>).</p></li>
            <li><p><c>jing</c>: installed, so you can do <init>RELAX-NG</init> validation.</p></li>
            <li><p><latex />: installed with many additional packages.</p></li>
            <li><p>Python: installed, necessary for <c>pretext</c> script.</p></li>
            <li><p><c>pretext</c>: the CLI should be installed by default, although the version might lag.  Assuming you have a paid subscription, you should be able to upgrade with <c>pip install --upgrade pretext</c></p></li>
            <li><p><init>PDF</init> viewer: handed off to your browser.</p></li>
            <li><p><init>HTML</init> viewer: get a context menu on the cloud icon in the file view, and open in a new tab or new window.</p></li>
           <li><p><c>pretext view web</c> will allow you to view output through a python server.</p></li>
        </ul></p>
    </section>


</chapter>
