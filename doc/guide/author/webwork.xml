<?xml version="1.0" encoding="UTF-8"?>

<!--   This file is part of the documentation of PreTeXt      -->
<!--                                                          -->
<!--      PreTeXt Author's Guide                              -->
<!--                                                          -->
<!-- Copyright (C) 2013-2016  Robert A. Beezer                -->
<!-- See the file COPYING for copying conditions.             -->

<chapter xml:id="webwork-author">
  <title><webwork /> Exercises</title>
  <idx>
    <h><webwork/></h>
    <h><webwork/> exercises</h>
  </idx>
  <author>Alex Jordan</author>

  <introduction>
    <p>
      With a <webwork/> server
      (version 2.14 or higher, or <url href="https://webwork-ptx.aimath.org"><c>webwork-ptx.aimath.org</c></url>)
      and a little setup work, you can embed <webwork/> exercises in your <pretext/> project.
      HTML output can have interactive problem cells or print problems in <q>static</q> form.
      PDF output will print static versions.
      And all such exercises can be archived into a file tree to be uploaded onto a <webwork/> server
      for use in the <q>traditional</q> way.
    </p>
    <p>
      See the <pretext/> Publisher Guide for how to configure a <webwork/> course and server to process your <webwork/> problems,
      and then how to process them.
    </p>
  </introduction>

  <section xml:id="webwork-source">
    <title><webwork/> Problems</title>

    <introduction>
      <p>
        <alert>You must extract <webwork/> content as described in the Publisher Guide
        before you will be able to see any <webwork/> content in your output.</alert>
      </p>
      <p>
        A <tag>webwork</tag> tag must be inside an <tag>exercise</tag>,
        <em>optionally</em> preceded by an <tag>introduction</tag>,
        and <em>optionally</em> followed by a <tag>conclusion</tag>.
      </p>
      <pre>
        <![CDATA[
        <exercise>
          <introduction>
          </introduction>

          <webwork>
          </webwork>

          <conclusion>
          </conclusion>
        </exercise>
        ]]>
      </pre>
      <p>
        There are several methods for putting content into the <tag>webwork</tag>.
        (Note that an empty <tag>webwork</tag> with no attributes will simply produce the camelcase <webwork/> logo.)
      </p>
    </introduction>

    <subsection>
      <title>Using an Existing <webwork/> Problem</title>
      <p>
        If a problem already exists and is accessible from the hosting course's <c>templates/</c> folder,
        then you can simply include it as a <attr>source</attr> attribute.
        For example if it is a problem in the Open Problem Library (OPL), then relative to the <c>templates/</c> folder,
        its path is <c>Library/...</c> and you may use:
        <cd>&lt;webwork source="Library/PCC/BasicAlgebra/Exponents/exponentsMultiplication0.pg" /></cd>
        replacing the <c>&lt;webwork>&lt;/webwork></c> above.
      </p>
      <p>
        Or if you have a problem's PG file, you can upload it into the hosting course's <c>templates/local/</c> folder and use it with:
        <cd>&lt;webwork source="local/my_problem.pg" /></cd>
      </p>
    </subsection>

    <subsection>
      <title>Perl-free Problems</title>
      <p>
        If you'd just like to rattle off a quick question with no randomization, you can do as in this example.
      </p>
      <pre>
        <![CDATA[
        <exercise>
          <webwork>
            <statement>
              <p><m>1+2=</m><var name="'3'" width="5" /></p>
            </statement>
          </webwork>
        </exercise>
        ]]>
      </pre>
      <p>
        The <tag>exercise</tag> above could be given an optional <tag>title</tag>, <tag>introduction</tag>, and <tag>conclusion</tag>.
        The <tag>webwork</tag> inside could be given a <tag>hint</tag> and <tag>solution</tag>.
        These are discussed in <xref ref="webwork-pg-code">Subsection</xref>.
      </p>
      <p>
        In the above example, <c>'3'</c> is the <attr>name</attr> attribute to a <tag>var</tag> element.
        There is actually no <q>variable</q> named <q>3</q>; we are just using the slot where more complicated exercises
        would place a Perl variable answer.
      </p>
      <p>
        So the above is how to create an answer blank that is expecting <m>3</m> as the answer.
        What you give as a <attr>name</attr> attribute will be passed to PG's <c>Compute()</c> constructor,
        so it needs to be valid input for <c>Compute()</c>.
        Note that you could pass a string encased in quotes, or a perl expression. Just be mindful of the difference:
        <ul>
          <li>
            <p>
              <c>8**2</c> will process a perl real using exponentiation and lead to the MathObject Real 64.
            </p>
          </li>
          <li>
            <p>
              <c>'8^2'</c> will process a perl string and lead to the MathObject Real 64.
            </p>
          </li>
          <li>
            <p>
              <c>8^2</c> will process the perl real using bitwise XOR and lead to the MathObject Real 10.
            </p>
          </li>
        </ul>
      </p>
      <p>
        The default context is <c>Numeric</c>,
        which understands numerical expressions and formulaic expressions in the variable <m>x</m>.
        You can activate some other context as in this example.
      </p>
      <pre>
        <![CDATA[
        <exercise>
          <webwork>
            <setup>
              <pg-code>
                Context("ImplicitPlane");
              </pg-code>
            </setup>
            <statement>
              <p>The answer is <m>x+y=1</m>.</p>
              <p><var name="'x+y=1'" width="8" /></p>
            </statement>
          </webwork>
        </exercise>
        ]]>
      </pre>
      <p>
        Many special contexts are automatically detected by <pretext/>, and it loads the appropriate macro file into the PG problem.
        However you may need to explicitly load a macro file as described in <xref ref="webwork-pg-code">Subsection</xref>.
      </p>
    </subsection>

    <subsection xml:id="webwork-pg-code">
      <title>PG code in Problems</title>
      <p>
        To have randomization in problems
        or otherwise take advantage of the algorithmic programming capabilities of Perl and <webwork/>'s PG language
        requires using a <tag>setup</tag> tag.
        Having at least a little familiarity with coding problems in <webwork/> is necessary,
        although for simpler problems you could get away with mimicking the sample article in <c>mathbook/examples/webwork/</c>.
        A <tag>statement</tag>, <em>optional</em> <tag>hint</tag>, and <em>optional</em> <tag>solution</tag> follow.
      </p>
      <pre>
        <![CDATA[
        <webwork>

          <setup>
          </setup>

          <statement>
          </statement>

          <hint>
          </hint>

          <solution>
          </solution>

        </webwork>
        ]]>
      </pre>
      <p>
        The <tag>setup</tag> contains a <tag>pg-code</tag>.
        If you are familiar with code for <webwork/> PG problems, the <tag>pg-code</tag> contains lines of PG code
        that would appear in the <q>setup</q> portion of the problem.
        Typically, this is the code that follows <c>TEXT(beginproblem());</c> and precedes the first <c>BEGIN_TEXT</c> or <c>BEGIN_PGML</c>.
        If your code needs any special <webwork/> macro libraries,
        you may load them in a <tag>pg-macros</tag> tag prior to <tag>setup</tag>,
        with each such <c>.pl</c> file's name inside a <tag>macro-file</tag> tag.
        However many of the most common macro libraries will be loaded automatically
        based on the content and attributes you use in the rest of your problem.
      </p>
      <p>
        Here is a small example. Following the example, we'll continue discussing <tag>statement</tag> and <tag>solution</tag>.
      </p>
      <pre>
        <![CDATA[
        <webwork>
          <setup>
            <pg-code>
              Context("LimitedNumeric");
              $a = Compute(random(1, 9, 1));
              $b = Compute(random(1, 9, 1));
              $c = $a + $b;
            </pg-code>
          </setup>

          <statement>
            <p>Compute <m><var name="$a"/> + <var name="$b"/></m>.</p>
            <instruction>Type your answer without using the <c>+</c> sign.</instruction>
            <p>The sum is <var name="$c" width="2"/>.</p>
          </statement>

          <solution>
            <p><m><var name="$a"/> + <var name="$b"/> = <var name="$c"/></m>.</p>
          </solution>
        </webwork>
        ]]>
      </pre>
      <p>
        Within a <tag>statement</tag>, <tag>hint</tag>, or <tag>solution</tag>, reference <tag>var</tag> tags by <attr>name</attr>.
      </p>
      <p>
        Within the <tag>statement</tag>, a <tag>var</tag> tag with either a <attr>width</attr> or <attr>form</attr> attribute
        creates an input field answer blank that expects the variable with that <attr>name</attr> to be the answer.
      </p>
      <p>
        A <tag>var</tag> can have <attr>form="essay"</attr>, in which case it need not have a <attr>name</attr> attribute.
        This is for open-ended questions that must be graded by a human.
        The form field will be an expandable input block if the question is served to an authenticated user within <webwork/>.
        But for the <webwork/> cells in <pretext/> HTML output,
        there will just be a message explaining that there is no place to enter an answer.
      </p>
      <p>
        A <tag>var</tag> can have <attr>form="array"</attr>.
        You would use this when the answer is a Matrix or Vector MathObject (a <webwork/> classification)
        to cause the input form to be an array of smaller fields instead of one big field.
      </p>
      <p>
        A <tag>var</tag> can have <attr>form="popup"</attr> or <attr>form="buttons"</attr> for multiple choice questions.
      </p>
      <p>
        If you are familiar with PG, then in your <tag>pg-code</tag> you might write a custom evaluator
        (a combination of a custom answer checker, post filters, pre filters, <etc/>).
        If you store this similar to
        <cd>$my_evaluator = $answer -> cmp(...);</cd>
        then the <tag>var</tag> can have <attr>evaluator="$my_evaluator"</attr>.
      </p>
      <p>
        An <tag>instruction</tag> is specific instructions for how the reader might type or otherwise electronically submit their answer.
        Contents of an <tag>instruction</tag> will be omitted from print and other static output forms.
        The <tag>instruction</tag> is a peer to <tag>p</tag>, but may only contain <q>short text</q> children.
      </p>
      <p>
        Some general information on authoring <webwork/> problems can be found in
        a <url href="http://webwork.maa.org/wiki/Problem_Authoring_Videos">set of videos at <c>webwork.maa.org/wiki/Problem_Authoring_Videos</c></url>.
        Not all of this is relevant to authoring within <pretext/>,
        but there are parts that will be helpful for constructing the Perl code necessary for randomized problems.
      </p>
    </subsection>

    <subsection>
      <title>Reusing a <tag>webwork</tag> by <attr>xml:id</attr></title>
      <p>Planned.</p>
    </subsection>

    <subsection>
      <title>Using a Local PG Problem File</title>
      <p>Planned.</p>
    </subsection>

  </section>

</chapter>
