<?xml version="1.0" encoding="UTF-8"?>

<!-- This file is part of the documentation of MathBook XML   -->
<!--                                                          -->
<!--    MathBook XML Author's Guide                           -->
<!--                                                          -->
<!-- Copyright (C) 2013-2016  Robert A. Beezer                -->
<!-- See the file COPYING for copying conditions.             -->

<chapter xml:id="schema">
    <title>MathBook XML Syntax Specification</title>
    <author>
        <personname>Mitchel T. Keller</personname>
        <department>Department of Mathematics</department>
        <institution>
            <line>Department of Mathematics</line>
            <line>Washington and Lee University</line>
        </institution>
        <email>kellermt@wlu.edu</email>
    </author>

    <introduction>
        <p>This MathBook XML Author's Guide, along with the sample article and sample book distributed with the MathBook XML source, provide a wealth of examples of how to author in MathBook XML. However, at some point, you will undoubtedly encounter a situation where some of your text fails to appear in your output or <c>xsltproc</c> produces an error. Those are good moments to start investigating the formal specifcations of MathBook XML syntax, as most likely you tried to use something in a way incompatible with those specifications. This chapter will help you with the basics of reading these specifications.</p>
    </introduction>

    <section xml:id="schema-dtd">
        <title>Document Type Definition (DTD)</title>
        <introduction>
            <p>A <term>document type definition</term> (usually abbreviated as <term>DTD</term>) is a way of specifying the formal structure of an XML document, such as a MathBook XML file. It describes things such as the elements (tags) that are defined, where they may be placed relative to one another, and attributes that may be applied. DTDs were developed early in the evolution of XML, and thus they are widely supported. However, they have some limitations. In particular, there are some subtelties to MathBook XML that a DTD cannot capture, so RAB intends to eventually produce a Relax NG schema (see <xref autoname="yes" ref="schema-rng" />) that will cover these cases. Until then, we've got the DTD.</p>
        </introduction>
        <subsection>
            <title>Finding the DTD</title>
            <p>The MathBook XML distribution contains the DTD in the <c>schema/dtd</c> directory. However, as a plain text file, it's rather hard to read. Thus, we suggest that you take a look at the <url href="http://mathbook.pugetsound.edu/doc/dtd/">version on the MathBook XML website</url> that's displayed using LiveDTD, since it provides some nice clickable features. The version you get with the MathBook XML distribution is useful, however, as you can run the program <c>xmllint</c> to check your MathBook XML file for validity. See the <xref autoname="yes" ref="processing-dtd" /> for more information.</p>
        </subsection>

        <subsection>
            <title>Reading the DTD</title>
            <p>Let's start by taking a look at how the DTD specifies the definition of a section, which is included below, but if you'd like a more interactive version of it, go to the <url href="http://mathbook.pugetsound.edu/doc/dtd/">LiveDTD version of the DTD</url>, scroll down to <q>section</q> in the left panel, and click on it.</p>
            <program language="xml">
                <input><![CDATA[
                <!ELEMENT section (title, index*, author*, (((%block;|references|exercises)*)|(introduction?, subsection,(subsection|references|exercises)*,conclusion?))) >
                    <!ATTLIST section xml:id   ID       #IMPLIED>
                    <!ATTLIST section xml:base CDATA    #IMPLIED>
                    <!ATTLIST section xmlns:xi CDATA #FIXED "http://www.w3.org/2001/XInclude">]]>
                </input>
            </program>
            <p>We'll start with the first line. It starts off by telling us that we're defining an element called <c>section</c>, and everything from there to the end of the line tells us the composition of a <c>section</c>. First we see <c>title, index*, author*,</c>. This is telling us that the section <em>must</em> have a title, and <c>&lt;title&gt;</c> <em>must</em> come immediately after <c>&lt;section&gt;</c>. The <c>*</c> on <c>index</c> and <c>author</c> mean that the section title may be followed by zero or more <c>&lt;index&gt;</c> tags and zero or more <c>&lt;author&gt;</c> tags. (But don't think about putting <c>author</c> before <c>index</c>!) If you look at the source code for this chapter (which has a definition that begins identically to that for section), you'll see that I (MTK) added an author tag to claim responsibility for any mistakes in this chapter for the time being. However, RAB did not put author tags in the other chapters, since he wrote them all, and so the overall author tag covers that.</p>
            <p>The next section of the specification of <c>section</c> is where things get interesting. Carefully examining the parentheses, you'll see that there are two groupings separated by <c>|</c>. This means that what comes after the <c>title</c>, <c>index</c>, and <c>author</c> must take one of two forms: <c>(%block;|references|exercises)*</c> or <c>introduction?, subsection,(subsection|references|exercises)*,conclusion?</c>.  The <c>*</c> on the first option tells us that we may have zero or more occurrences of what comes inside the parentheses. Thus, we could go straight to a <c>&lt;/section&gt;</c> tag, which might be a good idea when outlining a document before you start writing. However, assuming you want a positive number of the things in the parentheses, this part of the specification allows you to jumble up  <c>%block;</c>s (whatever they are), <c>&lt;references&gt;</c> tags, and <c>&lt;exercises&gt;</c> tags to your heart's content. What's a <c>%block;</c>? If you click on the link the Live DTD, it will jump you to the definition of the block entity, and you'll see that the things usuable here include theorem, corollary, fact, definition, exercise, etc. But there's also another mysterious thing beginning with a <percent />: <c>%para;</c>. One quick click jumps us up and shows us that <c>%para;</c> is shorthand for <c>p</c>, the various lists, and a number of other things including <c>figure</c> and <c>table</c>. Thus, you can shove lots and lots of things inside a <c>section</c> (with a wide variety of orders permitted). However, there are some things <em>not</em> encapsulated by <c>(%block;|references|exercises)*</c>. For instance, it wouldn't make sense to put a <c>chapter</c> inside a <c>section</c>, so that's not allowed. On the other hand, a <c>subsection</c> inside a <c>subsection</c> makes perfect sense. To see how we can do that, we need to look at the second part of the specification of <c>section</c>. </p>
            <p>When we look at the second part of the specification of <c>section</c>, we encounter most of the rest of the key ideas of reading the DTD: <c>introduction?, subsection,(subsection|references|exercises)*,conclusion?</c>. The commas separating these parts indicate order is important, just as with the <c>title, index*, author*</c> part. The <c>?</c> indicates that the <c>section</c> may have at most one <c>introduction</c>. There then <em>must</em> be a <c>subsection</c>, as indicated by the lack of decorations like <c>?</c> or <c>*</c> on <c>subsection</c>. That mandatory <c>subsection</c> may then be followed by zero or more occurrences of <c>subsection</c>, <c>references</c>, and <c>exercises</c> in any order you wish. (As an example, each <c>subsection</c> could be followed by a block of <c>exercises</c> and a list of <c>references</c> before the beginning of the next <c>subsection</c>. Finally, we see another <c>?</c> element: <c>conclusion</c>, which again is optional as indicated by the question mark.</p>
            <p>After the <c>!ELEMENT</c> part of the definition of <c>section</c>, we see a list of <c>!ATTLIST</c> tags, which specify the attributes that can be assigned to <c>section</c>. The <c>xml:base</c> and <c>xmlns:xi</c> attributes are not particularly interesting, but <c>xml:id</c> is useful. This tells us that we may assign an identifier to the <c>section</c> by writing something of the form <c>&lt;section xml:id="schema-dtd"&gt;</c>, which then allows us to use the <c>xref</c> tag to insert a reference. (If you have a background in <latex />, think of <c>xml:id="blah"</c> as being like <c>label{blah}</c> and <c>&lt;xref ref="blah" /&gt;</c> as being like <c>ref{blah}</c>, although with some additional features. See <xref ref="overview-cross-references" autoname="yes" />.</p>
            <p>For another example, let's look at the specification of <c>exercise</c>: </p>
            <program language="xml">
                <input><![CDATA[
                    <!ELEMENT exercise (title?, index*, ((statement, hint*, answer*, solution*)|(introduction?, webwork, conclusion?)))>
                        <!ATTLIST exercise xml:id ID    #IMPLIED>
                        <!ATTLIST exercise number CDATA #IMPLIED>]]>
                </input>
            </program>
            <p>Here we see that an exercise may have at most one <c>title</c>, which can be followed by zero or more <c>index</c> tags. There are then two options: a <c>statement</c> (followed by zero or more <c>hint</c>s, followed by zero or more <c>answer</c>s, followed by zero or more <c>solution</c>s) or a singular <c>webwork</c> tag (optionally preceded by an <c>introduction</c> and/or followed by a <c>conclusion</c>). Again, the attributes include an <c>xml:id</c> for referencing purposes. Here we also have the option of a <c>number</c> attribute. See the <url href="http://mathbook.pugetsound.edu/examples/sample-article/html/exercises.html">Sample Article section on exercises</url> for more information.
            </p>
            <p>Let's look at one final example, which is the DTD entry for <c>ul</c>, the unordered list.</p>
            <program language="xml">
                <input><![CDATA[
                    <!ELEMENT ul (li+)>
                        <!ATTLIST ul cols  CDATA #IMPLIED>
                        <!ATTLIST ul label CDATA #IMPLIED>]]>
                </input>
            </program>
            <p>Here we see that there is exactly one thing that can be put inside a <c>ul</c> tag: <c>li</c>. The <c>+</c> after <c>li</c> tells us that we must have <em>at least</em> one <c>li</c> tag inside our list. That is, we may not have an empty list! The <c>cols</c> attribute allows a list to be formatted in a way that it consists of multiple columns. The <c>label</c> attribute determines what graphical markers are used for each list item. (Since these attributes are really metadata that describe how the MathBook XML file should be rendered into various output formats and not structural, the DTD does not give us this information, and we need to consult the documentation for MathBook XML to learn these facts.)</p>
        </subsection>
        <subsection>
            <title>Where Can I Put That Tag?</title>
            <p>After authoring in MathBook XML for a while, you will likely run into a situation where you put a lengthy passage in your source, wrapped in a particular tag, and the text never appears in your HTML or <latex /> output. Quite possibly, you've violated the DTD, and thus the call to <c>xsltproc</c> is silently dropping your text because it wasn't expecting it at that point. For example, suppose you tried putting an <c>image</c> inside a <c>p</c>. If you're lucky, you're using an editor such as emacs in nXML mode, which will highlight the <c>image</c> tag to tell you it's not valid. If you're unlucky, maybe <c>xsltproc</c> silently refuses to include your image in the output. (In between options include giving a warning or running <c>xmllint</c> to discover your MathBook XML is invalid. You may even find that, although your MathBook XML is invalid, <c>xsltproc</c> produces reasonable output. However, violating the MathBook XML specification means that you are not guaranteed to continue to get reasonable output in future updates, so you should correct the problem.) If you go to the LiveDTD and click on the + next to <q>image</q> in the left-hand column, you'll get an entry telling you that the <c>image</c> element (tag) is seen in <c>figure</c> and <c>sidebyside</c> and the definition of the entity <c>%para;</c>. That tells you that if you want to have valid MathBook XML that won't lose your image, you need to put it inside a <c>figure</c> or <c>sidebyside</c> <em>or</em> anywhere that allows for a <c>%para;</c>. Ugh. What allows for the inclusion of the combination of things lumped together under <c>%para;</c>? At the top of the left frame of the LiveDTD, click on <q><percent /> Entities</q>, and then click the + next to <c>para</c>. That will give you list of tags, including <c>answer</c>, <c>proof</c>, and <c>statement</c>, that can contain a <c>%para;</c> (and therefore an <c>image</c>). You'll notice that <c>p</c> is nowhere to be found, which tips you off that you can't nest an <c>image</c> inside a <c>p</c>, forcing you to edit your source. </p>
        </subsection>
        <conclusion>
            <p>Although not a comprehensive overview of the contents of the MathBook XML DTD, hopefully this brief tutorial has empowered you to dig into the DTD as needed. As a result, you should be well on your way to writing valid MathBook XML (or being able to ask useful clarifying questions on the Google Group).</p>
        </conclusion>
    </section>

    <section xml:id="schema-rng">
        <title>(*) Relax NG</title>
        <p>This will get written once we have a Relax NG schema for MathBook XML other than the one <c>trang</c> automatically generates for us from the DTD.</p>
    </section>


    <!--
    <section xml:id="topic-">
        <title></title>

    </section>

   -->

</chapter>
