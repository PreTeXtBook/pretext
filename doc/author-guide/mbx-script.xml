<?xml version="1.0" encoding="UTF-8"?>

<!--   This file is part of the documentation of PreTeXt      -->
<!--                                                          -->
<!--      PreTeXt Author's Guide                              -->
<!--                                                          -->
<!-- Copyright (C) 2013-2016  Robert A. Beezer                -->
<!-- See the file COPYING for copying conditions.             -->

<chapter xml:id="mbx-script">
    <title>The <c>mbx</c> Script</title>
    <idx><c>mbx</c> script</idx>

    <introduction>
        <p><init>XSL</init> is a very powerful language for text processing.  However, it cannot do everything.  The <c>mbx</c> script is a Swiss Army Knife of sorts to operate on parts of your document and manage processing that requires the application of external programs, such as <latex /> and Sage.</p>
    </introduction>

    <section xml:id="mbx-executing">
        <title>Running <c>mbx</c></title>

        <p><c>mbx</c> is a Python script, so you will need to have the Python interpreter on your system.  At a command-line (in a terminal or console), you can run<cd>
            <cline>mbx -h</cline>
        </cd> to get a summary of the commands.  Some of the processing may take a long time, or you may experience trouble.  There are two switches to enable more verbose output in your terminal or console.<cd>
            <cline>mbx -v [command arguments]</cline>
        </cd>will provide progress indicators, while <cd>
            <cline>mbx -vv [command arguments]</cline>
        </cd>will provide progress indicators along with additional information that will help you or a fellow author to discern where a problem lies.  Please <em>include all of this output</em> if you are asking for help, and do not assume you know exactly which part is relevant.</p>
    </section>

    <section xml:id="mbx-example-use">
        <title>Example Use</title>

        <p>Here is a typical example of using <c>mbx</c>.  You have several (or many!) diagrams and figures in your <pretext /> source, all authored in the TikZ language, and so packaged up within <tag>latex-image</tag> elements.  Your <latex />/<init>PDF</init> output looks beautiful, since <pretext /> simply inserts the TikZ code into the right place in the generated <c>*.tex</c> file, and you have done this several times until your figures look just right.</p>

        <p>Now you need to generate the <init>SVG</init> versions of your images that will accompany your <init>HTML</init> version of your book and provide nice scalable graphics. This is exactly the sort of chore the <c>mbx</c> script was designed for.  You might run<cd>
            <cline>mbx -vv -c latex-image -f svg -d ~/books/aota/images ~/books/aota/animals.xml</cline>
        </cd>Here <c>-c</c> is specifying the <q>component</q> of your book to process, and <c>-f</c> is specifying the <q>format</q> of what is being produced.  The <c>-d</c> argument specifies a directory where the output ends up, in this case a collection of <init>SVG</init> files, one per image.</p>
    </section>

    <section xml:id="mbx-strategy">
        <title>Strategy</title>

        <p>Much like the build advice at the end of <xref ref="processing-file-management" />, the <c>mbx</c><idx><c>mbx</c></idx> script collects necessary bits into a system-created temporary directory, does its work, and copies out the desired results.  So in the example of the previous section, each chunk of TikZ code is isolated, your <latex /> macros are copied from <tag>docinfo</tag>, and a syntactically correct <latex /> file is produced (one per image).  Then <c>mbx</c> calls your <latex /> executable on each of these files to produce a one-page <init>PDF</init>.  This is then cropped and converted to  an <init>SVG</init> version, which at the end is copied to the location specified in the <c>-d</c> argument.</p>


        <p>Some insight into failures can be found in the temporary directory where all this processing happened.  (We leave the directory, and its contents, behind for the system to clean-up later).  Early in the <c>-vv</c> doubly-verbose output, this directory is reported after the string <c>temporary directory:</c>.</p>


        <p>Some notes:<ul>
            <li>If you have modularized your source across more than one <init>XML</init> file, then be sure to provide your <q>top-level</q> or <q>master</q> file as the final argument to the script, just like you would for an invocation of <c>xsltproc</c>.  It is important to understand that your source is one huge <q>source tree</q> and your file-by-file modularization is never respected or recognized in any way.  In particular, use of the <c>xinclude</c> mechanism is handled by the script, and you should not apply the script to each of your source files individually.  If image production (or some other task) takes a long time, see <xref ref="restrict-mbx-scope" /> for a way to have the script restrict its action to only a portion of your project.</li>

            <li>Certain arguments that are filenames require a full (not relative) path to locate the right objects.  In the example above, you can see the source file requires this (where the shell in use here will expand the ~ to the user's home directory).  The <c>-d</c> flag does not require a full path, and so can be specified relative to the current working directory.</li>

            <li>Do not place the script, or configuration files, anywhere else (except as recommended for your personal copy of the configuration file).  The locations are important for locating other files, such as the stylesheets used to isolate parts of your project for processing.</li>

            <li>Much of the work of this script happens in the temporary directory described above.  We leave a lot of intermediate work behind in this directory.  Often, exploring this directory is helpful when debugging problems, or a failure to finish successfully.</li>
        </ul></p>
    </section>

    <section xml:id="debugging-mbx-image-generation">
        <title>Debugging Image Generation</title>

        <p>A principal use of the <c>mbx</c> script is to isolate source code from <tag>latex-image</tag> sections, package them up as proper <c>*.tex</c> files, run <latex /> to make cropped <init>PDF</init> versions, and then convert these to other formats such as <init>SVG</init> or <init>PNG</init>.</p>

        <p>Much of this activity happens in a temporary directory.  If you use the <c>-vv</c> switch described above, then one of the messages early in the output describing the initialization will be the name of this directory.  Looking to see what files end up there, and what those files contain, is often useful in determining the step where this toolchain fails, and maybe even why.</p>

        <p>Another option is to ask for the actual <c>*.tex</c> files as the result of a run.  This is accomplished with the <c>-f source</c> option when invoking <c>mbx</c>.  If the right packages or macros are not being employed in these files, this is an easy way to get at the source files for inspection and analysis.</p>
    </section>

    <section xml:id="restrict-mbx-scope">
        <title>Restricting the Scope</title>

        <p>The <c>-r</c><idx><c>-r</c></idx> (<c>--restrict</c><idx><c>--restrict</c></idx>) switch deserves special mention.  It is followed by the value of an <attr>xml:id</attr> attribute present in your source XML file.  Then whatever action the script is asked to perform, it will only act on a subtree of the hierarchy, rooted at the element with the given <attr>xml:id</attr> value.</p>

        <p>So if your images are complex or numerous (or both!) and take a long time to process, you can restrict attention to whatever part of the document you are actively editing, and you can even restrict to a single <tag>image</tag> and so produce just a single graphics file.</p>
    </section>

    <section xml:id="mbx-helpers">
        <title>Configuring External Helper Programs</title>

        <p>Our main processor, <c>xsltproc</c><idx><c>xsltproc</c></idx>, is not a general-purpose compiler, and does not <q>call</q> external programs.  That is the primary purpose of the <c>mbx</c> script.  You will see a configuration file, <c>script/mbx.cfg</c>, as part of the distribution.  Read the comments at the top of this file, but foremost, realize that you are not meant to edit this file.  It is a template, and any changes you make will be overwritten with an original version when you update.  Instead, make a copy and place it as <c>mathbook/user/mbx.cfg</c> (for instance, if you are in the <c>mathbook</c> directory, then the commands <c>mkdir user</c> and <c>cp script/mbx.cfg user/</c> would be appropriate).  The script will look for this copy first, then fallback to the generic version.</p>

        <p>The entries of this file are the names of executable files that perform certain tasks as part of the script's functions.  If it seems that certain helper programs are not being found, you can provide full path names, and that may solve the problem.</p>
    </section>

    <section xml:id="mbx-output">
        <title>Output</title>

        <p>Once the <c>mbx</c> script produces results, it is your responsibility to keep track of them.  Early in a project, you may wish to regenerate images regularly, and not save the results permanently (for instance, you  may not want to track them under version control).  In this case, a build script is very useful.  For a mature project, you may only regenerate images you know have changed, or when you create a new edition.  And you may wish to include them with your source files, under revision control, for your readers to use.</p>

        <p>More critically, you need to place items generated by the <c>mbx</c> script where the rest of your output can find them.  For example, by default <init>HTML</init> output expects images to be in a subdirectory named <c>images</c>.  (This default can be changed, though it seems almost nobody does.)</p>
    </section>

    <section xml:id="mbx-capabilities">
        <title><c>mbx</c> Capabilities</title>

        <p>Again, the command <c>mbx -h</c> will remind you of the various options for the script.  The followinng is a brief summary, in general terms, of what is possible.<dl width="narrow">
            <li>
                <title><latex /> Graphics</title>
                <p><latex /> has a variety of languages for specifying images, such as xypic, pgfplots, and TikZ.  By including the necessary packages or setup commands in <c>docinfo/latex-preamble</c>, these can all be generated at once, in the manner of the example earlier.</p>
            </li>

            <li>
                <title>Asymptote</title>
                <p>Images described by the Asymptote language can be processed in a manner entirely similar to that for images described with <latex /> graphics languages.  This requires having the <c>asy</c> executable on your system and locatable via the <c>mbx</c> configuration file.</p>
            </li>

            <li>
                <title>Sage Plot</title>
                <p>If you have a version of Sage installed on your system, you can specify the path to the executable and obtain images described by Sage code.  See the sample article for more information.</p>
            </li>

            <li>
                <title>All Formats</title>
                <p>If you desire images in a wide variety of formats, the option <c>-f all</c> will oblige.</p>
            </li>

            <li>
                <title>YouTube Thumbnails</title>
                <p>For each YouTube video (or itemized playlist) you specify, the script will go the YouTube site and grab a thumbnail image for that video (or first video from the itemized playlist). These get used in static formats, such as <init>PDF</init>.</p>
            </li>

            <li>
                <title><webwork /></title>
                <p>Various conversions of <webwork /> problems are facilitated through communication with a <webwork /> server.  This server is specified as an argument to the <c>-s</c> option.  See <xref ref="webwork" /> for the details of this procedure.</p>
            </li>
        </dl></p>
    </section>

    <section xml:id="section-mbx-on-windows">
        <title><c>mbx</c> on Windows</title>
        <p>At present, the <c>mbx</c> script assumes that your installation is similar to the one described in <xref ref="windows-install-notes" />. Making the <c>mbx</c> script Windows-compatible is an ongoing project. It is possible you may find a bug, which we would ask that you report. In addition, if you have followed the directions in <xref ref="windows-install-notes" />, then you will need to customize the <c>mbx.cfg</c> configuration file, which tells <c>mbx</c> where to find the helper programs it relies on. See below for the details.</p>
        <p>The script uses a <latex /> utility called <c>pdfcrop</c><idx><c>pdfcrop</c></idx> to, well, crop PDF images generated by a <latex /> engine. This utility has not been made to work in the Windows CMD shell. If you want to generate images on Windows, you should use the Git Bash shell as described in <xref ref="installing-git" />.<ol>
            <li>
                <p>Copy the file <cd>/path/to/mathbook/script/mbx.cfg</cd> to <cd>/path/to/mathbook/user/mbx.cfg</cd></p>
            </li>
            <li>
                <p>Replace the right-hand side of the entry for <c>pdfpng</c> with the full path name of the <c>convert</c> utility installed with ImageMagick (<xref ref="installing-imagemagick" />), <alert>using forward slashes</alert>. It will be something like <cd>c:/ImageMagick-7.0.1-Q16/convert.exe</cd></p>
            </li>
        </ol></p>
    </section>

    <section xml:id="section-python-requests">
        <title>Python <c>requests</c> Library</title>

        <p>In some situations the <c>mbx</c><idx><c>mbx</c></idx> script will go out on the Internet to fetch some interesting bits for you, saving you the trouble.  These include<ul>
            <li>Grabbing, downloading, and organizing stock thumbnails for YouTube videos, using a standard API provided for this purpose.  These get used in PDF output in place of embedded videos.</li>
            <li><webwork /> problems that are stored on a remote server will give up <latex /> versions if asked.  Again, these are used for <init>PDF</init> output in place of interactive versions.</li>
        </ul>We use the Python <c>requests</c> module/library to manage the connections to these external servers.  There are two items to be aware of.</p>

        <paragraphs>
            <title>Installation</title>

            <p>This library is not available on Apple computers by default.  From Alex Jordan comes the following incantation at the command line,<cd>
                <cline>sudo easy_install pip</cline>
                <cline>sudo pip install requests</cline>
            </cd>which was last tested 2017-03-31.  Please update us if the situation has changed or there is more to add here.</p>
        </paragraphs>

        <paragraphs>
            <title>Warnings</title>

            <p>Using this library to connect to a webserver securely via <c>HTTPS</c> will raise a warning since the support for SSL certificates is not complete.  You will see messages similar to<cd>
                <cline>site-packages/requests/packages/urllib3/connectionpool.py:843:</cline>
                <cline>InsecureRequestWarning: Unverified HTTPS request is being made.</cline>
                <cline>Adding certificate verification is strongly advised.</cline>
                <cline>See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings</cline>
                <cline>InsecureRequestWarning</cline>
            </cd>We have not figured out the best way to stop these, as of 2017-04-01.</p>
        </paragraphs>
    </section>

    <!--
    <section xml:id="processing-">
        <title>(*) </title>

    </section>

   -->


</chapter>
