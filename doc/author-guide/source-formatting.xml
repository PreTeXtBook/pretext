<?xml version="1.0" encoding="UTF-8"?>

<!--   This file is part of the documentation of PreTeXt      -->
<!--                                                          -->
<!--    <pretext /> User's Guide                             -->
<!--                                                          -->
<!-- Copyright (C) 2013-2016  Robert A. Beezer                -->
<!-- See the file COPYING for copying conditions.             -->

<chapter xml:id="source-formatting">
    <title>Formatting Your Source</title>

    <section>
        <title>Structure</title>

        <p>Source for your MathBook projects are simple ASCII text files.  These may be created with any text editor, though it is handy if it has syntax highlighting and some awareness of how XML is structured (such as providing tag completion).  So a <q>programmer's</q> editor may be worth obtaining or learning, especially if you have a big project.  This is one of the two basic required tools and you can use whatever one you want.  There are <q>XML editors</q>, though they often seem like overkill.  I have found the cross-platform Sublime Text editor powerful and lightweight, with good support for XML.</p>

        <p>Tabs might be allowable in some places, but might cause problems elsewhere (<eg /> Python/Sage code), so are best avoided.  Indentation, to reflect the nested structure of XML, might be desirable, especially when debugging mismatches.</p> 
    </section>

    <section>
        <title>Whitespace</title>

        <p>Whitespace is allowed and encouraged in your source in some places, but problematic and discouraged in other places.  This is not as important if you only plan to create HTML output, but is critical if you plan to create <latex /> output.  In <tex /> a blank line signifies the end of a paragraph and the start of a new one.  It can be very easy to introduce an extra line feed into your XML and have it come through to your <latex /> in the conversion.  The result is unwanted vertical space (which can be hard to track down).</p>

        <p>Certain elements in MathBook are containers<mdash />they are meant to only hold other elements.  Obvious examples are chapters, sections, subsections, <ellipsis />  Others include elements like <tag>ol</tag> for an ordered list, which holds a sequence of <tag>li</tag> elements for list items.  Within these elements, all extraneous whitespace gets removed, including indentation and blank lines.  So you can format for maximum readibility as you write and edit, however you like.  For mathematics, the principal container is the <tag>md</tag> element, which is for <q>math displays</q> and holds a sequence of <tag>mrow</tag> elements that are <q>math rows</q>.  Find an accurate list of these container elements by looking for the <c>strip-space</c> lists early in the <c>mathbook-common.xsl</c> file.</p>

        <p>For other elements, all whitespace gets carried through the conversion.  So I like to author these elements <q>tight</q>, with no line feeds at all (and let my editor wrap the lines while I edit).  The best example is the paragraph element, <tag>p</tag>.  And it is the same for many of the elements that are used in a paragraph, such as <tag>em</tag> for emphasis.  For mathematics, both <tag>m</tag> and <tag>me</tag> should be authored tight.  If an element is not in the <c>strip-space</c> lists mentioned above, then you should write it tight.  If <latex /> output is important, periodically check the output <c>*.tex</c> file for blank lines.  Pleae report any blank lines, with a minimal working example, that are not cured by careful formatting in your source.</p>
    </section>

    <section>
        <title>Special Characters, XML</title>

        <p>XML has a very simple syntax.  There are just five reserved characters: &apos;, &quot;, <less />, <greater /> and <ampersand />.  The expressive power comes from the freedom to invent new elements (such as you see in MathBook!) and the processing power comes sophisticated tools for traversing a hierarchical structure.  Anytime you mix languages, such as when using one to write about another, you have to be careful about the special characters and the mechanisms for <q>escaping</q> them.  An advantage of XML is the limited number of reserved characters, and that only three require any caution.</p>

        <p>The apostrophe (&apos;) and quotation mark (&quot;) are important for delimiting XML attributes, and for specifying literal strings in attributes.  For MathBook source files, there are no special rules.  Though be aware of the <tag>q</tag> element which will give better results than a quotation mark.</p>

        <p>Angle brackets (&lt;, &gt;) may be obtained in regular text with <tag empty="yes">langle</tag> and <tag empty="yes">rangle</tag>, or a matching pair may be obtained by wrapping in the <tag>angle</tag> element.  In mathematics, specifically within <tag>m</tag>, <tag>me</tag> and <tag>mrow</tag> elements, strict inequalities will confuse XML processing, since they look like the start or end of an element.  Use the <latex /> macros, <c>\lt</c> and <c>\gt</c> instead.  MathJax has the macros pre-defined, and MathBook will add the correct definitions to the generated <latex /> output file.  Inside of code, such as Sage source code, you need to be more careful.  You can use the escaped versions of these characters, which are <c><![CDATA[&lt;]]></c>  and  <c><![CDATA[&gt;]]></c>.  If you have many lines, with many occurences of these symbols, you can use the last resort mechanism, which is to make your code all a <q>CDATA</q> block.  Lead with <![CDATA[<![CDATA[]]> and finish with <![CDATA[]]]]><![CDATA[>]]>.</p>

        <p>Amersnd - youwill ahve noticed escaped version above.</p>
    </section>




    <section>
        <title>Special Characters, <latex /></title>
        <p></p>
    </section>
    <section>
        <title></title>
        <p></p>
    </section>
</chapter>
