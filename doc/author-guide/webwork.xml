<?xml version="1.0" encoding="UTF-8"?>

<!--   This file is part of the documentation of PreTeXt      -->
<!--                                                          -->
<!--      PreTeXt Author's Guide                              -->
<!--                                                          -->
<!-- Copyright (C) 2013-2016  Robert A. Beezer                -->
<!-- See the file COPYING for copying conditions.             -->

<chapter xml:id="webwork">
    <title><webwork /> Automated Homework Problems</title>
    <author>Alex Jordan</author>

    <introduction>
        <p>With a <webwork /> server (version 2.14 or higher, or <url href="webwork-ptx.aimath.org" />) and a little setup work, you can embed <webwork /> exercises<idx><h><webwork /></h><h><webwork /> exercise</h></idx> in your <pretext /> project. HTML output will have interactive problem cells. PDF output will contain static versions of exercises. And all such exercises can be archived by the <c>mbx</c> script into a file tree to be uploaded onto the <webwork /> server for use in the <q>traditional</q> way.</p>
    </introduction>

    <section xml:id="webwork-configuration">
        <title>Configuring a <webwork /> Course for <pretext /></title>
        <p>We assume a mild familiarity with administrating a <webwork /> server. The version of <webwork /> needs to be 2.14 or later for full-feature use with <pretext />, although with versions 2.12 and 2.13 most features should function except for <latex /> output (see <xref ref="webwork-latex-output">Subsection</xref>. Using the <c>admin</c> course, create a course named <c>anonymous</c>. In the course's Course Configuration menu, set all permissions to <c>admin</c> (or perhaps set some to the even more restrictive <c>nobody</c>). Except set <q>Allowed to login to the course</q> to <c>login_proctor</c>.</p>
        <p>In the Classlist Editor, add a user named <c>anonymous</c>, and set that user's permission level to <c>login_proctor</c>, the permission level one higher than <c>student</c>. Set that user's password to <c>anonymous</c>. Note that because this is public information, anyone will be able to log into this course as user <c>anonymous</c>. This is why setting the permissions earlier is very important. (Especially preventing this user from changing its own password.)</p>
        <p>Add the following lines to the <c>course.conf</c> file (which lives in the parent folder of the <c>templates/</c> folder.)</p>
        <pre>
        # Hide message about previewing hints and solutions for instructors
        $pg{specialPGEnvironmentVars}{ALWAYS_SHOW_HINT_PERMISSION_LEVEL} = 100;
        $pg{specialPGEnvironmentVars}{ALWAYS_SHOW_SOLUTION_PERMISSION_LEVEL} = 100;
        </pre>
        <p>In the <c>templates/macros/</c> folder, edit <c>PGcourse.pl</c> (or create it if need be) and add the lines:</p>
        <pre>
        <![CDATA[
        #### Replace essay boxes with a message
        sub essay_box {
            my $out = MODES(
                TeX => '',
                Latex2HTML => '',
                HTML => qq!<P>If you were logged into a WeBWorK course 
                and this problem were assigned to you, 
                you would be able to submit an essay answer 
                that would be graded later by a human being.</P>!,
                PTX => '',
            );
            $out;
        };

        #### Suppress essay help link
        sub essay_help {};

        #### How many attempts until hint is available
        $showHint = -1;
        # May be a bug that WeBWorK requires -1 instead of 0
        # for immediate access to hints

        1;
        ]]>
        </pre>
        <p>Now <pretext /> will be able to communicate with this course to retrieve what is needed.</p>
    </section>

    <section xml:id="webwork-source">
        <title><webwork /> Problems in Source</title>

        <introduction>
            <p>A <tag>webwork</tag><idx><webwork /></idx> tag must be inside an <tag>exercise</tag>, optionally preceded by an <tag>introduction</tag>, and optionally followed by a <tag>conclusion</tag>.</p>
            <pre>
            <![CDATA[
            <exercise>
                <introduction>
                </introduction>

                <webwork>
                </webwork>

                 <conclusion>
                 </conclusion>
            </exercise>
            ]]>
            </pre>
            <p>There are several methods for putting content into the <tag>webwork</tag>. (Note that an empty <tag>webwork</tag> with no attributes will simply produce the camelcase <webwork /> logo.)</p>
        </introduction>

        <subsection>
            <title>Using an Existing <webwork /> Problem</title>
            <p>If a problem already exists and is accessible from the <c>anonymous</c> course's <c>templates/</c> folder, then you can simply include it as a <attr>source</attr> attribute. For example, if it is a problem in the Open Problem Library (OPL) then relative to the <c>templates/</c> folder, its path is <c>Library/...</c> and you may use:</p>
            <pre>
            <![CDATA[
            <webwork source="Library/PCC/BasicAlgebra/Exponents/exponentsMultiplication0.pg" />
            ]]>
            </pre>
            <p>Or if you have a problem's PG file, you can upload it into the <c>anonymous</c> course's <c>templates/local/</c> folder and use it with:</p>
            <pre>
            <![CDATA[
            <webwork source="local/my_prolbem.pg" />
            ]]>
            </pre>
        </subsection>

        <subsection>
            <title>Perl-free Problems</title>
            <p>If you'd just like to rattle off a quick question with no randomization, you can do as in this example:</p>
            <pre>
            <![CDATA[
            <exercise>
                <webwork>
                    <statement>
                        <p><m>1+2=</m><var name="'3'" width="5" /></p>
                    </statement>
                </webwork>
            </exercise>
            ]]>
            </pre>

            <p>The above example could be given an optional title, introduction, conclusion, hint, and solution. These are discussed in <xref ref="webwork-pg-code">Subsection</xref>.</p>

            <p>In the above example, <c>'3'</c> is the <attr>name</attr> attribute to a <tag>var</tag> element. This is how to create an answer blank that is expecting <m>3</m> as the answer. What you give as a <attr>name</attr> attribute will be passed to PG's <c>Compute()</c> command, so it needs to be valid input for <c>Compute()</c>. Note that you could pass a string encased in quotes, or a perl expression. Just be mindful of the difference:<ul>
                <li>
                    <p><c>8**2</c> will process a perl real using exponentiation and come up with the MathObject Real 64.</p>
                </li>
                <li>
                    <p><c>'8^2'</c> will process a perl string and come up with the MathObject Real 64.</p>
                </li>
                <li>
                    <p><c>8^2</c> will process the perl real using bitwise XOR and come up with the MathObject Real 10.</p>
                </li>
            </ul></p>

            <p>The default context is <c>Numeric</c>, which understands numerical expressions and formulaic expressions in the variable <m>x</m>. You can activate some other context as in this example:</p>
            <pre>
            <![CDATA[
            <exercise>
                <webwork>
                    <setup>
                        <pg-code>
                            Context("ImplicitPlane");
                        </pg-code>
                    </setup>
                    <statement>
                        <p>The answer is <m>x+y=1</m>.</p>
                        <p><var name="'x+y=1'" width="8" /></p>
                    </statement>
                </webwork>
            </exercise>
            ]]>
            </pre>

            <p>Many special contexts are automatically detected by <pretext />, and it loads the appropriate macro file into the PG problem. However you may need to explicitly load a macro file as described in <xref ref="webwork-pg-code">Subsection</xref>.</p>

        </subsection>

        <subsection xml:id="webwork-pg-code">
            <title>PG code in Problems</title>
            <p>To have randomization in problems or otherwise take advantage of the algorithmic programming capabilities of Perl and <webwork />'s PG language requires using a <tag>setup</tag> tag. Having at least a little familiarity with coding problems in <webwork /> is necessary, although for simpler problems you could get away with mimicking the sample article in <c>mathbook/examples/webwork/</c>. A <tag>statement</tag>, (optional) <tag>hint</tag>, and (optional) <tag>solution</tag> follow. The whole thing can have an optional <tag>title</tag>.</p>
            <pre>
            <![CDATA[
            <webwork>
                <title>Optional</title>

                <setup>
                </setup>

                <statement>
                </statement>

                <hint>
                    <p>Optional</p>
                </hint>

                <solution>
                    <p>Optional</p>
                </solution>

            </webwork>
            ]]>
            </pre>

            <p>The <tag>setup</tag> contains a section of <tag>var</tag> tags followed by a <tag>pg-code</tag>. If you are familiar with code for <webwork /> PG problems, the <tag>pg-code</tag> contains lines of PG code that would appear in the <q>setup</q> portion of the problem. Typically, this is the code that follows <c>TEXT(beginproblem());</c> and precedes the first <c>BEGIN_TEXT</c> or <c>BEGIN_PGML</c>. If your code needs any special <webwork /> macro libraries, you may load them in a <tag>pg-macros</tag> tag prior to <tag>setup</tag>, with each such <c>.pl</c> file's name inside a <tag>macro-file</tag> tag. However many of the most common macro libraries will be loaded automatically based on the content and attributes you use in the rest of your problem.</p>

            <p>For each Perl variable (scalar, array, or hash) that is used in the <tag>pg-code</tag> and which will <em>also</em> be used in the <tag>statement</tag>, <tag>solution</tag>, or as an answer to an answer blank, there should be a <tag>var</tag>. These <tag>var</tag> tags are primarily to help MBX handle static output, but they also allow for some optimal leveraging of <webwork /> features.</p>

            <p>A <tag>var</tag> in the <tag>setup</tag> always has a <attr>name</attr> attribute, which should match the variable's name in your <tag>pg-code</tag> (<eg /> <c>$x</c>, <c>@a</c>, <etc />). Each <tag>var</tag> should usually have a <tag>static</tag> tag with <latex /> code for the static version of the answer (possibly inside a <c>\text{}</c>). For PDF and other static output modes, this <latex /> code will be used to print <tag>var</tag> values, since the <webwork /> server will play no role.</p>

            <p>Lastly, a <tag>var</tag> in the <tag>setup</tag> can have a <attr>category</attr> attribute. This is intended for variables which will be used as answers. Based on a <attr>category</attr>, an automatic help syntax link will be provided adjacent to an answer blank. For instance <attr>category="point"</attr> will provide a link explaining the syntax for typing a point.</p>

            <p>Here is a small example. Following the example, we'll continue discussing <tag>statement</tag> and <tag>solution</tag>.</p>
            <pre>
            <![CDATA[
            <webwork>
                <title>Integer Addition</title>

                <setup>
                    <var name="$a">
                        <static>9</static>
                    </var>
                    <var name="$b">
                        <static>8</static>
                    </var>
                    <var name="$c" category="integer">
                        <static>17</static>
                    </var>

                    <pg-code>
                        $a = Compute(random(1, 9, 1)); 
                        $b = Compute(random(1, 9, 1)); 
                        $c = $a + $b;
                    </pg-code>
                </setup>

                <statement>
                    <p>Compute <m><var name="$a" />+<var name="$b" /></m>.</p>
                    <instruction>Type your answer without using the <c>+</c> sign.</instruction>
                    <p>The sum is <var name="$c" width="2" />.</p>
                </statement>

                <solution>
                    <p><m><var name="$a" />+<var name="$b" />=<var name="$c" /></m>.</p>
                </solution>
            </webwork>
            ]]>
            </pre>

            <p>Within a <tag>statement</tag>, <tag>hint</tag>, or <tag>solution</tag>, reference <tag>var</tag> tags by <attr>name</attr>. For HTML and PG output, the Perl variable will be used. For static output, the <tag>var</tag> tag's <tag>static</tag> child will be used.</p>

            <p>Within the <tag>statement</tag>, a <tag>var</tag> tag with either a <attr>width</attr> or <attr>form</attr> attribute creates an input field. The <attr>name</attr> attribute declares what the answer will be.</p> 

            <p>An <tag>var</tag> can have <attr>form="essay"</attr>, in which case it need not have a <attr>name</attr> attribute. This is for open-ended questions that must be graded by a human. The form field will be an expandable input block if the question is served to an authenticated user within <webwork />. But for the <webwork /> cells in MBX HTML output, there will just be a message explaining that there is no place to enter an answer.</p>

            <p>An <tag>var</tag> can have <attr>form="array"</attr>. You would use this when the answer is a Matrix or Vector MathObject (a <webwork /> classification) to cause the input form to be an array of smaller fields instead of one big field.</p> 

            <p>An <tag>var</tag> can have <attr>form="popup"</attr> or <attr>form="buttons"</attr>. These are not necessary for HTML and PG output to behave, but are needed if you intend for PDF output to emulate these answer entry field types.</p>

            <p>If you are writing a multiple choice question and using <attr>form="popup"</attr> or <attr>form="buttons"</attr> in your <tag>var</tag>, instead of a <tag>static</tag> in the corresponding <tag>var</tag> from the <tag>setup</tag>, use a <tag>set</tag> tag, with <tag>member</tag> children. The <tag>member</tag> tags would be the multiple choice options, and each can have a <attr>correct="yes"</attr> attribute to identify the correct choice(s). There is some unavoidable redundancy between listing these <tag>member</tag> tags in the <tag>setup</tag> and listing them again in the actual <tag>pg-code</tag>.</p> 

            <p>If you are familiar with PG, then in your <tag>pg-code</tag> you might write a custom evaluator (a combination of a custom answer checker, post filters, pre filters, <etc />). If you store this similar to</p><pre>$my_evaluator = $answer -> cmp(...);</pre><p>then the <tag>var</tag> can have <attr>evaluator="$my_evaluator"</attr>.</p>

            <p>An <tag>instruction</tag> is specific instructions for how the reader might type or otherwise electronically submit their answer. Contents of an <tag>instruction</tag> will be omitted from print and other static output forms. The <tag>instruction</tag> is a peer to <tag>p</tag>, but may only contain <q>short text</q> children.</p>

            <p>Some general information on authoring <webwork /> problems can be found in a <url href="http://webwork.maa.org/wiki/Problem_Authoring_Videos">set of videos</url> at<cd>webwork.maa.org/wiki/Problem_Authoring_Videos</cd>
            Not all of this is relevant to authoring within <pretext /> but there are parts that will be helpful for constructing the Perl code necessary for randomized problems.</p>

        </subsection>

        <subsection>
            <title>Reusing a <tag>webwork</tag> by <attr>xml:id</attr></title>
            <p>Planned.</p>
        </subsection>

    </section>

    <section xml:id="webwork-processing">
        <title>Processing</title>

        <subsection>
            <title>Live HTML output</title>
            <p>When you execute <c>xsltproc</c><idx><c>xsltproc</c></idx> using <c>mathbook-html.xsl</c>, pass a <c>webwork.server</c> string parameter to it specifying where the server is that will do your processing. Example:</p>
            <sidebyside>
                <console>
                    <prompt>$ </prompt>
                    <input>xsltproc --stringparam webwork.server webwork-ptx.aimath.org mathbook-html.xsl &lt;xml&gt;</input>
                </console>
            </sidebyside>
            <p>Note: Make sure not to use a trailing slash (/) in the string parameter for <c>webwork.server</c>.</p>
            <p>For live HTML output, this is all that is needed.</p>
        </subsection>

        <subsection xml:id="webwork-latex-output">
            <title><latex /> output</title>
            <p>To make PDF output, you must first use the <c>mbx</c> script to extract <pretext /> content from the <webwork /> server into an auxiliary XML file, which you might call <c>webwork-extraction.xml/</c> as in this example:</p>
            <sidebyside>
                <console>
                    <prompt>$ </prompt>
                    <input>mbx -c webwork -s &lt;server&gt; -d webwork-extraction.xml &lt;xml&gt;</input>
                </console>
            </sidebyside>
            <p>You may want to specify a path to <c>webwork-extraction.xml</c>. Alongside this file will be stored any image files that the <webwork /> server generates.</p>
            <p>Next, use <c>xsltproc</c> with <c>pretext-merge.xsl</c> to merge your entire source tree with the extracted <webwork /> content. The string parameter <c>webwork.extraction</c> must identify the auxiliary XML file created in the previous step. Store the output in some file, for example <c>merge.ptx</p> in this example:</p>
            <sidebyside>
                <console>
                    <prompt>$ </prompt>
                    <input>xsltproc --stringparam webwork.extraction webwork-extraction.xml pretext-merge.xsl &lt;xml&gt; > merge.ptx</input>
                </console>
            </sidebyside>
            <p>Note that you may need to provide file paths to <c>webwork-extraction.xml</c> and <c>pretext-merge.xsl</c>.</p>
            <p>Now you may use <c>xsltproc</c> with <c>mathbook-latex.xsl</c> as usual, but applied to <c>merge.ptx</c>.</p>
            <sidebyside>
                <console>
                    <prompt>$ </prompt>
                    <input>xsltproc mathbook-latex.xsl merge.ptx</input>
                </console>
            </sidebyside>
        </subsection>

        <subsection>
            <title>Creating Files for Uploading to <webwork /></title>

            <p>All of the <tag>webwork</tag> that you have written into your project can be <q>harvested</q> and put into their own <c>.pg</c> files by the <c>mbx</c> script (this excludes <tag>webwork</tag> tags where you gave a <attr>source</attr> attribute.) These files are created with a folder structure that follows the chunking scheme you specify. This process also creates set definition files (<c>.def</c>) for each chunk. For example, you might specify to chunk by section, and then you will have a <c>.def</c> file for each section, listing all of the <c>.pg</c> files associated with that section. For <tag>webwork</tag> tags that used a <attr>source</attr> attribute, the <c>.def</c> file will include them as well. Lastly, this archiving process creates <c>.pg</c> files to be used as set header files to go along with each set definition.</p>
            <sidebyside>
                <console>
                    <prompt>$ </prompt>
                    <input>xsltproc --stringparam chunk.level 2 &lt;path to mathbook-webwork-archive.xsl&gt; &lt;xml&gt;</input>
                </console>
            </sidebyside>
            <p>This creates a folder called <c>local/</c> that will have a subfolder corresponding to your project, which in turn has a folder tree with all of the <c>.pg</c> and <c>.def</c> files laid out according to your chunk level. You can tarball this <c>local/</c> folder (compress it into a <c>.tgz</c> file and upload it into an active <webwork /> course where you may then assign the sets to your students (and modify, as you like).</p>
        </subsection>
    </section>

</chapter>
