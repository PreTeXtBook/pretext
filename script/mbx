#! /usr/bin/python

# ********************************************************************
# Copyright 2010-2014 Robert A. Beezer
#
# This file is part of MathBook XML.
#
# MathBook XML is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 or version 3 of the
# License (at your option).
#
# MathBook XML is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MathBook XML.  If not, see <http://www.gnu.org/licenses/>.
# *********************************************************************

##############################################
#
#  Graphics Language Extraction and Processing
#
##############################################

def tikz_conversion(xml_source, dest_dir, outformat):
    global config
    import tempfile, os, os.path, subprocess, shutil
    _verbose('converting tikz pictures from {} to {} graphics in {}'.format(xml_source, outformat, dest_dir))
    dest_dir = sanitize_directory(dest_dir)
    tmp_dir = tempfile.mkdtemp()
    _debug("temporary directory: {}".format(tmp_dir))
    xslt_executable = get_executable(config,  'xslt')
    _debug("xslt executable: {}".format(xslt_executable))
    tex_executable = get_executable(config,  'tex')
    _debug("tex executable: {}".format(tex_executable))
    pdfsvg_executable = get_executable(config, 'pdfsvg')
    _debug("pdfsvg executable: {}".format(pdfsvg_executable))
    # http://stackoverflow.com/questions/11269575/how-to-hide-output-of-subprocess-in-python-2-7
    devnull = open(os.devnull, 'w')
    convert_cmd = [xslt_executable,
        '--stringparam', 'scratch', tmp_dir,
        '--xinclude',
        os.path.join(mbx_xsl_dir, 'extract-tikz.xsl'),
        xml_source
        ]
    _verbose("extracting tikz pictures from {}".format(xml_source))
    _debug("tikz conversion {}".format(convert_cmd))
    subprocess.call(convert_cmd)
    cwd = os.getcwd()
    os.chdir(tmp_dir)
    for tikzpic in os.listdir(tmp_dir):
        if outformat == 'source':
            shutil.copy2(tikzpic, dest_dir)
        else:
            filebase, _ = os.path.splitext(tikzpic)
            tikzpdf = "{}.pdf".format(filebase)
            tikzsvg = "{}.svg".format(filebase)
            latex_cmd = [tex_executable, tikzpic]
            _verbose("converting {} to {}".format(tikzpic, tikzpdf))
            subprocess.call(latex_cmd, stdout=devnull, stderr=subprocess.STDOUT)
            if outformat == 'svg':
                svg_cmd = [pdfsvg_executable, tikzpdf, tikzsvg]
                _verbose("converting {} to {}".format(tikzpdf, tikzsvg))
                subprocess.call(svg_cmd)
                shutil.copy2(tikzsvg, dest_dir)
            if outformat == 'pdf':
                shutil.copy2(tikzpdf, dest_dir)


def asymptote_conversion(xml_source, dest_dir, outformat):
    global config
    import tempfile, os, os.path, subprocess, shutil, glob
    _verbose('converting Asymptote diagrams from {} to {} graphics in {}'.format(xml_source, outformat.upper(), dest_dir))
    dest_dir = sanitize_directory(dest_dir)
    tmp_dir = tempfile.mkdtemp()
    _debug("temporary directory: {}".format(tmp_dir))
    xslt_executable = get_executable(config,  'xslt')
    _debug("xslt executable: {}".format(xslt_executable))
    asy_executable = get_executable(config,  'asy')
    _debug("asy executable: {}".format(asy_executable))
    extract_cmd = [xslt_executable,
        '--stringparam', 'scratch', tmp_dir,
        '--xinclude',
        os.path.join(mbx_xsl_dir, 'extract-asymptote.xsl'),
        xml_source
        ]
    _verbose("extracting Asymptote diagrams from {}".format(xml_source))
    subprocess.call(extract_cmd)
    cwd = os.getcwd()
    os.chdir(tmp_dir)
    devnull = open(os.devnull, 'w')
    for asydiagram in os.listdir(tmp_dir):
        if outformat == 'source':
            shutil.copy2(asydiagram, dest_dir)
        else:
            filebase, _ = os.path.splitext(asydiagram)
            asyout = "{}.{}".format(filebase, outformat)
            asypng = "{}_*.png".format(filebase)
            asy_cmd = [asy_executable, '-batchMask', '-outformat', outformat, asydiagram]
            _verbose("converting {} to {}".format(asydiagram, asyout))
            _debug("asymptote conversion {}".format(asy_cmd))
            subprocess.call(asy_cmd, stdout=devnull, stderr=subprocess.STDOUT)
            shutil.copy2(asyout, dest_dir)
            # Sometimes Asymptotes SVGs include multiple PNGs for colored regions
            for f in glob.glob(asypng):
                shutil.copy2(f, dest_dir)


def sage_conversion(xml_source, dest_dir, outformat):
    global config
    import tempfile, os, os.path, subprocess, shutil, glob
    _verbose('converting Sage diagrams from {} to {} graphics in {}'.format(xml_source, outformat.upper(), dest_dir))
    dest_dir = sanitize_directory(dest_dir)
    tmp_dir = tempfile.mkdtemp()
    _debug("temporary directory: {}".format(tmp_dir))
    xslt_executable = get_executable(config,  'xslt')
    _debug("xslt executable: {}".format(xslt_executable))
    sage_executable = get_executable(config,  'sage')
    _debug("sage executable: {}".format(sage_executable))
    extract_cmd = [xslt_executable,
        '--stringparam', 'scratch', tmp_dir,
        '--xinclude',
        os.path.join(mbx_xsl_dir, 'extract-sageplot.xsl'),
        xml_source
        ]
    _verbose("extracting Sage diagrams from {}".format(xml_source))
    subprocess.call(extract_cmd)
    cwd = os.getcwd()
    os.chdir(tmp_dir)
    devnull = open(os.devnull, 'w')
    for sageplot in os.listdir(tmp_dir):
        if outformat == 'source':
            shutil.copy2(sageplot, dest_dir)
        else:
            filebase, _ = os.path.splitext(sageplot)
            sageout = "{0}.{1}".format(filebase, outformat)
            sagepng = "{0}.png".format(filebase, outformat)
            sage_cmd = [sage_executable,  sageplot, outformat]
            _verbose("converting {} to {} (or {} for 3D)".format(sageplot, sageout, sagepng))
            _debug("sage conversion {}".format(sage_cmd))
            subprocess.call(sage_cmd, stdout=devnull, stderr=subprocess.STDOUT)
            # Sage makes PNGs for 3D
            for f in glob.glob(sageout):
                shutil.copy2(f, dest_dir)
            for f in glob.glob(sagepng):
                shutil.copy2(f, dest_dir)

def latex_image_conversion(xml_source, dest_dir, outformat):
    global config
    import tempfile, os, os.path, subprocess, shutil
    _verbose('converting latex-image pictures from {} to {} graphics in {}'.format(xml_source, outformat, dest_dir))
    dest_dir = sanitize_directory(dest_dir)
    tmp_dir = tempfile.mkdtemp()
    _debug("temporary directory: {}".format(tmp_dir))
    xslt_executable = get_executable(config,  'xslt')
    _debug("xslt executable: {}".format(xslt_executable))
    tex_executable = get_executable(config,  'tex')
    _debug("tex executable: {}".format(tex_executable))
    pdfsvg_executable = get_executable(config, 'pdfsvg')
    _debug("pdfsvg executable: {}".format(pdfsvg_executable))
    # http://stackoverflow.com/questions/11269575/how-to-hide-output-of-subprocess-in-python-2-7
    devnull = open(os.devnull, 'w')
    convert_cmd = [xslt_executable,
        '--stringparam', 'scratch', tmp_dir,
        '--xinclude',
        os.path.join(mbx_xsl_dir, 'extract-latex-image.xsl'),
        xml_source
        ]
    _verbose("extracting latex-image pictures from {}".format(xml_source))
    _debug("latex-image conversion {}".format(convert_cmd))
    subprocess.call(convert_cmd)
    cwd = os.getcwd()
    os.chdir(tmp_dir)
    for latex_image in os.listdir(tmp_dir):
        if outformat == 'source':
            shutil.copy2(latex_image, dest_dir)
        else:
            filebase, _ = os.path.splitext(latex_image)
            latex_image_pdf = "{}.pdf".format(filebase)
            latex_image_svg = "{}.svg".format(filebase)
            latex_cmd = [tex_executable, latex_image]
            _verbose("converting {} to {}".format(latex_image, latex_image_pdf))
            subprocess.call(latex_cmd, stdout=devnull, stderr=subprocess.STDOUT)
            if outformat == 'svg':
                svg_cmd = [pdfsvg_executable, latex_image_pdf, latex_image_svg]
                _verbose("converting {} to {}".format(latex_image_pdf, latex_image_svg))
                subprocess.call(svg_cmd)
                shutil.copy2(latex_image_svg, dest_dir)
            if outformat == 'pdf':
                shutil.copy2(latex_image_pdf, dest_dir)

#######################################
#
# Sage Worksheet Creation and Packaging
#
#######################################

# Conversion object adapted/simplified from  tex2sws  project (c. 2010)

# TODO: patrol normalized paths for Windows compatibility (universally)
# TODO: Cleanup temporay directory if not -vv

class MathBookXMLtoSWS(object):

    def __init__(self, xslt_exec, mbx_dir, xml_file, sws_file):
        r"""
        Configure the working environment for a conversion.

        INPUT:

        - ``xslt_exec`` - XSLT executable

        - ``mbx_dir`` - root of MBX distribution

        - ``xml_file`` - a MathBook XML file to convert
          to a Sage Notebook file

        - ``sws_file`` - final name/location of Sage Notebook file

        OUTPUT:
        An sws format file for the Sage Notebook reflecting the document.
        """
        import os.path   # join
        import tempfile  # mkdtemp

        _verbose('converting {} to {}'.format(xml_file, sws_file))

        if not xml_file:
            raise ValueError('an XML file for input must be specified')
        if not sws_file:
            raise ValueError('an SWS file for output must be specified')

        _debug('MBX, XML, SWS locations: {}, {}, {}'.format(mbx_dir, xml_file, sws_file))

        # Record locations for use later in the class
        # Prior to making/using temporary directory
        self._xml_file = os.path.abspath(xml_file)
        self._sws_file = os.path.abspath(sws_file)
        self._xsltproc_exec = xslt_exec
        self._mathbook_xslt = os.path.join(mbx_dir, 'xsl/mathbook-sagenb.xsl')
        # Whole book as Sage worksheets
        # self._mathbook_xslt = '/home/rob/books/aata/aata/xsl/aata-sagenb.xsl'
        # Just exercises as Sage worksheets
        # self._mathbook_xslt = '/home/rob/books/aata/aata/xsl/aata-sage-exercises.xsl'
        self._source_dir = get_source_path(self._xml_file)
        self._tmp_dir = tempfile.mkdtemp()
        _debug('xslt exec, MB XSL, source-dir, temp-dir: {}, {}, {}, {}'.format(self._xsltproc_exec, self._mathbook_xslt, self._source_dir, self._tmp_dir))

    def _process_xml(self):
        import os
        import subprocess

        _verbose('extracting files and assets from XML file via XSLT')
        os.chdir(self._tmp_dir)
        devnull = open(os.devnull, 'w')
        content_cmd = [self._xsltproc_exec, '--xinclude',
                       '--stringparam', 'purpose', 'files',
                       self._mathbook_xslt, self._xml_file
                      ]
        subprocess.call(content_cmd)
        info_cmd = [self._xsltproc_exec, '--xinclude',
                       '--stringparam', 'purpose', 'info',
                       self._mathbook_xslt, self._xml_file
                      ]
        # info will be a string that begins with "manifest = "
        # A list, each element a pair
        # first a filename, then a list of included files
        info = subprocess.check_output(info_cmd)
        exec(info)
        _debug('Manifest, information list: {}'.format(manifest))
        return manifest


    def _create_single_sws(self, html_file, title, assets):
        r"""
        Create a single Sage worksheet in SWS format.

        INPUTS:

        - ``html_file`` - name of an HTML file of "raw" content

        - ``title`` - string for title

        - ``assets`` - a list of (image) files to place
          in the worksheet data directory

        This routine creates a worksheet "from scratch" using just Python
        and none of the notebook code.  This makes for quicker startup times
        and the ability to run without Sage present.

        OUTPUT:  This routine places a Sage worksheet in the main
        temporary directory.  Later we determine if there are more.
        """
        import time  # for last change in pickled worksheet info
        import tempfile
        import tarfile
        import cPickle
        import os
        import os.path  # join, split, splitext
        import glob     # find PNG's of SVg's

        # Make a generic worksheet configuration as a Python dictionary
        basic = {
            'name': title,
            'system': 'sage',
            'owner': 'admin',
            'last_change': ('admin', time.time()),
            }

        basename, _ = os.path.splitext(html_file)
        base_dir = 'sage_worksheet'
        data_dir = 'data'

        # Build sws as a tar file
        sws_file = '{}.sws'.format(basename)
        T = tarfile.open(sws_file, 'w:bz2')

        # Pickle configuration file
        # Write into temp file, add to sws file
        fd, configfile =  tempfile.mkstemp()
        config = cPickle.dumps(basic)
        open(configfile, 'w').write(config)
        T.add(configfile, os.path.join(base_dir, 'worksheet_conf.pickle'))
        os.unlink(configfile)
        os.fdopen(fd,'w').close()

        # Worksheet file, new style (.html suffix)
        _debug('Making "worksheet.html" in sws archive from {}'.format(html_file))
        T.add(html_file, arcname=os.path.join(base_dir, 'worksheet.html'))

        # Worksheet file, old style (prepend two-line header, .txt suffix)
        _debug('Making "worksheet.txt" in sws archive from {}'.format(html_file))
        header = '{}\nsystem: sage\n'.format(title)
        original = open(html_file, 'r').read()
        fd, oldstyle =  tempfile.mkstemp()
        open(oldstyle, 'w').write(header + original)
        T.add(oldstyle, arcname=os.path.join(base_dir, 'worksheet.txt'))
        os.unlink(oldstyle)
        os.fdopen(fd,'w').close()

        # add various necessary files from asset list
        for afile in assets:
            source = os.path.join(self._source_dir, afile)
            # XSLT produces SVG file names for generated plots
            # PNG is the fallback, esp for <sageplot>
            if not(os.path.isfile(source)):
                source = source[:-3] + 'png'
                afile = afile[:-3] + 'png'
            dest = os.path.join(base_dir, data_dir, afile)
            _debug('adding {} to sws archive as {}'.format(source, dest))
            T.add(source, arcname=dest)
            # look for Asymptote SVG's which include similarly-named PNG's
            base, ext = os.path.splitext(afile)
            if ext in ['.svg', '.SVG']:
                pattern = os.path.join(self._source_dir, base + '_*.png')
                for f in glob.glob(pattern):
                    _, includedfile = os.path.split(f)
                    dest = os.path.join(base_dir, data_dir, base + '_*.png')
                    T.add(f, arcname=dest)

        T.close()
        return sws_file

    def _package_worksheets(self, worksheets):
        r"""
        Rename/move single worksheet, or zip a collection.

        INPUTS:

        - ``worksheets`` - a list of worsheet file names, no paths

        OUTPUT:  One SWS file, or several collected in a zip archive.
        """
        import os.path # splitext
        import shutil  # copy2
        import zipfile # Zipfile

        destination = self._sws_file  # perhaps really a zip file
        _verbose('Manufacturing final notebook-compatible file: {}'.format(destination))
        _debug('Packaging following SWS files: {}'.format(worksheets))

        # Sanity checks on worksheets, filename
        if len(worksheets) == 0:
            raise ValueError('XSLT transform produced no output, check configuration')
        single = (len(worksheets) == 1)
        _, ext = os.path.splitext(destination)
        if single:
            if not(ext in ['.sws', '.SWS']):
                msg = 'creating a single worksheet, filename should end in ".sws", not "{}"'
                raise ValueError(msg.format(ext))
        else:
            if not(ext in ['.zip', '.ZIP']):
                msg = 'creating multiple worksheets, filename should end in ".zip", not "{}"'
                raise ValueError(msg.format(ext))
        if single:
            # Singe worksheet: copy from temp/working to final resting place
            # Prepend temp directory
            sws = os.path.join(self._tmp_dir, worksheets[0])
            shutil.copy2(sws, destination)
        else:
            # Multiple worksheets: manufactured in final resting place
            Z = zipfile.ZipFile(destination, 'w')
            for afile in worksheets:
                Z.write(afile)
            Z.close()


    def convert(self):
        r"""
        The one public method.
        """
        import subprocess
        import os.path

        worksheets = []
        info = self._process_xml()
        # Creating early portions of the document later in time
        # provides later timestamps and places them lower in the
        # time-sorted worksheet-list of the Sage notebook interface
        for afile in reversed(info):
            _verbose('Converting {} to an SWS file'.format(afile[0]))
            sws_file = self._create_single_sws(afile[0], afile[1], afile[2])
            worksheets.append(sws_file)
        self._package_worksheets(worksheets)


###################
#
# Utility Functions
#
###################

def _verbose(msg):
    """Write a message to the console on program progress"""
    global args
    if args.verbose >= 1:
        print 'MBX: {}'.format(msg)


def _debug(msg):
    """Write a message to the console with some raw information"""
    global args
    if args.verbose >= 2:
        print 'MBX-DEBUG: {}'.format(msg)


def get_mbx_path():
    """Returns path of root MBX directory"""
    import sys, os.path
    _verbose("discovering MBX location from executable location")
    # split path off executable
    program_dir, _ = os.path.split(sys.argv[0])
    # strip "script", remove trailing separator
    return os.path.normpath(program_dir[:-6])


def get_source_path(source_file):
    """Returns path of source XML file"""
    import sys, os.path
    _verbose("discovering source directory from source location")
    # split path off filename
    source_dir, _ = os.path.split(source_file)
    return os.path.normpath(source_dir)

def get_executable(config, exec_name):
    "Queries configuration file for executable name, verifies existence in Unix"
    import os
    import platform
    import subprocess

    # http://stackoverflow.com/questions/11210104/check-if-a-program-exists-from-a-python-script
    # suggests  where.exe  as Windows equivalent (post Windows Server 2003)
    # which  = 'where.exe' if platform.system() == 'Windows' else 'which'

    # get the name, but then see if it really, really works
    _debug('locating "{}" in [executables] section of configuration file'.format(exec_name))
    config_name = config.get('executables', exec_name)

    devnull = open(os.devnull, 'w')
    try:
        result_code = subprocess.call(['which', config_name], stdout=devnull, stderr=subprocess.STDOUT)
    except OSError:
        print 'MBX:WARNING: executable existence-checking was not performed (e.g. on Windows)'
        result_code = 0  # perhaps a lie on Windows
    if result_code != 0:
        error_message = '\n'.join([
                        'cannot locate executable with configuration name "{}" as command "{}"',
                        'Edit the configuration file and/or install the necessary program'])
        raise OSError(error_message.format(exec_name, config_name))
    _debug("{} executable: {}".format(exec_name, config_name))
    return config_name

def get_cli_arguments():
    """Return the CLI arguments in parser object"""
    import argparse
    parser = argparse.ArgumentParser(description='MathBook XML utility script', formatter_class=argparse.RawTextHelpFormatter)

    verbose_help = '\n'.join(["verbosity of information on progress of the program",
                              "  -v  is actions being performed",
                              "  -vv is some additional raw debugging information"])
    parser.add_argument('-v', '--verbose', help=verbose_help, action="count")

    component_info = [
        ('tikz', 'tikz pictures'),
        ('asy', 'Asymptote diagrams'),
        ('sageplot', 'Sage graphics'),
        ('latex-image', 'LaTeX pictures'),
        ('all', 'Complete document'),
    ]
    component_help = 'Possible components are:\n' + '\n'.join(['  {} - {}'.format(info[0], info[1]) for info in component_info])
    parser.add_argument('-c', '--component', help=component_help, action="store", dest="component")

    format_info = [
        ('svg', 'Scalable Vector Graphicsfile(s)'),
        ('pdf', 'Portable Document Format file(s)'),
        ('source', 'Standalone source files'),
        ('latex', 'LaTeX source file'),
        ('html', 'HyperText Markup Language (web pages)'),
        ('sagenb', 'Sage *.sws archive of worksheets'),
    ]
    format_help = 'Output formats are:\n' + '\n'.join(['  {} - {}'.format(info[0], info[1]) for info in format_info])
    parser.add_argument('-f', '--format', help=format_help, action="store", dest='format')

    parser.add_argument('-o', '--output', help='file for output', action="store", dest='out')
    parser.add_argument('-d', '--directory', help='directory for output', action="store", dest='dir')

    parser.add_argument('xml_file', help='MathBook XML source file with content', action="store")

    return parser.parse_args()


def sanitize_directory(dir):
    """Verify directory name, or raise error"""
    # Use with os.path.join, and do not sweat separator
    import os.path
    _verbose('verifying directory: {}'.format(dir))
    if not(os.path.isdir(dir)):
        raise ValueError('directory {} does not exist'.format(dir))
    return dir


def get_config_info(script_dir):
    """Return configuation in object for querying"""
    import ConfigParser, os.path
    defaults = {}
    defaults['xslt'] = 'xsltproc'
    defaults['tex'] = 'xelatex'
    defaults['pdfsvg'] = 'pdf2svg'
    defaults['asy'] = 'asy'
    defaults['sage'] = 'sage'
    config_file = os.path.join(script_dir, "mbx.cfg")
    _verbose("reading configuration file at {}".format(config_file))
    config = ConfigParser.SafeConfigParser(defaults)
    config.read(config_file)
    return config


######
#
# Main
#
######

# Parse command line
# Deduce some paths
# Read configuration file
# Switch on command line

import os.path

args = get_cli_arguments()
_debug("CLI args {}".format(vars(args)))

mbx_dir = get_mbx_path()
mbx_xsl_dir = os.path.join(mbx_dir, "xsl")
mbx_script_dir = os.path.join(mbx_dir, "script")
_debug("xsl, script dirs: {}, {}".format(mbx_xsl_dir, mbx_script_dir))

config = get_config_info(mbx_script_dir)

if args.component == 'tikz':
    if args.format == 'pdf':
        tikz_conversion(args.xml_file, args.dir, 'pdf')
    elif args.format == 'svg':
        tikz_conversion(args.xml_file, args.dir, 'svg')
    elif args.format == 'source':
        tikz_conversion(args.xml_file, args.dir, 'source')
    else:
        raise NotImplementedError('cannot make TikZ pictures in "{}" format'.format(args.format))
elif args.component == 'asy':
    if args.format == 'pdf':
        asymptote_conversion(args.xml_file, args.dir, 'pdf')
    elif args.format == 'svg':
        asymptote_conversion(args.xml_file, args.dir, 'svg')
    elif args.format == 'source':
        asymptote_conversion(args.xml_file, args.dir, 'source')
    else:
        raise NotImplementedError('cannot make Asymptote diagrams in "{}" format'.format(args.format))
elif args.component == 'sageplot':
    if args.format == 'pdf':
        sage_conversion(args.xml_file, args.dir, 'pdf')
    elif args.format == 'svg':
        sage_conversion(args.xml_file, args.dir, 'svg')
    elif args.format == 'source':
        sage_conversion(args.xml_file, args.dir, 'source')
    else:
        raise NotImplementedError('cannot make Sage graphics in "{}" format'.format(args.format))
elif args.component == 'latex-image':
    if args.format == 'pdf':
        latex_image_conversion(args.xml_file, args.dir, 'pdf')
    elif args.format == 'svg':
        latex_image_conversion(args.xml_file, args.dir, 'svg')
    elif args.format == 'source':
        latex_image_conversion(args.xml_file, args.dir, 'source')
    else:
        raise NotImplementedError('cannot make LaTeX pictures in "{}" format'.format(args.format))
elif args.component == 'all':
    if args.format == 'sagenb':
        # initialize  the converter
        xslt_executable = get_executable(config,  'xslt')
        _debug("xslt executable command: {}".format(xslt_executable))
        m2s = MathBookXMLtoSWS(xslt_exec=xslt_executable, mbx_dir=mbx_dir, xml_file=args.xml_file, sws_file=args.out)
        # Do the conversion
        m2s.convert()
    elif args.format == 'html':
        raise NotImplementedError("conversion to HTML version not integrated yet, use command line")
    elif args.format == 'latex':
        raise NotImplementedError("conversion to LaTeX version not integrated yet, use command line")
    else:
        raise NotImplementedError('cannot make entire document in "{}" format'.format(args.format))
else:
    raise ValueError('the "{}" component is not a conversion option'.format(args.component))