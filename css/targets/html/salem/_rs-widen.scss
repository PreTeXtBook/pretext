
// --------------------------------------------------------------------------
// Flexible / centered widening of rs elements

$content-width: 725px !default;
$content-side-padding: 48px !default;

$content-with-padding-width: $content-width + 2 * $content-side-padding;

// components that should be wide
$rs-wide-elements: ".ac_section, .codelens, .parsons_section, .hparsons_section, .datafile, .contains-wide";

// grouping elements that may have wide elements and require different margins
// need to make sure those elements have a consistent amount of (padding+border)
$grouping-elements: ".theorem-like, .definition-like, .example-like, .exercise-like, .project-like, .remark-like, .openproblem-like, .openproblems-like, .computation-like, .knowl__content";


// widen all runestone elements that should be wide
.ptx-runestone-container:has(#{$rs-wide-elements}) {
  width: calc(100cqw - 2 * $content-side-padding);
  max-width: unset;
  margin-left: calc(-0.5 * (100cqw - #{$content-with-padding-width}));
}

// unless nested in other runestones
.ptx-runestone-container {
  .ptx-runestone-container:has(#{$rs-wide-elements})
  {
    width: 100%;
    min-width: 100%;
    margin-left: auto;
  }
}

// also wide grouping elements that have runestone elements
:is(#{$grouping-elements}):has(#{$rs-wide-elements}) {
  width: calc(100cqw - 2 * $content-side-padding);
  max-width: unset;
  margin-left: calc(-0.5 * (100cqw - $content-with-padding-width));
}
// unless nested in other runestones
:is(#{$grouping-elements}):has(#{$rs-wide-elements}) {
  :is(#{$grouping-elements}):has(#{$rs-wide-elements}) {
    width: 100%;
    margin-left: auto;
  }
}

// which simplifies the nested rs elements
:is(#{$grouping-elements}) .ptx-runestone-container:has(#{$rs-wide-elements}) {
  width: 100%;
  margin-left: 0;
}

// now handle smaller screens
@container ptx-main (width < 850px) {
  .ptx-runestone-container:has(#{$rs-wide-elements}) {
    width: calc(100cqw);
    margin-left: calc(-0.5*(100cqw - 100%));
  }
  :is(#{$grouping-elements}):has(#{$rs-wide-elements}) {
    width: calc(100cqw);
    margin-left: calc(-0.5*(100cqw - 100%));
  }
  :is(#{$grouping-elements}) .ptx-runestone-container:has(#{$rs-wide-elements}) {
    width: calc(100% + 10px);  //cheat into padding
    margin-left: -5px;
  }
}


/* limit width of content inside ac except for actual activecode */
.runestone.ac_section
  > div
  > div
  > *:not(.ac_code_div):not(.ac_output):not(.codelens):not(.ac_actions) {
  max-width: $content-width;
  margin-left: auto;
  margin-right: auto;
}

/* limit width of content inside parsons except for actual parsons */
.runestone.parsons_section > .parsons {
  width: 100%;
  padding-right: 0;
  
  .sortable-code-container {
    display: flex;
    flex-flow: wrap;
    justify-content: center;
    gap: 15px;
    margin: 10px auto;
  }

  .sortable-code {
    margin: 0;
  }

  .runestone_caption_text {
    max-width: unset;
  }
  
  & > div > *:not(.sortable-code-container) {
    max-width: $content-width;
    margin-left: auto;
    margin-right: auto;
  }
}
